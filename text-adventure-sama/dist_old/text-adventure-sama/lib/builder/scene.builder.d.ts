import { GameBuilder } from './game.builder';
import { Game } from '../models/game.model';
import { Scene } from '../models/scene.model';
import { InGameItem } from '../models/Item.model';
import { ItemBuilder } from './item.builder';
import { ItemContainingBuilder } from './interfaces/item-containing.builder';
import { BaseBuilder } from './base.builder';
import { ActionContainingBuilder } from './interfaces/action-containing.builder';
import { Action } from '../models/actions/action.model';
import { BaseActionBuilder } from './action-builders/base-action.builder';
import { GatewayActionBuilder } from './action-builders/gateway-action.builder';
import { ItemConsumingActionBuilder } from './action-builders/item-consuming-action.builder';
import { ItemRemovingActionBuilder } from './action-builders/item-removing-action.builder';
import { ItemYieldingActionBuilder } from './action-builders/item-yielding-action.builder';
import { MultiTimeActionBuilder } from './action-builders/multi-time-action.builder';
import { RandomResponseActionBuilder } from './action-builders/random-response-action.builder';
import { OneTimeActionBuilder } from './action-builders/one-time-action.builder';
export declare class SceneBuilder extends BaseBuilder implements ItemContainingBuilder, ActionContainingBuilder {
    private GameBuilder;
    private Game;
    protected Scene: Scene;
    constructor(gameBuilder: GameBuilder, game: Game, sceneId?: number);
    addActionToBuilder(action: Action): void;
    addAction<T extends Action>(action: T): BaseActionBuilder<T, SceneBuilder>;
    addGatewayAction(): GatewayActionBuilder<SceneBuilder>;
    addItemConsumingAction(): ItemConsumingActionBuilder<SceneBuilder>;
    addItemRemovingAction(): ItemRemovingActionBuilder<SceneBuilder>;
    addItemYieldingAction(): ItemYieldingActionBuilder<SceneBuilder>;
    addMultiTimeAction(id?: number): MultiTimeActionBuilder<SceneBuilder>;
    addOneTimeAction(): OneTimeActionBuilder<SceneBuilder>;
    addRandomResponseAction(): RandomResponseActionBuilder<SceneBuilder>;
    addItemToBuilder(item: InGameItem): void;
    addItem(item?: InGameItem): ItemBuilder<SceneBuilder>;
    setName(name: string): this;
    setDescription(description: string): this;
    setActionNotRecognizedResponse(response: string): this;
    setItemNotFoundResponse(response: string): this;
    setInvalidInputResponse(response: string): this;
    finish(): GameBuilder;
}
