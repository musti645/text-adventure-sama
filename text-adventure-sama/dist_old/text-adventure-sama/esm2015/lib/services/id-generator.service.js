import { ItemYieldingAction } from '../models/actions/item-yielding-action.model';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Assigns IDs to Objects by counting the amount of distinct types
 */
export class IDGeneratorService {
    constructor() {
        this.typeArray = [];
    }
    generateIDs(game) {
        this.processScenes(game.getStage().getScenes());
        this.typeArray = [];
    }
    processScenes(scenes) {
        scenes.forEach(element => {
            if (!element.getID()) {
                element.setID(this.getIdFromTypeName(element.constructor.name));
            }
            else {
                this.setUsedIdForTypeName(element.constructor.name, element.getID());
            }
            this.processActions(element.getActions());
            this.processItems(element.getItems());
        });
    }
    processActions(actions) {
        actions.forEach(element => {
            if ((element instanceof ItemYieldingAction)
                && !element.getItem().getID()) {
                element.getItem().setID(this.getIdFromTypeName(element.constructor.name));
            }
        });
    }
    processItems(items) {
        items.forEach(element => {
            if (!element.getID()) {
                element.setID(this.getIdFromTypeName(element.constructor.name));
            }
            else {
                this.setUsedIdForTypeName(element.constructor.name, element.getID());
            }
        });
    }
    getIdFromTypeName(name) {
        const index = this.typeArray.findIndex(element => {
            return element.Name === name;
        });
        if (index !== -1) {
            return this.typeArray[index].getAndIncrementCount();
        }
        return this.createTypeCountContainer(name).getAndIncrementCount();
    }
    addItemId(item) {
        this.setUsedIdForTypeName(item.constructor.name, item.getID());
    }
    addSceneId(scene) {
        this.setUsedIdForTypeName(scene.constructor.name, scene.getID());
    }
    addActionItemId(action) {
        this.setUsedIdForTypeName(action.getItem().constructor.name, action.getItem().getID());
    }
    /**
     * Add the passed id to the corresponding typeNameContainer's usedID Array
     */
    setUsedIdForTypeName(name, id) {
        const index = this.typeArray.findIndex(element => {
            return element.Name === name;
        });
        if (index !== -1) {
            this.typeArray[index].addUsedID(id);
            return;
        }
        this.createTypeCountContainer(name).addUsedID(id);
    }
    createTypeCountContainer(name) {
        const container = new TypeCountContainer(name);
        this.typeArray.push(container);
        return container;
    }
    getTypeCountContainers() {
        return this.typeArray;
    }
}
IDGeneratorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IDGeneratorService_Factory() { return new IDGeneratorService(); }, token: IDGeneratorService, providedIn: "root" });
IDGeneratorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IDGeneratorService.ctorParameters = () => [];
export class TypeCountContainer {
    constructor(name) {
        this.Name = name;
        this.Count = 0;
        this.UsedIDs = [];
    }
    getAndIncrementCount() {
        this.Count++;
        while (this.isCurrentCountUsed()) {
            this.Count++;
        }
        this.addUsedID(this.Count);
        return this.Count;
    }
    addUsedID(usedId) {
        if (this.isIdUsed(usedId)) {
            throw new EvalError('Id is already being used.');
        }
        this.UsedIDs.push(usedId);
    }
    isCurrentCountUsed() {
        return this.UsedIDs.filter(element => element === this.Count).length > 0;
    }
    isIdUsed(id) {
        return !(!this.UsedIDs.find(element => element === id));
    }
}
//# sourceMappingURL=data:application/json;base64,