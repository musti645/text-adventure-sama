import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Singleton Service handling Item Events
 */
export class ItemEventService {
    constructor() {
        this.ItemConsumingActionEventSource = new Subject();
        this.ItemYieldingActionEventSource = new Subject();
        this.ItemRemovingActionEventSource = new Subject();
        this.ItemConsumingActionEvent$ = this.ItemConsumingActionEventSource.asObservable();
        this.ItemYieldingActionEvent$ = this.ItemYieldingActionEventSource.asObservable();
        this.ItemRemovingActionEvent$ = this.ItemRemovingActionEventSource.asObservable();
    }
    static getInstance() {
        if (!ItemEventService.Instance) {
            ItemEventService.Instance = new ItemEventService();
        }
        return ItemEventService.Instance;
    }
    consumeItem(event) {
        this.ItemConsumingActionEventSource.next(event);
    }
    yieldItem(event) {
        this.ItemYieldingActionEventSource.next(event);
    }
    removeItem(event) {
        this.ItemRemovingActionEventSource.next(event);
    }
}
ItemEventService.Instance = undefined;
ItemEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ItemEventService_Factory() { return new ItemEventService(); }, token: ItemEventService, providedIn: "root" });
ItemEventService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ItemEventService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1ldmVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkU6L0Rva3VtZW50ZS9SZXBvc2l0b3JpZXMvVGV4dEFkdmVudHVyZVNhbWEvdGV4dC1hZHZlbnR1cmUtc2FtYS9wcm9qZWN0cy90ZXh0LWFkdmVudHVyZS1zYW1hL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9pdGVtLWV2ZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQzs7R0FFRztBQUlILE1BQU0sT0FBTyxnQkFBZ0I7SUFJekI7UUFNUSxtQ0FBOEIsR0FBRyxJQUFJLE9BQU8sRUFBNEIsQ0FBQztRQUN6RSxrQ0FBNkIsR0FBRyxJQUFJLE9BQU8sRUFBMkIsQ0FBQztRQUN2RSxrQ0FBNkIsR0FBRyxJQUFJLE9BQU8sRUFBMkIsQ0FBQztRQUV4RSw4QkFBeUIsR0FBRyxJQUFJLENBQUMsOEJBQThCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0UsNkJBQXdCLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzdFLDZCQUF3QixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQVZwRixDQUFDO0lBWU0sTUFBTSxDQUFDLFdBQVc7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtZQUM1QixnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3REO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUErQjtRQUM5QyxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxTQUFTLENBQUMsS0FBOEI7UUFDM0MsSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sVUFBVSxDQUFDLEtBQThCO1FBQzVDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7QUE1QmMseUJBQVEsR0FBcUIsU0FBUyxDQUFDOzs7WUFYekQsVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlbUNvbnN1bWluZ0FjdGlvbkV2ZW50LCBJSXRlbUNvbnN1bWluZ0V2ZW50U2VydmljZSB9IGZyb20gJy4uL21vZGVscy9ldmVudHMvaXRlbS1jb25zdW1pbmctYWN0aW9uLmV2ZW50JztcclxuaW1wb3J0IHsgSXRlbVlpZWxkaW5nQWN0aW9uRXZlbnQsIElJdGVtWWllbGRpbmdFdmVudFNlcnZpY2UgfSBmcm9tICcuLi9tb2RlbHMvZXZlbnRzL2l0ZW0teWllbGRpbmctYWN0aW9uLmV2ZW50JztcclxuaW1wb3J0IHsgSXRlbVJlbW92aW5nQWN0aW9uRXZlbnQsIElJdGVtUmVtb3ZpbmdFdmVudFNlcnZpY2UgfSBmcm9tICcuLi9tb2RlbHMvZXZlbnRzL2l0ZW0tcmVtb3ZpbmctYWN0aW9uLmV2ZW50JztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipcclxuICogU2luZ2xldG9uIFNlcnZpY2UgaGFuZGxpbmcgSXRlbSBFdmVudHNcclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXRlbUV2ZW50U2VydmljZSBpbXBsZW1lbnRzIElJdGVtUmVtb3ZpbmdFdmVudFNlcnZpY2UsXHJcbiAgICBJSXRlbVlpZWxkaW5nRXZlbnRTZXJ2aWNlLFxyXG4gICAgSUl0ZW1Db25zdW1pbmdFdmVudFNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIEluc3RhbmNlOiBJdGVtRXZlbnRTZXJ2aWNlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIHByaXZhdGUgSXRlbUNvbnN1bWluZ0FjdGlvbkV2ZW50U291cmNlID0gbmV3IFN1YmplY3Q8SXRlbUNvbnN1bWluZ0FjdGlvbkV2ZW50PigpO1xyXG4gICAgcHJpdmF0ZSBJdGVtWWllbGRpbmdBY3Rpb25FdmVudFNvdXJjZSA9IG5ldyBTdWJqZWN0PEl0ZW1ZaWVsZGluZ0FjdGlvbkV2ZW50PigpO1xyXG4gICAgcHJpdmF0ZSBJdGVtUmVtb3ZpbmdBY3Rpb25FdmVudFNvdXJjZSA9IG5ldyBTdWJqZWN0PEl0ZW1SZW1vdmluZ0FjdGlvbkV2ZW50PigpO1xyXG5cclxuICAgIHB1YmxpYyBJdGVtQ29uc3VtaW5nQWN0aW9uRXZlbnQkID0gdGhpcy5JdGVtQ29uc3VtaW5nQWN0aW9uRXZlbnRTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICBwdWJsaWMgSXRlbVlpZWxkaW5nQWN0aW9uRXZlbnQkID0gdGhpcy5JdGVtWWllbGRpbmdBY3Rpb25FdmVudFNvdXJjZS5hc09ic2VydmFibGUoKTtcclxuICAgIHB1YmxpYyBJdGVtUmVtb3ZpbmdBY3Rpb25FdmVudCQgPSB0aGlzLkl0ZW1SZW1vdmluZ0FjdGlvbkV2ZW50U291cmNlLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogSXRlbUV2ZW50U2VydmljZSB7XHJcbiAgICAgICAgaWYgKCFJdGVtRXZlbnRTZXJ2aWNlLkluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIEl0ZW1FdmVudFNlcnZpY2UuSW5zdGFuY2UgPSBuZXcgSXRlbUV2ZW50U2VydmljZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIEl0ZW1FdmVudFNlcnZpY2UuSW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNvbnN1bWVJdGVtKGV2ZW50OiBJdGVtQ29uc3VtaW5nQWN0aW9uRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLkl0ZW1Db25zdW1pbmdBY3Rpb25FdmVudFNvdXJjZS5uZXh0KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgeWllbGRJdGVtKGV2ZW50OiBJdGVtWWllbGRpbmdBY3Rpb25FdmVudCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuSXRlbVlpZWxkaW5nQWN0aW9uRXZlbnRTb3VyY2UubmV4dChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUl0ZW0oZXZlbnQ6IEl0ZW1SZW1vdmluZ0FjdGlvbkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5JdGVtUmVtb3ZpbmdBY3Rpb25FdmVudFNvdXJjZS5uZXh0KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19