import { Injectable } from '@angular/core';
import * as natural from 'natural';
import { InteractionType } from '../models/interactions/interaction-type.enum';
import { ParseInputResult } from '../models/other/parse-input-result.model';
import * as i0 from "@angular/core";
const language = 'EN';
// see Penn Treebank Part-of-Speech Tags for more info on the tags
const defaultCategory = 'N';
const defaultCategoryCapitalized = 'NNP';
const nounCategories = ['N', 'NN', 'NNS', 'NNP', 'NNPS'];
const verbCategories = ['VB', 'VBD', 'VBG', 'VBN', 'VBO', 'VBZ'];
/**
 * Helps to parse text input and call the corresponding action, returning a response
 */
export class InputParserService {
    constructor() {
    }
    initialize(trainer) {
        return new Promise((resolve) => {
            this.Tokenizer = new natural.WordTokenizer();
            const lexicon = new natural.Lexicon(language, defaultCategory, defaultCategoryCapitalized);
            const ruleSet = new natural.RuleSet('EN');
            this.POSTagger = new natural.BrillPOSTagger(lexicon, ruleSet);
            this.Classifier = new natural.BayesClassifier();
            trainer.trainClassifier(this.Classifier).then(() => resolve(true));
        });
    }
    setGame(game) {
        this.Game = game;
    }
    parseInput(input) {
        const commandsResult = this.getCommandsResponse(input);
        if (commandsResult) {
            return commandsResult;
        }
        // because imperatives are not so common in the brown/penn corpus, we add a 'they ' before
        // the whole sentence, in order to make it a legitimate sentence and identify imperatives as verbs instead of nouns
        input = 'they ' + input;
        const taggedTokens = this.POSTagger.tag(this.Tokenizer.tokenize(input)).taggedWords;
        // we get verbs and nouns, because in many cases a noun may be mistaken to be a verb and vice versa e.g. (a) stick & (to) stick
        const nounsAndVerbs = this.getNounsAndVerbsFromTokenizedInput(taggedTokens);
        const interactionType = this.getInteractionType(input);
        // no interaction type found
        if (interactionType === undefined || interactionType === null) {
            return new ParseInputResult(this.Game.getInvalidInputResponse());
        }
        switch (interactionType) {
            case InteractionType.GO_TO:
                // scenes/gateway actions
                return this.getGoToResponse(nounsAndVerbs);
            case InteractionType.LOOK_AT:
                // item description
                return this.getLookAtResponse(nounsAndVerbs);
            case InteractionType.PICK_UP:
                // add item to inventory
                return this.getPickUpResponse(nounsAndVerbs);
            case InteractionType.USE:
                // use item in inventory or in scene
                return this.getUseResponse(nounsAndVerbs);
            default:
                // do something
                return this.getDoResponse(nounsAndVerbs);
        }
    }
    getCommandsResponse(input) {
        const lowerCaseInput = input.toLocaleLowerCase();
        let commandsResult;
        this.Game.getCommands().some(command => {
            if (command.getTrigger().toLocaleLowerCase() === lowerCaseInput) {
                commandsResult = new ParseInputResult(command.activate(), command.getUseTypeWritingAnimation());
                return true;
            }
        });
        return commandsResult;
    }
    getGoToResponse(relevantWords) {
        const result = new ParseInputResult('');
        // get gateway actions
        const gatewayActions = this.Game.getActionsInScene().filter(val => {
            return val.getInteractionType() === InteractionType.GO_TO;
        });
        if (!gatewayActions || gatewayActions.length <= 0) {
            result.Result = this.Game.getGatewayTargetNotFoundResponse();
            return result;
        }
        const actionDistances = this.getActionDistancesFromNouns(relevantWords, gatewayActions);
        if (!actionDistances || actionDistances.length <= 0) {
            result.Result = this.Game.getGatewayTargetNotFoundResponse();
            return result;
        }
        const action = actionDistances[0].Action;
        result.Result = action.trigger();
        result.IsEndGameResult = action.getIsEndGameAction();
        return result;
    }
    getLookAtResponse(relevantWords) {
        const result = new ParseInputResult('');
        const itemDistances = this.getItemDistancesFromNouns(relevantWords, this.Game.getItemsInScene(), this.Game.getItemsInInventory());
        if (!itemDistances || itemDistances.length <= 0) {
            result.Result = this.Game.getItemNotFoundResponse();
            return result;
        }
        result.Result = itemDistances[0].Item.getDescription();
        return result;
    }
    getPickUpResponse(relevantWords) {
        const result = new ParseInputResult('');
        const itemDistances = this.getItemDistancesFromNouns(relevantWords, this.Game.getItemsInScene(), undefined);
        if (!itemDistances || itemDistances.length <= 0) {
            result.Result = this.Game.getItemNotFoundResponse();
            return result;
        }
        const item = itemDistances[0].Item;
        if (!item.getCanPickUp()) {
            result.Result = item.getCannotPickUpResponse();
            return result;
        }
        // one cannot pick up an item, that has no usages left anymore
        if (item.getUsagesLeft() <= 0) {
            result.Result = item.getNoUsagesLeftResponse();
            return result;
        }
        this.Game.addItemToInventory(item);
        this.Game.removeItemFromScene(item);
        result.Result = this.Game.getItemAddedToInventoryResponse();
        return result;
    }
    getUseResponse(relevantWords) {
        const result = new ParseInputResult('');
        const itemDistances = this.getItemDistancesFromNouns(relevantWords, this.Game.getItemsInScene(), this.Game.getItemsInInventory());
        if (!itemDistances || itemDistances.length <= 0) {
            result.Result = this.Game.getItemNotFoundResponse();
            return result;
        }
        const currentItem = itemDistances[0].Item;
        if (!currentItem.CanUseFunction(currentItem, this.Game.getStage().getCurrentScene(), this.Game.getInventory())) {
            result.Result = currentItem.getCannotUseItemResponse();
            return result;
        }
        result.Result = currentItem.use();
        // if the item was in the inventory and has no usages left anymore -> remove it from inventory
        if (currentItem.WasPickedUp && currentItem.getUsagesLeft() <= 0) {
            result.Result += `\r\n${currentItem.getNoUsagesLeftResponse()}`;
            this.Game.removeItemFromInventory(currentItem);
        }
        return result;
    }
    getDoResponse(relevantWords) {
        const result = new ParseInputResult('');
        const actions = this.Game.getActionsInScene().filter(val => {
            return val.getInteractionType() === InteractionType.DO;
        });
        if (!actions || actions.length <= 0) {
            result.Result = this.Game.getActionNotRecognizedResponse();
            return result;
        }
        const actionDistances = this.getActionDistancesFromNouns(relevantWords, actions);
        if (!actionDistances || actionDistances.length <= 0) {
            result.Result = this.Game.getActionNotRecognizedResponse();
            return result;
        }
        const action = actionDistances[0].Action;
        result.Result = action.trigger();
        result.IsEndGameResult = action.getIsEndGameAction();
        return result;
    }
    getNounsAndVerbsFromTokenizedInput(taggedTokens) {
        return taggedTokens.reduce((result, token) => {
            if (nounCategories.includes(token.tag) || verbCategories.includes(token.tag)) {
                result.push(token.token);
            }
            return result;
        }, []);
    }
    getItemDistancesFromNouns(relevantWords, sceneItems, inventoryItems) {
        const itemDistances = [];
        let items = [];
        if (sceneItems) {
            items = items.concat(sceneItems);
        }
        if (inventoryItems) {
            items = items.concat(inventoryItems);
        }
        items.map(val => {
            const taggedName = this.POSTagger.tag(this.Tokenizer.tokenize(val.Name)).taggedWords;
            taggedName.map(name => {
                relevantWords.map(input => {
                    const distance = natural.DamerauLevenshteinDistance(input, name.token, { transposition_cost: 0 });
                    if (distance <= 1) {
                        itemDistances.push(new ItemDistance(val, distance));
                    }
                });
            });
        });
        return itemDistances.sort(val => val.Distance);
    }
    getActionDistancesFromNouns(relevantWords, actions) {
        const actionDistances = [];
        actions.map(val => {
            const taggedTrigger = this.POSTagger.tag(this.Tokenizer.tokenize(val.getTrigger())).taggedWords;
            taggedTrigger.map(trigger => {
                relevantWords.map(input => {
                    const distance = natural.DamerauLevenshteinDistance(input, trigger.token, { transposition_cost: 0 });
                    if (distance <= 1) {
                        actionDistances.push(new ActionDistance(val, distance));
                    }
                });
            });
        });
        return actionDistances.sort(val => val.Distance);
    }
    getInteractionType(input) {
        const result = this.Classifier.classify(input);
        return this.getInteractionTypeFromClassificationResult(result);
    }
    getInteractionTypeFromClassificationResult(result) {
        switch (result) {
            case 'use':
                return InteractionType.USE;
            case 'look_at':
                return InteractionType.LOOK_AT;
            case 'go_to':
                return InteractionType.GO_TO;
            case 'pick_up':
                return InteractionType.PICK_UP;
            case 'do':
                return InteractionType.DO;
            default:
                return InteractionType.DO;
        }
    }
}
InputParserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function InputParserService_Factory() { return new InputParserService(); }, token: InputParserService, providedIn: "root" });
InputParserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
InputParserService.ctorParameters = () => [];
class ActionTag {
    constructor(action, tag) {
        this.Action = action;
        this.Tag = tag;
    }
}
class ActionDistance {
    constructor(action, distance) {
        this.Action = action;
        this.Distance = distance;
    }
}
class ItemDistance {
    constructor(item, distance) {
        this.Item = item;
        this.Distance = distance;
    }
}
class ItemTag {
    constructor(item, tag) {
        this.Item = item;
        this.Tag = tag;
    }
}
class TaggedToken {
}
//# sourceMappingURL=data:application/json;base64,