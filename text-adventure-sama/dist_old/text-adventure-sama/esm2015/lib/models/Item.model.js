/**
 * This class represents an Item in the game.
 */
export class InGameItem {
    constructor(id) {
        this.ID = id;
        this.CanPickUp = true;
    }
    CanUseFunction(item, currentScene, inventory) {
        return true;
    }
    use() {
        if (this.UsagesLeft >= 1) {
            this.UsagesLeft--;
            return this.ItemUsedResponse;
        }
        return this.NoUsagesLeftResponse;
    }
    resetUsages() {
        this.UsagesLeft = this.MaximumUsages;
    }
    setID(id) {
        this.ID = id;
    }
    getID() {
        return this.ID;
    }
    setName(name) {
        this.Name = name;
    }
    getName() {
        return this.Name;
    }
    setDescription(desc) {
        this.Description = desc;
    }
    getDescription() {
        return this.Description;
    }
    setMaximumUsages(usages) {
        this.MaximumUsages = usages;
    }
    getMaximumUsages() {
        return this.MaximumUsages;
    }
    setUsagesLeft(usages) {
        this.UsagesLeft = usages;
    }
    getUsagesLeft() {
        return this.UsagesLeft;
    }
    setItemUsedResponse(response) {
        this.ItemUsedResponse = response;
    }
    getItemUsedResponse() {
        return this.ItemUsedResponse;
    }
    setNoUsagesLeftResponse(response) {
        this.NoUsagesLeftResponse = response;
    }
    getNoUsagesLeftResponse() {
        return this.NoUsagesLeftResponse;
    }
    getCanPickUp() {
        return this.CanPickUp;
    }
    setCanPickUp(value) {
        this.CanPickUp = value;
    }
    setCannotPickUpResponse(response) {
        this.CannotPickUpResponse = response;
    }
    getCannotPickUpResponse() {
        return this.CannotPickUpResponse;
    }
    getInSceneDescription() {
        return this.InSceneDescription;
    }
    setInSceneDescription(descr) {
        this.InSceneDescription = descr;
    }
    setCanUseFunction(func) {
        this.CanUseFunction = func;
    }
    setCannotUseItemResponse(response) {
        this.CannotUseItemResponse = response;
    }
    getCannotUseItemResponse() {
        return this.CannotUseItemResponse;
    }
    getCanUseFunction() {
        return this.CanUseFunction;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJFOi9Eb2t1bWVudGUvUmVwb3NpdG9yaWVzL1RleHRBZHZlbnR1cmVTYW1hL3RleHQtYWR2ZW50dXJlLXNhbWEvcHJvamVjdHMvdGV4dC1hZHZlbnR1cmUtc2FtYS9zcmMvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL0l0ZW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7O0dBRUc7QUFDSCxNQUFNLE9BQU8sVUFBVTtJQXVCbkIsWUFBWSxFQUFXO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQVJNLGNBQWMsQ0FBQyxJQUFVLEVBQUUsWUFBbUIsRUFBRSxTQUFvQjtRQUN2RSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBUU0sR0FBRztRQUNOLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDckMsQ0FBQztJQUdNLFdBQVc7UUFDZCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDekMsQ0FBQztJQUVNLEtBQUssQ0FBQyxFQUFVO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFTSxLQUFLO1FBQ1IsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFTSxPQUFPLENBQUMsSUFBWTtRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRU0sT0FBTztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRU0sY0FBYyxDQUFDLElBQVk7UUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUVNLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxNQUFjO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7SUFFTSxnQkFBZ0I7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFFTSxhQUFhLENBQUMsTUFBYztRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBRU0sYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVNLG1CQUFtQixDQUFDLFFBQWdCO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7SUFDckMsQ0FBQztJQUVNLG1CQUFtQjtRQUN0QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRU0sdUJBQXVCLENBQUMsUUFBZ0I7UUFDM0MsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRU0sdUJBQXVCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ3JDLENBQUM7SUFFTSxZQUFZO1FBQ2YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFTSxZQUFZLENBQUMsS0FBYztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRU0sdUJBQXVCLENBQUMsUUFBZ0I7UUFDM0MsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRU0sdUJBQXVCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ3JDLENBQUM7SUFFTSxxQkFBcUI7UUFDeEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDbkMsQ0FBQztJQUVNLHFCQUFxQixDQUFDLEtBQWE7UUFDdEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRU0saUJBQWlCLENBQUMsSUFBd0U7UUFDN0YsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUVNLHdCQUF3QixDQUFDLFFBQWdCO1FBQzVDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxRQUFRLENBQUM7SUFDMUMsQ0FBQztJQUVNLHdCQUF3QjtRQUMzQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUN0QyxDQUFDO0lBRU0saUJBQWlCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnZlbnRvcnkgfSBmcm9tICcuL2ludmVudG9yeS5tb2RlbCc7XHJcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnLi9zY2VuZS5tb2RlbCc7XHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGFuIEl0ZW0gaW4gdGhlIGdhbWUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5HYW1lSXRlbSB7XHJcbiAgICBwcml2YXRlIElEOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIE5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgRGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIHByaXZhdGUgTWF4aW11bVVzYWdlczogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgVXNhZ2VzTGVmdDogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgSXRlbVVzZWRSZXNwb25zZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBOb1VzYWdlc0xlZnRSZXNwb25zZTogc3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgQ2FuUGlja1VwOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBDYW5ub3RQaWNrVXBSZXNwb25zZTogc3RyaW5nO1xyXG4gICAgcHVibGljIFdhc1BpY2tlZFVwOiBib29sZWFuO1xyXG5cclxuICAgIHByaXZhdGUgSW5TY2VuZURlc2NyaXB0aW9uOiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSBDYW5ub3RVc2VJdGVtUmVzcG9uc2U6IHN0cmluZztcclxuICAgIHB1YmxpYyBDYW5Vc2VGdW5jdGlvbihpdGVtOiB0aGlzLCBjdXJyZW50U2NlbmU6IFNjZW5lLCBpbnZlbnRvcnk6IEludmVudG9yeSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZD86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuSUQgPSBpZDtcclxuICAgICAgICB0aGlzLkNhblBpY2tVcCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVzZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLlVzYWdlc0xlZnQgPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLlVzYWdlc0xlZnQtLTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbVVzZWRSZXNwb25zZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTm9Vc2FnZXNMZWZ0UmVzcG9uc2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyByZXNldFVzYWdlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLlVzYWdlc0xlZnQgPSB0aGlzLk1heGltdW1Vc2FnZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldElEKGlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLklEID0gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldElEKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSUQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE5hbWUobmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLk5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldERlc2NyaXB0aW9uKGRlc2M6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuRGVzY3JpcHRpb24gPSBkZXNjO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREZXNjcmlwdGlvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkRlc2NyaXB0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRNYXhpbXVtVXNhZ2VzKHVzYWdlczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5NYXhpbXVtVXNhZ2VzID0gdXNhZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRNYXhpbXVtVXNhZ2VzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTWF4aW11bVVzYWdlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VXNhZ2VzTGVmdCh1c2FnZXM6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuVXNhZ2VzTGVmdCA9IHVzYWdlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VXNhZ2VzTGVmdCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlVzYWdlc0xlZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEl0ZW1Vc2VkUmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuSXRlbVVzZWRSZXNwb25zZSA9IHJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJdGVtVXNlZFJlc3BvbnNlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSXRlbVVzZWRSZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Tm9Vc2FnZXNMZWZ0UmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuTm9Vc2FnZXNMZWZ0UmVzcG9uc2UgPSByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Tm9Vc2FnZXNMZWZ0UmVzcG9uc2UoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Ob1VzYWdlc0xlZnRSZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q2FuUGlja1VwKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNhblBpY2tVcDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q2FuUGlja1VwKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5DYW5QaWNrVXAgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q2Fubm90UGlja1VwUmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuQ2Fubm90UGlja1VwUmVzcG9uc2UgPSByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q2Fubm90UGlja1VwUmVzcG9uc2UoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5DYW5ub3RQaWNrVXBSZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SW5TY2VuZURlc2NyaXB0aW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSW5TY2VuZURlc2NyaXB0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRJblNjZW5lRGVzY3JpcHRpb24oZGVzY3I6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuSW5TY2VuZURlc2NyaXB0aW9uID0gZGVzY3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldENhblVzZUZ1bmN0aW9uKGZ1bmM6IChpdGVtOiB0aGlzLCBjdXJyZW50U2NlbmU6IFNjZW5lLCBpbnZlbnRvcnk6IEludmVudG9yeSkgPT4gYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuQ2FuVXNlRnVuY3Rpb24gPSBmdW5jO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRDYW5ub3RVc2VJdGVtUmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuQ2Fubm90VXNlSXRlbVJlc3BvbnNlID0gcmVzcG9uc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENhbm5vdFVzZUl0ZW1SZXNwb25zZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNhbm5vdFVzZUl0ZW1SZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q2FuVXNlRnVuY3Rpb24oKTogKGl0ZW06IHRoaXMsIGN1cnJlbnRTY2VuZTogU2NlbmUsIGludmVudG9yeTogSW52ZW50b3J5KSA9PiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5DYW5Vc2VGdW5jdGlvbjtcclxuICAgIH1cclxuXHJcbn1cclxuIl19