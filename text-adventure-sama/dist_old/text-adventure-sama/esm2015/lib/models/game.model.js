import { Command } from './command.model';
import { Inventory } from './inventory.model';
import { Stage } from './stage.model';
/**
 * Represents the Game.
 */
export class Game {
    constructor() {
        this.Stage = new Stage();
        this.Inventory = new Inventory();
        this.Commands = [];
        this.initializeCommands();
    }
    initializeCommands() {
        const helpCommand = new Command();
        helpCommand.setTrigger('help');
        helpCommand.setDescription('A list of all global commands');
        helpCommand.setUseTypeWritingAnimation(false);
        helpCommand.setResponseFunction(() => {
            let commandsHelp = '';
            this.Commands.forEach(command => {
                commandsHelp += `${command.getTrigger()} - ${command.getDescription()} \r\n `;
            });
            return commandsHelp;
        });
        this.Commands.push(helpCommand);
        const inventoryCommand = new Command();
        inventoryCommand.setTrigger('inventory');
        inventoryCommand.setDescription('List all items in your inventory.');
        inventoryCommand.setUseTypeWritingAnimation(false);
        inventoryCommand.setResponseFunction(() => {
            if (this.Inventory.getItemCount() <= 0) {
                return this.InventoryEmptyResponse;
            }
            let inventoryContents = 'Items in Inventory: \r\n ';
            this.Inventory.getItems().forEach(item => {
                inventoryContents += `${item.getName()} \r\n `;
            });
            return inventoryContents;
        });
        this.Commands.push(inventoryCommand);
        const sceneCommand = new Command();
        sceneCommand.setTrigger('look around');
        sceneCommand.setDescription('Get a description of the scene you\'re in');
        sceneCommand.setUseTypeWritingAnimation(true);
        sceneCommand.setResponseFunction(() => {
            let description = this.Stage.getCurrentScene().getDescription();
            for (const item of this.Stage.getCurrentScene().getItems()) {
                description += ` ${item.getInSceneDescription()}`;
            }
            return description;
        });
        this.Commands.push(sceneCommand);
    }
    getStage() {
        return this.Stage;
    }
    getInventory() {
        return this.Inventory;
    }
    setInventory(inventory) {
        this.Inventory = inventory;
    }
    getScenesCount() {
        return this.Stage.getScenesCount();
    }
    getTitle() {
        return this.Title;
    }
    setTitle(title) {
        this.Title = title;
    }
    getIntroduction() {
        return this.Introduction;
    }
    setIntroduction(intro) {
        this.Introduction = intro;
    }
    getCommands() {
        return this.Commands;
    }
    setCommands(commands) {
        this.Commands = commands;
    }
    getItemNotFoundResponse() {
        return this.Stage.getCurrentScene().getItemNotFoundResponse();
    }
    getInvalidInputResponse() {
        return this.Stage.getCurrentScene().getInvalidInputResponse();
    }
    getActionNotRecognizedResponse() {
        return this.Stage.getCurrentScene().getActionNotRecognizedResponse();
    }
    getSceneDescription() {
        return this.Stage.getCurrentScene().getDescription();
    }
    getItemNotFoundInInventoryResponse() {
        return this.ItemNotFoundInInventoryResponse;
    }
    setItemNotFoundInInventoryResponse(response) {
        this.ItemNotFoundInInventoryResponse = response;
    }
    getActionsInScene() {
        return this.Stage.getCurrentScene().getActions();
    }
    getItemsInScene() {
        return this.Stage.getCurrentScene().getItems();
    }
    getItemsInInventory() {
        return this.Inventory.getItems();
    }
    removeItemFromScene(item) {
        this.Stage.getCurrentScene().removeItemFromScene(item);
    }
    addItemToInventory(item) {
        this.Inventory.addItem(item);
    }
    removeItemFromInventory(item) {
        this.Inventory.removeItemFromInventory(item.getID());
    }
    getItemAddedToInventoryResponse() {
        return this.ItemAddedToInventoryResponse;
    }
    setItemAddedToInventoryResponse(response) {
        this.ItemAddedToInventoryResponse = response;
    }
    getGatewayTargetNotFoundResponse() {
        return this.GatewayTargetNotFoundResponse;
    }
    setGatewayTargetNotFoundResponse(response) {
        this.GatewayTargetNotFoundResponse = response;
    }
    getInventoryEmptyResponse() {
        return this.InventoryEmptyResponse;
    }
    setInventoryEmptyResponse(response) {
        this.InventoryEmptyResponse = response;
    }
}
//# sourceMappingURL=data:application/json;base64,