import { ItemEventService } from '../services/item-event.service';
import * as _ from 'lodash';
export class Inventory {
    constructor() {
        this.Items = [];
        ItemEventService.getInstance().ItemYieldingActionEvent$.subscribe((event) => this.OnItemYield(event));
        ItemEventService.getInstance().ItemRemovingActionEvent$.subscribe((event) => this.OnItemRemove(event));
        ItemEventService.getInstance().ItemConsumingActionEvent$.subscribe((event) => this.OnItemConsume(event));
    }
    OnItemYield(event) {
        if (event.ResetItemUsagesToMaximum) {
            event.Item.resetUsages();
        }
        for (let i = 0; i < event.AmountOfItems; i++) {
            // create a deep copy of the item (we also need the functions to be copied)
            this.addItem(_.cloneDeep(event.Item));
        }
    }
    OnItemRemove(event) {
        this.removeItemFromInventory(event.Item.getID());
    }
    OnItemConsume(event) {
        const items = this.findItemsById(event.Item.getID());
        items[0].use();
    }
    findItemsById(id) {
        return this.Items.filter(o => o.getID() === id);
    }
    findItemsByName(name) {
        return this.Items.filter(o => o.getName() === name);
    }
    removeItemFromInventory(id) {
        this.Items = this.Items.filter(o => o.getID() !== id);
    }
    getItemCount() {
        return this.Items.length;
    }
    addItem(toAdd) {
        toAdd.WasPickedUp = true;
        this.Items.push(toAdd);
    }
    getItems() {
        return this.Items;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52ZW50b3J5Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IkU6L0Rva3VtZW50ZS9SZXBvc2l0b3JpZXMvVGV4dEFkdmVudHVyZVNhbWEvdGV4dC1hZHZlbnR1cmUtc2FtYS9wcm9qZWN0cy90ZXh0LWFkdmVudHVyZS1zYW1hL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvaW52ZW50b3J5Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSWxFLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTVCLE1BQU0sT0FBTyxTQUFTO0lBS2xCO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFaEIsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdEcsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkcsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUE4QjtRQUN0QyxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsRUFBRTtZQUNoQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzVCO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUMsMkVBQTJFO1lBQzNFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBOEI7UUFDdkMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQStCO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU0sYUFBYSxDQUFDLEVBQVU7UUFDM0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sZUFBZSxDQUFDLElBQVk7UUFDL0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU0sdUJBQXVCLENBQUMsRUFBVTtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTSxZQUFZO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQWlCO1FBQzVCLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluR2FtZUl0ZW0gfSBmcm9tICcuL0l0ZW0ubW9kZWwnO1xyXG5pbXBvcnQgeyBJdGVtRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaXRlbS1ldmVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSUl0ZW1Db25zdW1pbmdFdmVudExpc3RlbmVyLCBJdGVtQ29uc3VtaW5nQWN0aW9uRXZlbnQgfSBmcm9tICcuLi9tb2RlbHMvZXZlbnRzL2l0ZW0tY29uc3VtaW5nLWFjdGlvbi5ldmVudCc7XHJcbmltcG9ydCB7IElJdGVtUmVtb3ZpbmdFdmVudExpc3RlbmVyLCBJdGVtUmVtb3ZpbmdBY3Rpb25FdmVudCB9IGZyb20gJy4uL21vZGVscy9ldmVudHMvaXRlbS1yZW1vdmluZy1hY3Rpb24uZXZlbnQnO1xyXG5pbXBvcnQgeyBJSXRlbVlpZWxkaW5nRXZlbnRMaXN0ZW5lciwgSXRlbVlpZWxkaW5nQWN0aW9uRXZlbnQgfSBmcm9tICcuLi9tb2RlbHMvZXZlbnRzL2l0ZW0teWllbGRpbmctYWN0aW9uLmV2ZW50JztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEludmVudG9yeSBpbXBsZW1lbnRzIElJdGVtQ29uc3VtaW5nRXZlbnRMaXN0ZW5lcixcclxuICAgIElJdGVtUmVtb3ZpbmdFdmVudExpc3RlbmVyLFxyXG4gICAgSUl0ZW1ZaWVsZGluZ0V2ZW50TGlzdGVuZXIge1xyXG4gICAgcHJpdmF0ZSBJdGVtczogSW5HYW1lSXRlbVtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuSXRlbXMgPSBbXTtcclxuXHJcbiAgICAgICAgSXRlbUV2ZW50U2VydmljZS5nZXRJbnN0YW5jZSgpLkl0ZW1ZaWVsZGluZ0FjdGlvbkV2ZW50JC5zdWJzY3JpYmUoKGV2ZW50KSA9PiB0aGlzLk9uSXRlbVlpZWxkKGV2ZW50KSk7XHJcbiAgICAgICAgSXRlbUV2ZW50U2VydmljZS5nZXRJbnN0YW5jZSgpLkl0ZW1SZW1vdmluZ0FjdGlvbkV2ZW50JC5zdWJzY3JpYmUoKGV2ZW50KSA9PiB0aGlzLk9uSXRlbVJlbW92ZShldmVudCkpO1xyXG4gICAgICAgIEl0ZW1FdmVudFNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5JdGVtQ29uc3VtaW5nQWN0aW9uRXZlbnQkLnN1YnNjcmliZSgoZXZlbnQpID0+IHRoaXMuT25JdGVtQ29uc3VtZShldmVudCkpO1xyXG4gICAgfVxyXG5cclxuICAgIE9uSXRlbVlpZWxkKGV2ZW50OiBJdGVtWWllbGRpbmdBY3Rpb25FdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChldmVudC5SZXNldEl0ZW1Vc2FnZXNUb01heGltdW0pIHtcclxuICAgICAgICAgICAgZXZlbnQuSXRlbS5yZXNldFVzYWdlcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudC5BbW91bnRPZkl0ZW1zOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gY3JlYXRlIGEgZGVlcCBjb3B5IG9mIHRoZSBpdGVtICh3ZSBhbHNvIG5lZWQgdGhlIGZ1bmN0aW9ucyB0byBiZSBjb3BpZWQpXHJcbiAgICAgICAgICAgIHRoaXMuYWRkSXRlbShfLmNsb25lRGVlcChldmVudC5JdGVtKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIE9uSXRlbVJlbW92ZShldmVudDogSXRlbVJlbW92aW5nQWN0aW9uRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUl0ZW1Gcm9tSW52ZW50b3J5KGV2ZW50Lkl0ZW0uZ2V0SUQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgT25JdGVtQ29uc3VtZShldmVudDogSXRlbUNvbnN1bWluZ0FjdGlvbkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmZpbmRJdGVtc0J5SWQoZXZlbnQuSXRlbS5nZXRJRCgpKTtcclxuICAgICAgICBpdGVtc1swXS51c2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmluZEl0ZW1zQnlJZChpZDogbnVtYmVyKTogSW5HYW1lSXRlbVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5JdGVtcy5maWx0ZXIobyA9PiBvLmdldElEKCkgPT09IGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmluZEl0ZW1zQnlOYW1lKG5hbWU6IHN0cmluZyk6IEluR2FtZUl0ZW1bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuZmlsdGVyKG8gPT4gby5nZXROYW1lKCkgPT09IG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVJdGVtRnJvbUludmVudG9yeShpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5JdGVtcyA9IHRoaXMuSXRlbXMuZmlsdGVyKG8gPT4gby5nZXRJRCgpICE9PSBpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEl0ZW1Db3VudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkl0ZW1zLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkSXRlbSh0b0FkZDogSW5HYW1lSXRlbSk6IHZvaWQge1xyXG4gICAgICAgIHRvQWRkLldhc1BpY2tlZFVwID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLkl0ZW1zLnB1c2godG9BZGQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJdGVtcygpOiBJbkdhbWVJdGVtW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkl0ZW1zO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=