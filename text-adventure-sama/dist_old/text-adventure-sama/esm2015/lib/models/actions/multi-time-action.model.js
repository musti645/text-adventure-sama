import { InteractionType } from '../interactions/interaction-type.enum';
import { Action } from './action.model';
/**
 * A MultiTimeAction can be activated multiple times.
 * The class allows you to pass an array of responses,
 * which will be returned one by one until the maximum usage count is reached.
 */
export class MultiTimeAction extends Action {
    constructor() {
        super();
        this.setInteractionType(InteractionType.DO);
    }
    trigger() {
        if (this.UsagesLeft <= this.MaximumUsages) {
            const responseString = this.Responses[this.UsagesLeft];
            this.UsagesLeft++;
            return responseString;
        }
        return this.getResponse();
    }
    reset() {
        this.UsagesLeft = 0;
    }
    getUsagesLeft() {
        return this.UsagesLeft;
    }
    setUsagesLeft(usages) {
        this.UsagesLeft = usages;
    }
    getMaximumUsages() {
        return this.MaximumUsages;
    }
    setMaximumUsages(usages) {
        this.MaximumUsages = usages;
    }
    getResponses() {
        return this.Responses;
    }
    setResponses(responses) {
        this.Responses = responses;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktdGltZS1hY3Rpb24ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiRTovRG9rdW1lbnRlL1JlcG9zaXRvcmllcy9UZXh0QWR2ZW50dXJlU2FtYS90ZXh0LWFkdmVudHVyZS1zYW1hL3Byb2plY3RzL3RleHQtYWR2ZW50dXJlLXNhbWEvc3JjLyIsInNvdXJjZXMiOlsibGliL21vZGVscy9hY3Rpb25zL211bHRpLXRpbWUtYWN0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEM7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxlQUFnQixTQUFRLE1BQU07SUFNdkM7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE9BQU87UUFDVixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QyxNQUFNLGNBQWMsR0FBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsT0FBTyxjQUFjLENBQUM7U0FDekI7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSztRQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxhQUFhO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRU0sYUFBYSxDQUFDLE1BQWM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDN0IsQ0FBQztJQUVNLGdCQUFnQjtRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVNLGdCQUFnQixDQUFDLE1BQWM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUVNLFlBQVk7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVNLFlBQVksQ0FBQyxTQUFtQjtRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRlcmFjdGlvblR5cGUgfSBmcm9tICcuLi9pbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb24ubW9kZWwnO1xyXG5cclxuLyoqXHJcbiAqIEEgTXVsdGlUaW1lQWN0aW9uIGNhbiBiZSBhY3RpdmF0ZWQgbXVsdGlwbGUgdGltZXMuXHJcbiAqIFRoZSBjbGFzcyBhbGxvd3MgeW91IHRvIHBhc3MgYW4gYXJyYXkgb2YgcmVzcG9uc2VzLFxyXG4gKiB3aGljaCB3aWxsIGJlIHJldHVybmVkIG9uZSBieSBvbmUgdW50aWwgdGhlIG1heGltdW0gdXNhZ2UgY291bnQgaXMgcmVhY2hlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNdWx0aVRpbWVBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xyXG4gICAgcHJpdmF0ZSBVc2FnZXNMZWZ0OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIE1heGltdW1Vc2FnZXM6IG51bWJlcjtcclxuICAgIHByaXZhdGUgUmVzcG9uc2VzOiBzdHJpbmdbXTtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnNldEludGVyYWN0aW9uVHlwZShJbnRlcmFjdGlvblR5cGUuRE8pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0cmlnZ2VyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuVXNhZ2VzTGVmdCA8PSB0aGlzLk1heGltdW1Vc2FnZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VTdHJpbmcgPSAgdGhpcy5SZXNwb25zZXNbdGhpcy5Vc2FnZXNMZWZ0XTtcclxuICAgICAgICAgICAgdGhpcy5Vc2FnZXNMZWZ0Kys7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVN0cmluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlc3BvbnNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuVXNhZ2VzTGVmdCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFVzYWdlc0xlZnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Vc2FnZXNMZWZ0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRVc2FnZXNMZWZ0KHVzYWdlczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5Vc2FnZXNMZWZ0ID0gdXNhZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRNYXhpbXVtVXNhZ2VzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTWF4aW11bVVzYWdlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0TWF4aW11bVVzYWdlcyh1c2FnZXM6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuTWF4aW11bVVzYWdlcyA9IHVzYWdlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UmVzcG9uc2VzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5SZXNwb25zZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJlc3BvbnNlcyhyZXNwb25zZXM6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5SZXNwb25zZXMgPSByZXNwb25zZXM7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iXX0=