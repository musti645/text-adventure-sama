import { Scene } from '../models/scene.model';
import { ItemBuilder } from './item.builder';
import { BaseBuilder } from './base.builder';
import { BaseActionBuilder } from './action-builders/base-action.builder';
import { ItemYieldingAction } from '../models/actions/item-yielding-action.model';
import { BuilderError } from '../models/errors/builder.error';
import { GatewayActionBuilder } from './action-builders/gateway-action.builder';
import { ItemConsumingActionBuilder } from './action-builders/item-consuming-action.builder';
import { ItemRemovingActionBuilder } from './action-builders/item-removing-action.builder';
import { ItemYieldingActionBuilder } from './action-builders/item-yielding-action.builder';
import { MultiTimeActionBuilder } from './action-builders/multi-time-action.builder';
import { RandomResponseActionBuilder } from './action-builders/random-response-action.builder';
import { OneTimeActionBuilder } from './action-builders/one-time-action.builder';
export class SceneBuilder extends BaseBuilder {
    constructor(gameBuilder, game, sceneId = null) {
        super();
        this.GameBuilder = gameBuilder;
        this.Game = game;
        this.Scene = new Scene(sceneId);
    }
    addActionToBuilder(action) {
        this.Scene.getActions().push(action);
        if (action instanceof ItemYieldingAction) {
            this.GameBuilder.IdGeneratorService.addActionItemId(action);
        }
    }
    addAction(action) {
        return new BaseActionBuilder(this, action);
    }
    addGatewayAction() {
        return new GatewayActionBuilder(this);
    }
    addItemConsumingAction() {
        return new ItemConsumingActionBuilder(this);
    }
    addItemRemovingAction() {
        return new ItemRemovingActionBuilder(this);
    }
    addItemYieldingAction() {
        return new ItemYieldingActionBuilder(this);
    }
    addMultiTimeAction(id) {
        return new MultiTimeActionBuilder(this);
    }
    addOneTimeAction() {
        return new OneTimeActionBuilder(this);
    }
    addRandomResponseAction() {
        return new RandomResponseActionBuilder(this);
    }
    addItemToBuilder(item) {
        this.Scene.getItems().push(item);
        if (item.getID()) {
            this.GameBuilder.IdGeneratorService.addItemId(item);
        }
    }
    addItem(item) {
        return new ItemBuilder(this, item);
    }
    setName(name) {
        if (!name) {
            throw new EvalError('Name was not set.');
        }
        this.Scene.setName(name);
        return this;
    }
    setDescription(description) {
        if (!description) {
            throw new EvalError('Description was not set.');
        }
        this.Scene.setDescription(description);
        return this;
    }
    setActionNotRecognizedResponse(response) {
        if (!response) {
            throw new EvalError('ActionNotRecognizedResponse was not set.');
        }
        this.Scene.setActionNotRecognizedResponse(response);
        return this;
    }
    setItemNotFoundResponse(response) {
        if (!response) {
            throw new EvalError('ItemNotFoundResponse was not set.');
        }
        this.Scene.setItemNotFoundResponse(response);
        return this;
    }
    setInvalidInputResponse(response) {
        if (!response) {
            throw new EvalError('InvalidInputResponse was not set.');
        }
        this.Scene.setInvalidInputResponse(response);
        return this;
    }
    finish() {
        if (!this.Scene.getName()) {
            throw new BuilderError('Scene creation could not be finished. Name was not set.');
        }
        if (!this.Scene.getDescription()) {
            throw new BuilderError('Scene creation could not be finished. Description was not set.');
        }
        if (!this.Scene.getInvalidInputResponse()) {
            throw new BuilderError('Scene creation could not be finished. InvalidInputResponse was not set.');
        }
        if (!this.Scene.getItemNotFoundResponse()) {
            throw new BuilderError('Scene creation could not be finished. ItemNotFoundResponse was not set.');
        }
        if (!this.Scene.getActionNotRecognizedResponse()) {
            throw new BuilderError('Scene creation could not be finished. ActionNotRecognizedResponse was not set.');
        }
        // TODO: each scene has to have a gateway action to another scene or be the last action
        this.Game.getStage().addScene(this.Scene);
        return this.GameBuilder;
    }
}
//# sourceMappingURL=data:application/json;base64,