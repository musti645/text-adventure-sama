import { Command } from '../models/command.model';
import { BuilderError } from '../models/errors/builder.error';
import { BaseBuilder } from './base.builder';
export class CommandBuilder extends BaseBuilder {
    constructor(builder, command = new Command()) {
        super();
        this.Command = command;
        this.Builder = builder;
    }
    setTrigger(trigger) {
        if (!trigger) {
            throw new EvalError('Trigger was undefined.');
        }
        this.Command.setTrigger(trigger);
        return this;
    }
    setResponse(response) {
        if (!response) {
            throw new EvalError('Response was undefined.');
        }
        this.Command.setResponse(response);
        return this;
    }
    setResponseFunction(respFunc) {
        if (!respFunc) {
            throw new EvalError('ResponseFunction was undefined.');
        }
        this.Command.setResponseFunction(respFunc);
        return this;
    }
    setUseTypeWritingAnimation(use) {
        if (use === undefined || use === null) {
            throw new EvalError('UseTypeWritingAnimation was undefined.');
        }
        this.Command.setUseTypeWritingAnimation(use);
        return this;
    }
    setDescription(descr) {
        if (!descr) {
            throw new EvalError('Description was undefined');
        }
        this.Command.setDescription(descr);
        return this;
    }
    finish() {
        if (!this.Command.getTrigger()) {
            throw new BuilderError('Could not create Command. Trigger was not set.');
        }
        if (!this.Command.getDescription()) {
            throw new BuilderError('Could not create Command. Description was not set.');
        }
        if (!this.Command.getResponse() && !this.Command.getResponseFunction()) {
            throw new BuilderError('Could not create Command. Response and ResponseFunction were not set. One of both is required.');
        }
        if (this.Command.getUseTypeWritingAnimation() === undefined || this.Command.getUseTypeWritingAnimation() === null) {
            this.Command.setUseTypeWritingAnimation(true);
        }
        this.Builder.addCommandToBuilder(this.Command);
        return this.Builder;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IkU6L0Rva3VtZW50ZS9SZXBvc2l0b3JpZXMvVGV4dEFkdmVudHVyZVNhbWEvdGV4dC1hZHZlbnR1cmUtc2FtYS9wcm9qZWN0cy90ZXh0LWFkdmVudHVyZS1zYW1hL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9idWlsZGVyL2NvbW1hbmQuYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QyxNQUFNLE9BQU8sY0FBbUUsU0FBUSxXQUFXO0lBSS9GLFlBQVksT0FBMEIsRUFBRSxVQUFtQixJQUFJLE9BQU8sRUFBRTtRQUNwRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFTSxVQUFVLENBQUMsT0FBZTtRQUM3QixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxRQUFnQjtRQUMvQixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLG1CQUFtQixDQUFDLFFBQXNCO1FBQzdDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxNQUFNLElBQUksU0FBUyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSwwQkFBMEIsQ0FBQyxHQUFZO1FBQzFDLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ25DLE1BQU0sSUFBSSxTQUFTLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUNqRTtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLGNBQWMsQ0FBQyxLQUFhO1FBQy9CLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sTUFBTTtRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQzVCLE1BQU0sSUFBSSxZQUFZLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUM1RTtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxZQUFZLENBQUMsb0RBQW9ELENBQUMsQ0FBQztTQUNoRjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO1lBQ3BFLE1BQU0sSUFBSSxZQUFZLENBQUMsZ0dBQWdHLENBQUMsQ0FBQztTQUM1SDtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQy9HLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakQ7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJy4uL21vZGVscy9jb21tYW5kLm1vZGVsJztcclxuaW1wb3J0IHsgQnVpbGRlckVycm9yIH0gZnJvbSAnLi4vbW9kZWxzL2Vycm9ycy9idWlsZGVyLmVycm9yJztcclxuaW1wb3J0IHsgQmFzZUJ1aWxkZXIgfSBmcm9tICcuL2Jhc2UuYnVpbGRlcic7XHJcbmltcG9ydCB7IENvbW1hbmRDb250YWluaW5nQnVpbGRlciB9IGZyb20gJy4vaW50ZXJmYWNlcy9jb21tYW5kLWNvbnRhaW5pbmcuYnVpbGRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJ1aWxkZXI8UmV0dXJuQnVpbGRlclR5cGUgZXh0ZW5kcyBDb21tYW5kQ29udGFpbmluZ0J1aWxkZXI+IGV4dGVuZHMgQmFzZUJ1aWxkZXIge1xyXG4gICAgcHJvdGVjdGVkIENvbW1hbmQ6IENvbW1hbmQ7XHJcbiAgICBwcml2YXRlIEJ1aWxkZXI6IFJldHVybkJ1aWxkZXJUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGJ1aWxkZXI6IFJldHVybkJ1aWxkZXJUeXBlLCBjb21tYW5kOiBDb21tYW5kID0gbmV3IENvbW1hbmQoKSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5Db21tYW5kID0gY29tbWFuZDtcclxuICAgICAgICB0aGlzLkJ1aWxkZXIgPSBidWlsZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRUcmlnZ2VyKHRyaWdnZXI6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgIGlmICghdHJpZ2dlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZhbEVycm9yKCdUcmlnZ2VyIHdhcyB1bmRlZmluZWQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkNvbW1hbmQuc2V0VHJpZ2dlcih0cmlnZ2VyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0UmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV2YWxFcnJvcignUmVzcG9uc2Ugd2FzIHVuZGVmaW5lZC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuQ29tbWFuZC5zZXRSZXNwb25zZShyZXNwb25zZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJlc3BvbnNlRnVuY3Rpb24ocmVzcEZ1bmM6ICgpID0+IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgIGlmICghcmVzcEZ1bmMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV2YWxFcnJvcignUmVzcG9uc2VGdW5jdGlvbiB3YXMgdW5kZWZpbmVkLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5Db21tYW5kLnNldFJlc3BvbnNlRnVuY3Rpb24ocmVzcEZ1bmMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRVc2VUeXBlV3JpdGluZ0FuaW1hdGlvbih1c2U6IGJvb2xlYW4pOiB0aGlzIHtcclxuICAgICAgICBpZiAodXNlID09PSB1bmRlZmluZWQgfHwgdXNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ1VzZVR5cGVXcml0aW5nQW5pbWF0aW9uIHdhcyB1bmRlZmluZWQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkNvbW1hbmQuc2V0VXNlVHlwZVdyaXRpbmdBbmltYXRpb24odXNlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RGVzY3JpcHRpb24oZGVzY3I6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgIGlmICghZGVzY3IpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV2YWxFcnJvcignRGVzY3JpcHRpb24gd2FzIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5Db21tYW5kLnNldERlc2NyaXB0aW9uKGRlc2NyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmluaXNoKCk6IFJldHVybkJ1aWxkZXJUeXBlIHtcclxuICAgICAgICBpZiAoIXRoaXMuQ29tbWFuZC5nZXRUcmlnZ2VyKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1aWxkZXJFcnJvcignQ291bGQgbm90IGNyZWF0ZSBDb21tYW5kLiBUcmlnZ2VyIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLkNvbW1hbmQuZ2V0RGVzY3JpcHRpb24oKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVpbGRlckVycm9yKCdDb3VsZCBub3QgY3JlYXRlIENvbW1hbmQuIERlc2NyaXB0aW9uIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLkNvbW1hbmQuZ2V0UmVzcG9uc2UoKSAmJiAhdGhpcy5Db21tYW5kLmdldFJlc3BvbnNlRnVuY3Rpb24oKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVpbGRlckVycm9yKCdDb3VsZCBub3QgY3JlYXRlIENvbW1hbmQuIFJlc3BvbnNlIGFuZCBSZXNwb25zZUZ1bmN0aW9uIHdlcmUgbm90IHNldC4gT25lIG9mIGJvdGggaXMgcmVxdWlyZWQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5Db21tYW5kLmdldFVzZVR5cGVXcml0aW5nQW5pbWF0aW9uKCkgPT09IHVuZGVmaW5lZCB8fCB0aGlzLkNvbW1hbmQuZ2V0VXNlVHlwZVdyaXRpbmdBbmltYXRpb24oKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLkNvbW1hbmQuc2V0VXNlVHlwZVdyaXRpbmdBbmltYXRpb24odHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkJ1aWxkZXIuYWRkQ29tbWFuZFRvQnVpbGRlcih0aGlzLkNvbW1hbmQpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5CdWlsZGVyO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=