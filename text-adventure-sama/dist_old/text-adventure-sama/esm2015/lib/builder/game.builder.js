import { Game } from '../models/game.model';
import { InventoryBuilder } from './inventory.builder';
import { BuilderError } from '../models/errors/builder.error';
import { SceneBuilder } from './scene.builder';
import { BaseBuilder } from './base.builder';
import { IDGeneratorService } from '../services/id-generator.service';
import { CommandBuilder } from './command.builder';
/**
 * Use this class to chain the game building process.
 * Once your Game is build completely, call the 'build' method.
 */
export class GameBuilder extends BaseBuilder {
    constructor() {
        super();
        this.Game = new Game();
        this.IdGeneratorService = new IDGeneratorService();
    }
    addInventory() {
        return new InventoryBuilder(this, this.Game);
    }
    addScene(id) {
        return new SceneBuilder(this, this.Game, id);
    }
    addCommand() {
        return new CommandBuilder(this);
    }
    addCommandToBuilder(command) {
        if (!command) {
            throw new BuilderError('Command was undefined');
        }
        this.Game.getCommands().push(command);
        return this;
    }
    removeExistingCommands() {
        this.Game.setCommands([]);
        return this;
    }
    setTitle(title) {
        if (!title) {
            throw new EvalError('Title was undefined.');
        }
        this.Game.setTitle(title);
        return this;
    }
    setIntroduction(intro) {
        if (!intro) {
            throw new EvalError('Introduction was undefined.');
        }
        this.Game.setIntroduction(intro);
        return this;
    }
    setItemNotFoundInInventoryResponse(response) {
        if (!response) {
            throw new EvalError('ItemNotFoundInInventoryResponse was undefined.');
        }
        this.Game.setItemNotFoundInInventoryResponse(response);
        return this;
    }
    setItemAddedToInventoryResponse(response) {
        if (!response) {
            throw new EvalError('ItemAddedToInventoryResponse was undefined.');
        }
        this.Game.setItemAddedToInventoryResponse(response);
        return this;
    }
    setGatewayTargetNotFoundResponse(response) {
        if (!response) {
            throw new EvalError('GatewayTargetNotFoundResponse was undefined.');
        }
        this.Game.setGatewayTargetNotFoundResponse(response);
        return this;
    }
    setInventoryEmptyResponse(response) {
        if (!response) {
            throw new EvalError('InventoryEmptyResponse was undefined.');
        }
        this.Game.setInventoryEmptyResponse(response);
        return this;
    }
    finish() {
        if (!this.Game.getTitle()) {
            throw new BuilderError('Game creation could not be finished. Title was not set.');
        }
        if (!this.Game.getIntroduction()) {
            throw new BuilderError('Game creation could not be finished. Introduction was not set.');
        }
        if (!this.Game.getItemAddedToInventoryResponse()) {
            throw new BuilderError('Game creation could not be finished. ItemAddedToInventoryResponse was not set.');
        }
        if (!this.Game.getItemNotFoundInInventoryResponse()) {
            throw new BuilderError('Game creation could not be finished. ItemNotFoundInInventoryResponse was not set.');
        }
        if (!this.Game.getGatewayTargetNotFoundResponse()) {
            throw new BuilderError('Game creation could not be finished. GatewayTargetNotFoundResponse was not set.');
        }
        if (!this.Game.getInventoryEmptyResponse()) {
            throw new BuilderError('Game creation could not be finished. InventoryEmptyResponse was not set.');
        }
        if (this.Game.getScenesCount() <= 0) {
            throw new BuilderError('Game creation could not be finished. No Scenes were found.');
        }
        this.generateUnassignedIds();
        return this.Game;
    }
    generateUnassignedIds() {
        this.IdGeneratorService.generateIDs(this.Game);
    }
}
//# sourceMappingURL=data:application/json;base64,