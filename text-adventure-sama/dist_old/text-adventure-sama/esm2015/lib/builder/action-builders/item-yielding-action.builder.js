import { BaseActionBuilder } from './base-action.builder';
import { ItemBuilder } from '../item.builder';
import { ItemYieldingAction } from '../../models/actions/item-yielding-action.model';
import { BuilderError } from '../../models/errors/builder.error';
import { InteractionType } from '../../models/interactions/interaction-type.enum';
export class ItemYieldingActionBuilder extends BaseActionBuilder {
    constructor(builder) {
        super(builder, new ItemYieldingAction());
    }
    addItemToBuilder(item) {
        if (!item) {
            throw new BuilderError('Item could not be added to the Action. Item was not set.');
        }
        this.Action.setItem(item);
    }
    addItem(item) {
        return new ItemBuilder(this, item);
    }
    setWasTrigered(wasTriggered) {
        if (wasTriggered === undefined || wasTriggered === null) {
            throw new EvalError('WasTriggered was not set.');
        }
        this.Action.setWasTriggered(wasTriggered);
        return this;
    }
    setResponseAfterUse(response) {
        if (!response || response === '') {
            throw new EvalError('No Response found.');
        }
        this.Action.setResponseAfterUse(response);
        return this;
    }
    setAmountOfItems(amount) {
        if (amount === undefined || amount <= 0) {
            throw new EvalError('AmountOfItems Value has to be greater than 0.');
        }
        this.Action.setAmountOfItems(amount);
        return this;
    }
    setInteractionType(type) {
        if (!type || !Object.values(InteractionType).includes(type)) {
            throw new EvalError('InteractionType not set.');
        }
        this.Action.setInteractionType(type);
        return this;
    }
    setResetItemUsagesToMaximum(reset) {
        if (reset === undefined || reset === null) {
            throw new EvalError('WasTriggered was not set.');
        }
        this.Action.setResetItemUsagesToMaximum(reset);
        return this;
    }
    onFinish() {
        if (!this.Action.getItem()) {
            throw new BuilderError('Action creation could not be finished. Item was not set.');
        }
        if (!this.Action.getResponseAfterUse()) {
            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS15aWVsZGluZy1hY3Rpb24uYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiJFOi9Eb2t1bWVudGUvUmVwb3NpdG9yaWVzL1RleHRBZHZlbnR1cmVTYW1hL3RleHQtYWR2ZW50dXJlLXNhbWEvcHJvamVjdHMvdGV4dC1hZHZlbnR1cmUtc2FtYS9zcmMvIiwic291cmNlcyI6WyJsaWIvYnVpbGRlci9hY3Rpb24tYnVpbGRlcnMvaXRlbS15aWVsZGluZy1hY3Rpb24uYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFFckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUdsRixNQUFNLE9BQU8seUJBQ1QsU0FBUSxpQkFBd0Q7SUFFaEUsWUFBWSxPQUEwQjtRQUNsQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFnQjtRQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxJQUFJLFlBQVksQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFpQjtRQUM1QixPQUFPLElBQUksV0FBVyxDQUErQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVNLGNBQWMsQ0FBQyxZQUFxQjtRQUN2QyxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtZQUNyRCxNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sbUJBQW1CLENBQUMsUUFBZ0I7UUFDdkMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLEtBQUssRUFBRSxFQUFFO1lBQzlCLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLGdCQUFnQixDQUFDLE1BQWM7UUFDbEMsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDckMsTUFBTSxJQUFJLFNBQVMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sa0JBQWtCLENBQUMsSUFBcUI7UUFDM0MsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pELE1BQU0sSUFBSSxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUNuRDtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLDJCQUEyQixDQUFDLEtBQWM7UUFDN0MsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDdkMsTUFBTSxJQUFJLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxZQUFZLENBQUMsMERBQTBELENBQUMsQ0FBQztTQUN0RjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLEVBQUU7WUFDcEMsTUFBTSxJQUFJLFlBQVksQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ2xHO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUFjdGlvbkJ1aWxkZXIgfSBmcm9tICcuL2Jhc2UtYWN0aW9uLmJ1aWxkZXInO1xyXG5pbXBvcnQgeyBBY3Rpb25Db250YWluaW5nQnVpbGRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvYWN0aW9uLWNvbnRhaW5pbmcuYnVpbGRlcic7XHJcbmltcG9ydCB7IEl0ZW1Db250YWluaW5nQnVpbGRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvaXRlbS1jb250YWluaW5nLmJ1aWxkZXInO1xyXG5pbXBvcnQgeyBJdGVtQnVpbGRlciB9IGZyb20gJy4uL2l0ZW0uYnVpbGRlcic7XHJcbmltcG9ydCB7IEl0ZW1ZaWVsZGluZ0FjdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9hY3Rpb25zL2l0ZW0teWllbGRpbmctYWN0aW9uLm1vZGVsJztcclxuaW1wb3J0IHsgSW5HYW1lSXRlbSB9IGZyb20gJy4uLy4uL21vZGVscy9JdGVtLm1vZGVsJztcclxuaW1wb3J0IHsgQnVpbGRlckVycm9yIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2Vycm9ycy9idWlsZGVyLmVycm9yJztcclxuaW1wb3J0IHsgSW50ZXJhY3Rpb25UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ludGVyYWN0aW9ucy9pbnRlcmFjdGlvbi10eXBlLmVudW0nO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBJdGVtWWllbGRpbmdBY3Rpb25CdWlsZGVyPFJldHVybkJ1aWxkZXJUeXBlIGV4dGVuZHMgQWN0aW9uQ29udGFpbmluZ0J1aWxkZXI+XHJcbiAgICBleHRlbmRzIEJhc2VBY3Rpb25CdWlsZGVyPEl0ZW1ZaWVsZGluZ0FjdGlvbiwgUmV0dXJuQnVpbGRlclR5cGU+IGltcGxlbWVudHMgSXRlbUNvbnRhaW5pbmdCdWlsZGVyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihidWlsZGVyOiBSZXR1cm5CdWlsZGVyVHlwZSkge1xyXG4gICAgICAgIHN1cGVyKGJ1aWxkZXIsIG5ldyBJdGVtWWllbGRpbmdBY3Rpb24oKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEl0ZW1Ub0J1aWxkZXIoaXRlbTogSW5HYW1lSXRlbSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghaXRlbSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVpbGRlckVycm9yKCdJdGVtIGNvdWxkIG5vdCBiZSBhZGRlZCB0byB0aGUgQWN0aW9uLiBJdGVtIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLkFjdGlvbi5zZXRJdGVtKGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRJdGVtKGl0ZW0/OiBJbkdhbWVJdGVtKTogSXRlbUJ1aWxkZXI8SXRlbVlpZWxkaW5nQWN0aW9uQnVpbGRlcjxSZXR1cm5CdWlsZGVyVHlwZT4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IEl0ZW1CdWlsZGVyPEl0ZW1ZaWVsZGluZ0FjdGlvbkJ1aWxkZXI8UmV0dXJuQnVpbGRlclR5cGU+Pih0aGlzLCBpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0V2FzVHJpZ2VyZWQod2FzVHJpZ2dlcmVkOiBib29sZWFuKTogdGhpcyB7XHJcbiAgICAgICAgaWYgKHdhc1RyaWdnZXJlZCA9PT0gdW5kZWZpbmVkIHx8IHdhc1RyaWdnZXJlZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZhbEVycm9yKCdXYXNUcmlnZ2VyZWQgd2FzIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldFdhc1RyaWdnZXJlZCh3YXNUcmlnZ2VyZWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRSZXNwb25zZUFmdGVyVXNlKHJlc3BvbnNlOiBzdHJpbmcpOiB0aGlzIHtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlIHx8IHJlc3BvbnNlID09PSAnJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZhbEVycm9yKCdObyBSZXNwb25zZSBmb3VuZC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldFJlc3BvbnNlQWZ0ZXJVc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRBbW91bnRPZkl0ZW1zKGFtb3VudDogbnVtYmVyKTogdGhpcyB7XHJcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdW5kZWZpbmVkIHx8IGFtb3VudCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ0Ftb3VudE9mSXRlbXMgVmFsdWUgaGFzIHRvIGJlIGdyZWF0ZXIgdGhhbiAwLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5BY3Rpb24uc2V0QW1vdW50T2ZJdGVtcyhhbW91bnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRJbnRlcmFjdGlvblR5cGUodHlwZTogSW50ZXJhY3Rpb25UeXBlKTogdGhpcyB7XHJcbiAgICAgICAgaWYgKCF0eXBlIHx8ICFPYmplY3QudmFsdWVzKEludGVyYWN0aW9uVHlwZSkuaW5jbHVkZXModHlwZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV2YWxFcnJvcignSW50ZXJhY3Rpb25UeXBlIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkFjdGlvbi5zZXRJbnRlcmFjdGlvblR5cGUodHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJlc2V0SXRlbVVzYWdlc1RvTWF4aW11bShyZXNldDogYm9vbGVhbik6IHRoaXMge1xyXG4gICAgICAgIGlmIChyZXNldCA9PT0gdW5kZWZpbmVkIHx8IHJlc2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ1dhc1RyaWdnZXJlZCB3YXMgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5BY3Rpb24uc2V0UmVzZXRJdGVtVXNhZ2VzVG9NYXhpbXVtKHJlc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25GaW5pc2goKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLkFjdGlvbi5nZXRJdGVtKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1aWxkZXJFcnJvcignQWN0aW9uIGNyZWF0aW9uIGNvdWxkIG5vdCBiZSBmaW5pc2hlZC4gSXRlbSB3YXMgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5BY3Rpb24uZ2V0UmVzcG9uc2VBZnRlclVzZSgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWlsZGVyRXJyb3IoJ0FjdGlvbiBjcmVhdGlvbiBjb3VsZCBub3QgYmUgZmluaXNoZWQuIFJlc3BvbnNlQWZ0ZXJVc2Ugd2FzIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==