import { BaseActionBuilder } from './base-action.builder';
import { OneTimeAction } from '../../models/actions/one-time-action.model';
import { InteractionType } from '../../models/interactions/interaction-type.enum';
import { BuilderError } from '../../models/errors/builder.error';
export class OneTimeActionBuilder extends BaseActionBuilder {
    constructor(builder) {
        super(builder, new OneTimeAction());
    }
    setWasTrigered(wasTriggered) {
        if (wasTriggered === undefined || wasTriggered === null) {
            throw new EvalError('WasTriggered was not set.');
        }
        this.Action.setWasTriggered(wasTriggered);
        return this;
    }
    setResponseAfterUse(response) {
        if (!response || response === '') {
            throw new EvalError('No Response found.');
        }
        this.Action.setResponseAfterUse(response);
        return this;
    }
    setInteractionType(type) {
        if (!type || !Object.values(InteractionType).includes(type)) {
            throw new EvalError('InteractionType not set.');
        }
        this.Action.setInteractionType(type);
        return this;
    }
    onFinish() {
        if (!this.Action.getResponseAfterUse()) {
            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');
        }
        if (!this.Action.getInteractionType()) {
            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25lLXRpbWUtYWN0aW9uLmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiRTovRG9rdW1lbnRlL1JlcG9zaXRvcmllcy9UZXh0QWR2ZW50dXJlU2FtYS90ZXh0LWFkdmVudHVyZS1zYW1hL3Byb2plY3RzL3RleHQtYWR2ZW50dXJlLXNhbWEvc3JjLyIsInNvdXJjZXMiOlsibGliL2J1aWxkZXIvYWN0aW9uLWJ1aWxkZXJzL29uZS10aW1lLWFjdGlvbi5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBR2pFLE1BQU0sT0FBTyxvQkFDVCxTQUFRLGlCQUFtRDtJQUUzRCxZQUFZLE9BQTBCO1FBQ2xDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxjQUFjLENBQUMsWUFBcUI7UUFDdkMsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7WUFDckQsTUFBTSxJQUFJLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLG1CQUFtQixDQUFDLFFBQWdCO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxLQUFLLEVBQUUsRUFBRTtZQUM5QixNQUFNLElBQUksU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDN0M7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxJQUFxQjtRQUMzQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekQsTUFBTSxJQUFJLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLEVBQUU7WUFDcEMsTUFBTSxJQUFJLFlBQVksQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ2xHO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsRUFBRTtZQUNuQyxNQUFNLElBQUksWUFBWSxDQUFDLHFFQUFxRSxDQUFDLENBQUM7U0FDakc7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQWN0aW9uQnVpbGRlciB9IGZyb20gJy4vYmFzZS1hY3Rpb24uYnVpbGRlcic7XHJcbmltcG9ydCB7IEFjdGlvbkNvbnRhaW5pbmdCdWlsZGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9hY3Rpb24tY29udGFpbmluZy5idWlsZGVyJztcclxuaW1wb3J0IHsgT25lVGltZUFjdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9hY3Rpb25zL29uZS10aW1lLWFjdGlvbi5tb2RlbCc7XHJcbmltcG9ydCB7IEludGVyYWN0aW9uVHlwZSB9IGZyb20gJy4uLy4uL21vZGVscy9pbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgQnVpbGRlckVycm9yIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2Vycm9ycy9idWlsZGVyLmVycm9yJztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgT25lVGltZUFjdGlvbkJ1aWxkZXI8UmV0dXJuQnVpbGRlclR5cGUgZXh0ZW5kcyBBY3Rpb25Db250YWluaW5nQnVpbGRlcj5cclxuICAgIGV4dGVuZHMgQmFzZUFjdGlvbkJ1aWxkZXI8T25lVGltZUFjdGlvbiwgUmV0dXJuQnVpbGRlclR5cGU+IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihidWlsZGVyOiBSZXR1cm5CdWlsZGVyVHlwZSkge1xyXG4gICAgICAgIHN1cGVyKGJ1aWxkZXIsIG5ldyBPbmVUaW1lQWN0aW9uKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRXYXNUcmlnZXJlZCh3YXNUcmlnZ2VyZWQ6IGJvb2xlYW4pOiB0aGlzIHtcclxuICAgICAgICBpZiAod2FzVHJpZ2dlcmVkID09PSB1bmRlZmluZWQgfHwgd2FzVHJpZ2dlcmVkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ1dhc1RyaWdnZXJlZCB3YXMgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5BY3Rpb24uc2V0V2FzVHJpZ2dlcmVkKHdhc1RyaWdnZXJlZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJlc3BvbnNlQWZ0ZXJVc2UocmVzcG9uc2U6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2UgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ05vIFJlc3BvbnNlIGZvdW5kLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5BY3Rpb24uc2V0UmVzcG9uc2VBZnRlclVzZShyZXNwb25zZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEludGVyYWN0aW9uVHlwZSh0eXBlOiBJbnRlcmFjdGlvblR5cGUpOiB0aGlzIHtcclxuICAgICAgICBpZiAoIXR5cGUgfHwgIU9iamVjdC52YWx1ZXMoSW50ZXJhY3Rpb25UeXBlKS5pbmNsdWRlcyh0eXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZhbEVycm9yKCdJbnRlcmFjdGlvblR5cGUgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldEludGVyYWN0aW9uVHlwZSh0eXBlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25GaW5pc2goKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLkFjdGlvbi5nZXRSZXNwb25zZUFmdGVyVXNlKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1aWxkZXJFcnJvcignQWN0aW9uIGNyZWF0aW9uIGNvdWxkIG5vdCBiZSBmaW5pc2hlZC4gUmVzcG9uc2VBZnRlclVzZSB3YXMgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5BY3Rpb24uZ2V0SW50ZXJhY3Rpb25UeXBlKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1aWxkZXJFcnJvcignQWN0aW9uIGNyZWF0aW9uIGNvdWxkIG5vdCBiZSBmaW5pc2hlZC4gSW50ZXJhY3Rpb25UeXBlIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIl19