import { BaseActionBuilder } from './base-action.builder';
import { ItemBuilder } from '../item.builder';
import { ItemConsumingAction } from '../../models/actions/item-consuming-action.model';
import { InteractionType } from '../../models/interactions/interaction-type.enum';
import { BuilderError } from '../../models/errors/builder.error';
export class ItemConsumingActionBuilder extends BaseActionBuilder {
    constructor(builder) {
        super(builder, new ItemConsumingAction());
    }
    setWasTrigered(wasTriggered) {
        if (wasTriggered === undefined || wasTriggered === null) {
            throw new EvalError('WasTriggered was not set.');
        }
        this.Action.setWasTriggered(wasTriggered);
        return this;
    }
    setResponseAfterUse(response) {
        if (!response || response === '') {
            throw new EvalError('No Response found.');
        }
        this.Action.setResponseAfterUse(response);
        return this;
    }
    setInteractionType(type) {
        if (!type || !Object.values(InteractionType).includes(type)) {
            throw new EvalError('InteractionType not set.');
        }
        this.Action.setInteractionType(type);
        return this;
    }
    addItemToBuilder(item) {
        if (!item) {
            throw new BuilderError('Item could not be added to the Action. Item was not set.');
        }
        this.Action.setItem(item);
    }
    addItem(item) {
        return new ItemBuilder(this, item);
    }
    onFinish() {
        if (!this.Action.getItem()) {
            throw new BuilderError('Action creation could not be finished. Item was not set.');
        }
        if (!this.Action.getResponseAfterUse()) {
            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1jb25zdW1pbmctYWN0aW9uLmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiRTovRG9rdW1lbnRlL1JlcG9zaXRvcmllcy9UZXh0QWR2ZW50dXJlU2FtYS90ZXh0LWFkdmVudHVyZS1zYW1hL3Byb2plY3RzL3RleHQtYWR2ZW50dXJlLXNhbWEvc3JjLyIsInNvdXJjZXMiOlsibGliL2J1aWxkZXIvYWN0aW9uLWJ1aWxkZXJzL2l0ZW0tY29uc3VtaW5nLWFjdGlvbi5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN2RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saURBQWlELENBQUM7QUFFbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWpFLE1BQU0sT0FBTywwQkFDVCxTQUFRLGlCQUF5RDtJQUVqRSxZQUFZLE9BQTBCO1FBQ2xDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUdNLGNBQWMsQ0FBQyxZQUFxQjtRQUN2QyxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtZQUNyRCxNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sbUJBQW1CLENBQUMsUUFBZ0I7UUFDdkMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLEtBQUssRUFBRSxFQUFFO1lBQzlCLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdNLGtCQUFrQixDQUFDLElBQXFCO1FBQzNDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6RCxNQUFNLElBQUksU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFnQjtRQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxJQUFJLFlBQVksQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFpQjtRQUM1QixPQUFPLElBQUksV0FBVyxDQUFnRCxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVNLFFBQVE7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUN4QixNQUFNLElBQUksWUFBWSxDQUFDLDBEQUEwRCxDQUFDLENBQUM7U0FDdEY7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxZQUFZLENBQUMsc0VBQXNFLENBQUMsQ0FBQztTQUNsRztJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VBY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi9iYXNlLWFjdGlvbi5idWlsZGVyJztcclxuaW1wb3J0IHsgQWN0aW9uQ29udGFpbmluZ0J1aWxkZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2FjdGlvbi1jb250YWluaW5nLmJ1aWxkZXInO1xyXG5pbXBvcnQgeyBJdGVtQ29udGFpbmluZ0J1aWxkZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2l0ZW0tY29udGFpbmluZy5idWlsZGVyJztcclxuaW1wb3J0IHsgSXRlbUJ1aWxkZXIgfSBmcm9tICcuLi9pdGVtLmJ1aWxkZXInO1xyXG5pbXBvcnQgeyBJdGVtQ29uc3VtaW5nQWN0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FjdGlvbnMvaXRlbS1jb25zdW1pbmctYWN0aW9uLm1vZGVsJztcclxuaW1wb3J0IHsgSW50ZXJhY3Rpb25UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ludGVyYWN0aW9ucy9pbnRlcmFjdGlvbi10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBJbkdhbWVJdGVtIH0gZnJvbSAnLi4vLi4vbW9kZWxzL0l0ZW0ubW9kZWwnO1xyXG5pbXBvcnQgeyBCdWlsZGVyRXJyb3IgfSBmcm9tICcuLi8uLi9tb2RlbHMvZXJyb3JzL2J1aWxkZXIuZXJyb3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIEl0ZW1Db25zdW1pbmdBY3Rpb25CdWlsZGVyPFJldHVybkJ1aWxkZXJUeXBlIGV4dGVuZHMgQWN0aW9uQ29udGFpbmluZ0J1aWxkZXI+XHJcbiAgICBleHRlbmRzIEJhc2VBY3Rpb25CdWlsZGVyPEl0ZW1Db25zdW1pbmdBY3Rpb24sIFJldHVybkJ1aWxkZXJUeXBlPiBpbXBsZW1lbnRzIEl0ZW1Db250YWluaW5nQnVpbGRlciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYnVpbGRlcjogUmV0dXJuQnVpbGRlclR5cGUpIHtcclxuICAgICAgICBzdXBlcihidWlsZGVyLCBuZXcgSXRlbUNvbnN1bWluZ0FjdGlvbigpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHNldFdhc1RyaWdlcmVkKHdhc1RyaWdnZXJlZDogYm9vbGVhbik6IHRoaXMge1xyXG4gICAgICAgIGlmICh3YXNUcmlnZ2VyZWQgPT09IHVuZGVmaW5lZCB8fCB3YXNUcmlnZ2VyZWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV2YWxFcnJvcignV2FzVHJpZ2dlcmVkIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLkFjdGlvbi5zZXRXYXNUcmlnZ2VyZWQod2FzVHJpZ2dlcmVkKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0UmVzcG9uc2VBZnRlclVzZShyZXNwb25zZTogc3RyaW5nKTogdGhpcyB7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCByZXNwb25zZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV2YWxFcnJvcignTm8gUmVzcG9uc2UgZm91bmQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkFjdGlvbi5zZXRSZXNwb25zZUFmdGVyVXNlKHJlc3BvbnNlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHNldEludGVyYWN0aW9uVHlwZSh0eXBlOiBJbnRlcmFjdGlvblR5cGUpOiB0aGlzIHtcclxuICAgICAgICBpZiAoIXR5cGUgfHwgIU9iamVjdC52YWx1ZXMoSW50ZXJhY3Rpb25UeXBlKS5pbmNsdWRlcyh0eXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZhbEVycm9yKCdJbnRlcmFjdGlvblR5cGUgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldEludGVyYWN0aW9uVHlwZSh0eXBlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkSXRlbVRvQnVpbGRlcihpdGVtOiBJbkdhbWVJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWlsZGVyRXJyb3IoJ0l0ZW0gY291bGQgbm90IGJlIGFkZGVkIHRvIHRoZSBBY3Rpb24uIEl0ZW0gd2FzIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldEl0ZW0oaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEl0ZW0oaXRlbT86IEluR2FtZUl0ZW0pOiBJdGVtQnVpbGRlcjxJdGVtQ29uc3VtaW5nQWN0aW9uQnVpbGRlcjxSZXR1cm5CdWlsZGVyVHlwZT4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IEl0ZW1CdWlsZGVyPEl0ZW1Db25zdW1pbmdBY3Rpb25CdWlsZGVyPFJldHVybkJ1aWxkZXJUeXBlPj4odGhpcywgaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uRmluaXNoKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5BY3Rpb24uZ2V0SXRlbSgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWlsZGVyRXJyb3IoJ0FjdGlvbiBjcmVhdGlvbiBjb3VsZCBub3QgYmUgZmluaXNoZWQuIEl0ZW0gd2FzIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuQWN0aW9uLmdldFJlc3BvbnNlQWZ0ZXJVc2UoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVpbGRlckVycm9yKCdBY3Rpb24gY3JlYXRpb24gY291bGQgbm90IGJlIGZpbmlzaGVkLiBSZXNwb25zZUFmdGVyVXNlIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=