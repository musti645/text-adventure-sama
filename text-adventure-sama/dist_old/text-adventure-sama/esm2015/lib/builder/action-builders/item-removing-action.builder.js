import { BaseActionBuilder } from './base-action.builder';
import { ItemBuilder } from '../item.builder';
import { ItemRemovingAction } from '../../models/actions/item-removing-action.model';
import { BuilderError } from '../../models/errors/builder.error';
import { InteractionType } from '../../models/interactions/interaction-type.enum';
export class ItemRemovingActionBuilder extends BaseActionBuilder {
    constructor(builder) {
        super(builder, new ItemRemovingAction());
    }
    addItemToBuilder(item) {
        if (!item) {
            throw new BuilderError('Item could not be added to the Action. Item was not set.');
        }
        this.Action.setItem(item);
    }
    setWasTrigered(wasTriggered) {
        if (wasTriggered === undefined || wasTriggered === null) {
            throw new EvalError('WasTriggered was not set.');
        }
        this.Action.setWasTriggered(wasTriggered);
        return this;
    }
    setResponseAfterUse(response) {
        if (!response || response === '') {
            throw new EvalError('No Response found.');
        }
        this.Action.setResponseAfterUse(response);
        return this;
    }
    setInteractionType(type) {
        if (!type || !Object.values(InteractionType).includes(type)) {
            throw new EvalError('InteractionType not set.');
        }
        this.Action.setInteractionType(type);
        return this;
    }
    addItem(item) {
        return new ItemBuilder(this, item);
    }
    onFinish() {
        if (!this.Action.getItem()) {
            throw new BuilderError('Action creation could not be finished. Item was not set.');
        }
        if (!this.Action.getResponseAfterUse()) {
            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1yZW1vdmluZy1hY3Rpb24uYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiJFOi9Eb2t1bWVudGUvUmVwb3NpdG9yaWVzL1RleHRBZHZlbnR1cmVTYW1hL3RleHQtYWR2ZW50dXJlLXNhbWEvcHJvamVjdHMvdGV4dC1hZHZlbnR1cmUtc2FtYS9zcmMvIiwic291cmNlcyI6WyJsaWIvYnVpbGRlci9hY3Rpb24tYnVpbGRlcnMvaXRlbS1yZW1vdmluZy1hY3Rpb24uYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFFckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUdsRixNQUFNLE9BQU8seUJBQ1QsU0FBUSxpQkFBd0Q7SUFFaEUsWUFBWSxPQUEwQjtRQUNsQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFnQjtRQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxJQUFJLFlBQVksQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUdNLGNBQWMsQ0FBQyxZQUFxQjtRQUN2QyxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtZQUNyRCxNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sbUJBQW1CLENBQUMsUUFBZ0I7UUFDdkMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLEtBQUssRUFBRSxFQUFFO1lBQzlCLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLGtCQUFrQixDQUFDLElBQXFCO1FBQzNDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6RCxNQUFNLElBQUksU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxPQUFPLENBQUMsSUFBaUI7UUFDNUIsT0FBTyxJQUFJLFdBQVcsQ0FBK0MsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDeEIsTUFBTSxJQUFJLFlBQVksQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1NBQ3RGO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsRUFBRTtZQUNwQyxNQUFNLElBQUksWUFBWSxDQUFDLHNFQUFzRSxDQUFDLENBQUM7U0FDbEc7SUFDTCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQWN0aW9uQnVpbGRlciB9IGZyb20gJy4vYmFzZS1hY3Rpb24uYnVpbGRlcic7XHJcbmltcG9ydCB7IEFjdGlvbkNvbnRhaW5pbmdCdWlsZGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9hY3Rpb24tY29udGFpbmluZy5idWlsZGVyJztcclxuaW1wb3J0IHsgSXRlbUNvbnRhaW5pbmdCdWlsZGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pdGVtLWNvbnRhaW5pbmcuYnVpbGRlcic7XHJcbmltcG9ydCB7IEl0ZW1CdWlsZGVyIH0gZnJvbSAnLi4vaXRlbS5idWlsZGVyJztcclxuaW1wb3J0IHsgSXRlbVJlbW92aW5nQWN0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FjdGlvbnMvaXRlbS1yZW1vdmluZy1hY3Rpb24ubW9kZWwnO1xyXG5pbXBvcnQgeyBJbkdhbWVJdGVtIH0gZnJvbSAnLi4vLi4vbW9kZWxzL0l0ZW0ubW9kZWwnO1xyXG5pbXBvcnQgeyBCdWlsZGVyRXJyb3IgfSBmcm9tICcuLi8uLi9tb2RlbHMvZXJyb3JzL2J1aWxkZXIuZXJyb3InO1xyXG5pbXBvcnQgeyBJbnRlcmFjdGlvblR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbHMvaW50ZXJhY3Rpb25zL2ludGVyYWN0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEl0ZW1SZW1vdmluZ0FjdGlvbkJ1aWxkZXI8UmV0dXJuQnVpbGRlclR5cGUgZXh0ZW5kcyBBY3Rpb25Db250YWluaW5nQnVpbGRlcj5cclxuICAgIGV4dGVuZHMgQmFzZUFjdGlvbkJ1aWxkZXI8SXRlbVJlbW92aW5nQWN0aW9uLCBSZXR1cm5CdWlsZGVyVHlwZT4gaW1wbGVtZW50cyBJdGVtQ29udGFpbmluZ0J1aWxkZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGJ1aWxkZXI6IFJldHVybkJ1aWxkZXJUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIoYnVpbGRlciwgbmV3IEl0ZW1SZW1vdmluZ0FjdGlvbigpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkSXRlbVRvQnVpbGRlcihpdGVtOiBJbkdhbWVJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWlsZGVyRXJyb3IoJ0l0ZW0gY291bGQgbm90IGJlIGFkZGVkIHRvIHRoZSBBY3Rpb24uIEl0ZW0gd2FzIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldEl0ZW0oaXRlbSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBzZXRXYXNUcmlnZXJlZCh3YXNUcmlnZ2VyZWQ6IGJvb2xlYW4pOiB0aGlzIHtcclxuICAgICAgICBpZiAod2FzVHJpZ2dlcmVkID09PSB1bmRlZmluZWQgfHwgd2FzVHJpZ2dlcmVkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ1dhc1RyaWdnZXJlZCB3YXMgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5BY3Rpb24uc2V0V2FzVHJpZ2dlcmVkKHdhc1RyaWdnZXJlZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJlc3BvbnNlQWZ0ZXJVc2UocmVzcG9uc2U6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UgfHwgcmVzcG9uc2UgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFdmFsRXJyb3IoJ05vIFJlc3BvbnNlIGZvdW5kLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5BY3Rpb24uc2V0UmVzcG9uc2VBZnRlclVzZShyZXNwb25zZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEludGVyYWN0aW9uVHlwZSh0eXBlOiBJbnRlcmFjdGlvblR5cGUpOiB0aGlzIHtcclxuICAgICAgICBpZiAoIXR5cGUgfHwgIU9iamVjdC52YWx1ZXMoSW50ZXJhY3Rpb25UeXBlKS5pbmNsdWRlcyh0eXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZhbEVycm9yKCdJbnRlcmFjdGlvblR5cGUgbm90IHNldC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuQWN0aW9uLnNldEludGVyYWN0aW9uVHlwZSh0eXBlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkSXRlbShpdGVtPzogSW5HYW1lSXRlbSk6IEl0ZW1CdWlsZGVyPEl0ZW1SZW1vdmluZ0FjdGlvbkJ1aWxkZXI8UmV0dXJuQnVpbGRlclR5cGU+PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVtQnVpbGRlcjxJdGVtUmVtb3ZpbmdBY3Rpb25CdWlsZGVyPFJldHVybkJ1aWxkZXJUeXBlPj4odGhpcywgaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uRmluaXNoKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5BY3Rpb24uZ2V0SXRlbSgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWlsZGVyRXJyb3IoJ0FjdGlvbiBjcmVhdGlvbiBjb3VsZCBub3QgYmUgZmluaXNoZWQuIEl0ZW0gd2FzIG5vdCBzZXQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuQWN0aW9uLmdldFJlc3BvbnNlQWZ0ZXJVc2UoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVpbGRlckVycm9yKCdBY3Rpb24gY3JlYXRpb24gY291bGQgbm90IGJlIGZpbmlzaGVkLiBSZXNwb25zZUFmdGVyVXNlIHdhcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiJdfQ==