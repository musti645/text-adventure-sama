{"version":3,"file":"text-adventure-sama.js","sources":["../../../projects/text-adventure-sama/src/lib/models/command.model.ts","../../../projects/text-adventure-sama/src/lib/services/item-event.service.ts","../../../projects/text-adventure-sama/src/lib/models/inventory.model.ts","../../../projects/text-adventure-sama/src/lib/models/errors/game.error.ts","../../../projects/text-adventure-sama/src/lib/services/scene-event.service.ts","../../../projects/text-adventure-sama/src/lib/models/stage.model.ts","../../../projects/text-adventure-sama/src/lib/models/game.model.ts","../../../projects/text-adventure-sama/src/lib/builder/base.builder.ts","../../../projects/text-adventure-sama/src/lib/models/Item.model.ts","../../../projects/text-adventure-sama/src/lib/models/errors/builder.error.ts","../../../projects/text-adventure-sama/src/lib/builder/item.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/inventory.builder.ts","../../../projects/text-adventure-sama/src/lib/models/scene.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/base-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/interactions/interaction-type.enum.ts","../../../projects/text-adventure-sama/src/lib/models/actions/action.model.ts","../../../projects/text-adventure-sama/src/lib/models/actions/one-time-action.model.ts","../../../projects/text-adventure-sama/src/lib/models/events/item-yielding-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/item-yielding-action.model.ts","../../../projects/text-adventure-sama/src/lib/models/events/gateway-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/gateway-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/gateway-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/events/item-consuming-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/item-consuming-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/item-consuming-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/events/item-removing-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/item-removing-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/item-removing-action.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/item-yielding-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/actions/multi-time-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/multi-time-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/actions/random-response-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/random-response-action.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/one-time-action.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/scene.builder.ts","../../../projects/text-adventure-sama/src/lib/services/id-generator.service.ts","../../../projects/text-adventure-sama/src/lib/builder/command.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/game.builder.ts","../../../projects/text-adventure-sama/src/lib/models/other/text-input.enum.ts","../../../projects/text-adventure-sama/src/lib/models/other/text-input.model.ts","../../../projects/text-adventure-sama/src/lib/models/other/parse-input-result.model.ts","../../../projects/text-adventure-sama/src/lib/services/input-parser.service.ts","../../../projects/text-adventure-sama/src/lib/services/classification-trainer.service.ts","../../../projects/text-adventure-sama/src/lib/models/events/game-reset.event.ts","../../../projects/text-adventure-sama/src/lib/models/events/game-end.event.ts","../../../projects/text-adventure-sama/src/lib/models/events/game-start.event.ts","../../../projects/text-adventure-sama/src/lib/text-adventure/text-adventure.component.ts","../../../projects/text-adventure-sama/src/lib/text-adventure/text-adventure.module.ts","../../../projects/text-adventure-sama/src/public-api.ts","../../../projects/text-adventure-sama/src/text-adventure-sama.ts"],"sourcesContent":["/**\r\n * Global commands within the game that are evaluated before all of the other elements\r\n */\r\nexport class Command {\r\n    private Trigger: string;\r\n    private Response: string;\r\n    private ResponseFunction: () => string;\r\n    private UseTypeWritingAnimation: boolean;\r\n    private Description: string;\r\n\r\n    public activate(): string {\r\n        if (this.Response) {\r\n            return this.Response;\r\n        } else {\r\n            return this.ResponseFunction();\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public setTrigger(trigger: string): void {\r\n        this.Trigger = trigger;\r\n    }\r\n\r\n    public getTrigger(): string {\r\n        return this.Trigger;\r\n    }\r\n\r\n    public setResponse(response: string): void {\r\n        this.Response = response;\r\n    }\r\n\r\n    public getResponse(): string {\r\n        return this.Response;\r\n    }\r\n\r\n    public setResponseFunction(func: () => string): void {\r\n        this.ResponseFunction = func;\r\n    }\r\n\r\n    public getResponseFunction(): () => string {\r\n        return this.ResponseFunction;\r\n    }\r\n\r\n    public setUseTypeWritingAnimation(use: boolean): void {\r\n        this.UseTypeWritingAnimation = use;\r\n    }\r\n\r\n    public getUseTypeWritingAnimation(): boolean {\r\n        return this.UseTypeWritingAnimation;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.Description;\r\n    }\r\n\r\n    public setDescription(desc: string): void {\r\n        this.Description = desc;\r\n    }\r\n\r\n}\r\n","import { ItemConsumingActionEvent, IItemConsumingEventService } from '../models/events/item-consuming-action.event';\r\nimport { ItemYieldingActionEvent, IItemYieldingEventService } from '../models/events/item-yielding-action.event';\r\nimport { ItemRemovingActionEvent, IItemRemovingEventService } from '../models/events/item-removing-action.event';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Singleton Service handling Item Events\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ItemEventService implements IItemRemovingEventService,\r\n    IItemYieldingEventService,\r\n    IItemConsumingEventService {\r\n\r\n    private constructor() {\r\n\r\n    }\r\n\r\n    private static Instance: ItemEventService = undefined;\r\n\r\n    private ItemConsumingActionEventSource = new Subject<ItemConsumingActionEvent>();\r\n    private ItemYieldingActionEventSource = new Subject<ItemYieldingActionEvent>();\r\n    private ItemRemovingActionEventSource = new Subject<ItemRemovingActionEvent>();\r\n\r\n    public ItemConsumingActionEvent$ = this.ItemConsumingActionEventSource.asObservable();\r\n    public ItemYieldingActionEvent$ = this.ItemYieldingActionEventSource.asObservable();\r\n    public ItemRemovingActionEvent$ = this.ItemRemovingActionEventSource.asObservable();\r\n\r\n    public static getInstance(): ItemEventService {\r\n        if (!ItemEventService.Instance) {\r\n            ItemEventService.Instance = new ItemEventService();\r\n        }\r\n\r\n        return ItemEventService.Instance;\r\n    }\r\n\r\n    public consumeItem(event: ItemConsumingActionEvent): void {\r\n        this.ItemConsumingActionEventSource.next(event);\r\n    }\r\n\r\n    public yieldItem(event: ItemYieldingActionEvent): void {\r\n        this.ItemYieldingActionEventSource.next(event);\r\n    }\r\n\r\n    public removeItem(event: ItemRemovingActionEvent): void {\r\n        this.ItemRemovingActionEventSource.next(event);\r\n    }\r\n\r\n}\r\n","import { InGameItem } from './Item.model';\r\nimport { ItemEventService } from '../services/item-event.service';\r\nimport { IItemConsumingEventListener, ItemConsumingActionEvent } from '../models/events/item-consuming-action.event';\r\nimport { IItemRemovingEventListener, ItemRemovingActionEvent } from '../models/events/item-removing-action.event';\r\nimport { IItemYieldingEventListener, ItemYieldingActionEvent } from '../models/events/item-yielding-action.event';\r\nimport * as _ from 'lodash';\r\n\r\nexport class Inventory implements IItemConsumingEventListener,\r\n    IItemRemovingEventListener,\r\n    IItemYieldingEventListener {\r\n    private Items: InGameItem[];\r\n\r\n    constructor() {\r\n        this.Items = [];\r\n\r\n        ItemEventService.getInstance().ItemYieldingActionEvent$.subscribe((event) => this.OnItemYield(event));\r\n        ItemEventService.getInstance().ItemRemovingActionEvent$.subscribe((event) => this.OnItemRemove(event));\r\n        ItemEventService.getInstance().ItemConsumingActionEvent$.subscribe((event) => this.OnItemConsume(event));\r\n    }\r\n\r\n    OnItemYield(event: ItemYieldingActionEvent): void {\r\n        if (event.ResetItemUsagesToMaximum) {\r\n            event.Item.resetUsages();\r\n        }\r\n\r\n        for (let i = 0; i < event.AmountOfItems; i++) {\r\n            // create a deep copy of the item (we also need the functions to be copied)\r\n            this.addItem(_.cloneDeep(event.Item));\r\n        }\r\n    }\r\n\r\n    OnItemRemove(event: ItemRemovingActionEvent): void {\r\n        this.removeItemFromInventory(event.Item.getID());\r\n    }\r\n\r\n    OnItemConsume(event: ItemConsumingActionEvent): void {\r\n        const items = this.findItemsById(event.Item.getID());\r\n        items[0].use();\r\n    }\r\n\r\n    public findItemsById(id: number): InGameItem[] {\r\n        return this.Items.filter(o => o.getID() === id);\r\n    }\r\n\r\n    public findItemsByName(name: string): InGameItem[] {\r\n        return this.Items.filter(o => o.getName() === name);\r\n    }\r\n\r\n    public removeItemFromInventory(id: number): void {\r\n        this.Items = this.Items.filter(o => o.getID() !== id);\r\n    }\r\n\r\n    public getItemCount(): number {\r\n        return this.Items.length;\r\n    }\r\n\r\n    public addItem(toAdd: InGameItem): void {\r\n        toAdd.WasPickedUp = true;\r\n        this.Items.push(toAdd);\r\n    }\r\n\r\n    public getItems(): InGameItem[] {\r\n        return this.Items;\r\n    }\r\n\r\n}\r\n","export class GameError extends Error {\r\n    constructor(m: string) {\r\n        super(m);\r\n\r\n        Object.setPrototypeOf(this, GameError.prototype);\r\n    }\r\n}\r\n","import { IGatewayActionEventService, GatewayActionEvent } from '../models/events/gateway-action.event';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Singleton Service handling Scene Events\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SceneEventService implements IGatewayActionEventService {\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    private static Instance: SceneEventService = undefined;\r\n\r\n    private GatewayActionEventSource = new Subject<GatewayActionEvent>();\r\n\r\n    public GatewayActionEvent$ = this.GatewayActionEventSource.asObservable();\r\n\r\n    public static getInstance(): SceneEventService {\r\n        if (!SceneEventService.Instance) {\r\n            SceneEventService.Instance = new SceneEventService();\r\n        }\r\n\r\n        return SceneEventService.Instance;\r\n    }\r\n\r\n    public changeScene(event: GatewayActionEvent): void {\r\n        this.GatewayActionEventSource.next(event);\r\n    }\r\n}\r\n","import { Scene } from './scene.model';\r\nimport { GameError } from '../models/errors/game.error';\r\nimport { SceneEventService } from '../services/scene-event.service';\r\nimport { IGatewayActionEventListener, GatewayActionEvent } from '../models/events/gateway-action.event';\r\n\r\n/**\r\n * The Stage contains all scenes (including a pointer to the current scene).\r\n * It also manages the transition between scenes.\r\n */\r\nexport class Stage implements IGatewayActionEventListener {\r\n    private Scenes: Scene[];\r\n    private CurrentScene: Scene;\r\n    // path the user took through the scenes\r\n    private ScenePath: number[];\r\n\r\n    constructor() {\r\n        this.ScenePath = [];\r\n        this.Scenes = [];\r\n\r\n        SceneEventService.getInstance().GatewayActionEvent$.subscribe((event) => this.OnSceneChange(event));\r\n    }\r\n\r\n    OnSceneChange(event: GatewayActionEvent): void {\r\n        this.goToScene(event.TargetSceneID);\r\n    }\r\n\r\n    public getCurrentScene(): Scene {\r\n        if (!this.CurrentScene) {\r\n            this.CurrentScene = this.Scenes[0];\r\n        }\r\n        return this.CurrentScene;\r\n    }\r\n\r\n    public goToScene(id: number): Scene {\r\n        const nextScene = this.Scenes.find(s => s.getID() === id);\r\n        if (!nextScene) {\r\n            throw new GameError('Scene could not be found.');\r\n        }\r\n\r\n        this.ScenePath.push(id);\r\n\r\n        this.CurrentScene = nextScene;\r\n        return this.CurrentScene;\r\n    }\r\n\r\n    public addScene(toAdd: Scene): void {\r\n        this.Scenes.push(toAdd);\r\n    }\r\n\r\n    public getScenesCount(): number {\r\n        return this.Scenes.length;\r\n    }\r\n\r\n    public getScenes(): Scene[] {\r\n        return this.Scenes;\r\n    }\r\n}\r\n","import { Action } from './actions/action.model';\r\nimport { Command } from './command.model';\r\nimport { Inventory } from './inventory.model';\r\nimport { InGameItem } from './Item.model';\r\nimport { Stage } from './stage.model';\r\n\r\n/**\r\n * Represents the Game.\r\n */\r\nexport class Game {\r\n    private Title: string;\r\n    private Introduction: string;\r\n    private ItemNotFoundInInventoryResponse: string;\r\n    private ItemAddedToInventoryResponse: string;\r\n    private GatewayTargetNotFoundResponse: string;\r\n    private InventoryEmptyResponse: string;\r\n    private Stage: Stage;\r\n    private Inventory: Inventory;\r\n    private Commands: Command[];\r\n\r\n    constructor() {\r\n        this.Stage = new Stage();\r\n        this.Inventory = new Inventory();\r\n        this.Commands = [];\r\n        this.initializeCommands();\r\n    }\r\n\r\n    private initializeCommands(): void {\r\n        const helpCommand = new Command();\r\n        helpCommand.setTrigger('help');\r\n        helpCommand.setDescription('A list of all global commands');\r\n        helpCommand.setUseTypeWritingAnimation(false);\r\n        helpCommand.setResponseFunction(() => {\r\n            let commandsHelp = '';\r\n            this.Commands.forEach(command => {\r\n                commandsHelp += `${command.getTrigger()} - ${command.getDescription()} \\r\\n `;\r\n            });\r\n            return commandsHelp;\r\n        });\r\n        this.Commands.push(helpCommand);\r\n\r\n\r\n        const inventoryCommand = new Command();\r\n        inventoryCommand.setTrigger('inventory');\r\n        inventoryCommand.setDescription('List all items in your inventory.');\r\n        inventoryCommand.setUseTypeWritingAnimation(false);\r\n        inventoryCommand.setResponseFunction(() => {\r\n            if (this.Inventory.getItemCount() <= 0) {\r\n                return this.InventoryEmptyResponse;\r\n            }\r\n            let inventoryContents = 'Items in Inventory: \\r\\n ';\r\n            this.Inventory.getItems().forEach(item => {\r\n                inventoryContents += `${item.getName()} \\r\\n `;\r\n            });\r\n            return inventoryContents;\r\n        });\r\n        this.Commands.push(inventoryCommand);\r\n\r\n\r\n        const sceneCommand = new Command();\r\n        sceneCommand.setTrigger('look around');\r\n        sceneCommand.setDescription('Get a description of the scene you\\'re in');\r\n        sceneCommand.setUseTypeWritingAnimation(true);\r\n        sceneCommand.setResponseFunction(() => {\r\n            let description = this.Stage.getCurrentScene().getDescription();\r\n            for (const item of this.Stage.getCurrentScene().getItems()) {\r\n                description += ` ${item.getInSceneDescription()}`;\r\n            }\r\n            return description;\r\n        });\r\n\r\n        this.Commands.push(sceneCommand);\r\n    }\r\n\r\n    public getStage(): Stage {\r\n        return this.Stage;\r\n    }\r\n\r\n    public getInventory(): Inventory {\r\n        return this.Inventory;\r\n    }\r\n\r\n    public setInventory(inventory: Inventory): void {\r\n        this.Inventory = inventory;\r\n    }\r\n\r\n    public getScenesCount(): number {\r\n        return this.Stage.getScenesCount();\r\n    }\r\n\r\n    public getTitle(): string {\r\n        return this.Title;\r\n    }\r\n\r\n    public setTitle(title: string): void {\r\n        this.Title = title;\r\n    }\r\n\r\n    public getIntroduction(): string {\r\n        return this.Introduction;\r\n    }\r\n\r\n    public setIntroduction(intro: string): void {\r\n        this.Introduction = intro;\r\n    }\r\n\r\n    public getCommands(): Command[] {\r\n        return this.Commands;\r\n    }\r\n\r\n    public setCommands(commands: Command[]): void {\r\n        this.Commands = commands;\r\n    }\r\n\r\n    public getItemNotFoundResponse(): string {\r\n        return this.Stage.getCurrentScene().getItemNotFoundResponse();\r\n    }\r\n\r\n    public getInvalidInputResponse(): string {\r\n        return this.Stage.getCurrentScene().getInvalidInputResponse();\r\n    }\r\n\r\n    public getActionNotRecognizedResponse(): string {\r\n        return this.Stage.getCurrentScene().getActionNotRecognizedResponse();\r\n    }\r\n\r\n    public getSceneDescription(): string {\r\n        return this.Stage.getCurrentScene().getDescription();\r\n    }\r\n\r\n    public getItemNotFoundInInventoryResponse(): string {\r\n        return this.ItemNotFoundInInventoryResponse;\r\n    }\r\n\r\n    public setItemNotFoundInInventoryResponse(response: string): void {\r\n        this.ItemNotFoundInInventoryResponse = response;\r\n    }\r\n\r\n    public getActionsInScene(): Action[] {\r\n        return this.Stage.getCurrentScene().getActions();\r\n    }\r\n\r\n    public getItemsInScene(): InGameItem[] {\r\n        return this.Stage.getCurrentScene().getItems();\r\n    }\r\n\r\n    public getItemsInInventory(): InGameItem[] {\r\n        return this.Inventory.getItems();\r\n    }\r\n\r\n    public removeItemFromScene(item: InGameItem): void {\r\n        this.Stage.getCurrentScene().removeItemFromScene(item);\r\n    }\r\n\r\n    public addItemToInventory(item: InGameItem): void {\r\n        this.Inventory.addItem(item);\r\n    }\r\n\r\n    public removeItemFromInventory(item: InGameItem): void {\r\n        this.Inventory.removeItemFromInventory(item.getID());\r\n    }\r\n\r\n    public getItemAddedToInventoryResponse(): string {\r\n        return this.ItemAddedToInventoryResponse;\r\n    }\r\n\r\n    public setItemAddedToInventoryResponse(response: string): void {\r\n        this.ItemAddedToInventoryResponse = response;\r\n    }\r\n\r\n    public getGatewayTargetNotFoundResponse(): string {\r\n        return this.GatewayTargetNotFoundResponse;\r\n    }\r\n\r\n    public setGatewayTargetNotFoundResponse(response: string): void {\r\n        this.GatewayTargetNotFoundResponse = response;\r\n    }\r\n\r\n    public getInventoryEmptyResponse(): string {\r\n        return this.InventoryEmptyResponse;\r\n    }\r\n\r\n    public setInventoryEmptyResponse(response: string): void {\r\n        this.InventoryEmptyResponse = response;\r\n    }\r\n}\r\n","export abstract class BaseBuilder {\r\n    /**\r\n     * Finishes the Building Process of this Builder\r\n     */\r\n    public abstract finish(): any;\r\n}\r\n","import { Inventory } from './inventory.model';\r\nimport { Scene } from './scene.model';\r\n\r\n/**\r\n * This class represents an Item in the game.\r\n */\r\nexport class InGameItem {\r\n    private ID: number;\r\n    private Name: string;\r\n    private Description: string;\r\n    private MaximumUsages: number;\r\n\r\n    private UsagesLeft: number;\r\n\r\n    private ItemUsedResponse: string;\r\n    private NoUsagesLeftResponse: string;\r\n\r\n    private CanPickUp: boolean;\r\n    private CannotPickUpResponse: string;\r\n    public WasPickedUp: boolean;\r\n\r\n    private InSceneDescription: string;\r\n\r\n    private CannotUseItemResponse: string;\r\n    public CanUseFunction(item: this, currentScene: Scene, inventory: Inventory): boolean {\r\n        return true;\r\n    }\r\n\r\n\r\n    constructor(id?: number) {\r\n        this.ID = id;\r\n        this.CanPickUp = true;\r\n    }\r\n\r\n    public use(): string {\r\n        if (this.UsagesLeft >= 1) {\r\n            this.UsagesLeft--;\r\n            return this.ItemUsedResponse;\r\n        }\r\n        return this.NoUsagesLeftResponse;\r\n    }\r\n\r\n\r\n    public resetUsages(): void {\r\n        this.UsagesLeft = this.MaximumUsages;\r\n    }\r\n\r\n    public setID(id: number): void {\r\n        this.ID = id;\r\n    }\r\n\r\n    public getID(): number {\r\n        return this.ID;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n        this.Name = name;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.Name;\r\n    }\r\n\r\n    public setDescription(desc: string): void {\r\n        this.Description = desc;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.Description;\r\n    }\r\n\r\n    public setMaximumUsages(usages: number): void {\r\n        this.MaximumUsages = usages;\r\n    }\r\n\r\n    public getMaximumUsages(): number {\r\n        return this.MaximumUsages;\r\n    }\r\n\r\n    public setUsagesLeft(usages: number): void {\r\n        this.UsagesLeft = usages;\r\n    }\r\n\r\n    public getUsagesLeft(): number {\r\n        return this.UsagesLeft;\r\n    }\r\n\r\n    public setItemUsedResponse(response: string): void {\r\n        this.ItemUsedResponse = response;\r\n    }\r\n\r\n    public getItemUsedResponse(): string {\r\n        return this.ItemUsedResponse;\r\n    }\r\n\r\n    public setNoUsagesLeftResponse(response: string): void {\r\n        this.NoUsagesLeftResponse = response;\r\n    }\r\n\r\n    public getNoUsagesLeftResponse(): string {\r\n        return this.NoUsagesLeftResponse;\r\n    }\r\n\r\n    public getCanPickUp(): boolean {\r\n        return this.CanPickUp;\r\n    }\r\n\r\n    public setCanPickUp(value: boolean): void {\r\n        this.CanPickUp = value;\r\n    }\r\n\r\n    public setCannotPickUpResponse(response: string): void {\r\n        this.CannotPickUpResponse = response;\r\n    }\r\n\r\n    public getCannotPickUpResponse(): string {\r\n        return this.CannotPickUpResponse;\r\n    }\r\n\r\n    public getInSceneDescription(): string {\r\n        return this.InSceneDescription;\r\n    }\r\n\r\n    public setInSceneDescription(descr: string): void {\r\n        this.InSceneDescription = descr;\r\n    }\r\n\r\n    public setCanUseFunction(func: (item: this, currentScene: Scene, inventory: Inventory) => boolean): void {\r\n        this.CanUseFunction = func;\r\n    }\r\n\r\n    public setCannotUseItemResponse(response: string): void {\r\n        this.CannotUseItemResponse = response;\r\n    }\r\n\r\n    public getCannotUseItemResponse(): string {\r\n        return this.CannotUseItemResponse;\r\n    }\r\n\r\n    public getCanUseFunction(): (item: this, currentScene: Scene, inventory: Inventory) => boolean {\r\n        return this.CanUseFunction;\r\n    }\r\n\r\n}\r\n","export class BuilderError extends Error {\r\n    constructor(m: string) {\r\n        super(m);\r\n\r\n        Object.setPrototypeOf(this, BuilderError.prototype);\r\n    }\r\n}\r\n","import { InGameItem } from '../models/Item.model';\r\nimport { ItemContainingBuilder } from './interfaces/item-containing.builder';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { Scene } from '../models/scene.model';\r\nimport { Inventory } from '../models/inventory.model';\r\n\r\nexport class ItemBuilder<ReturnBuilderType extends ItemContainingBuilder> extends BaseBuilder {\r\n    protected Item: InGameItem;\r\n    private Builder: ReturnBuilderType;\r\n    private RequireInSceneDescription: boolean;\r\n    private IsCanUseFunctionReplaced: boolean;\r\n\r\n    constructor(builder: ReturnBuilderType, item: InGameItem = new InGameItem(), requireInSceneDescription: boolean = false) {\r\n        super();\r\n        this.Item = item;\r\n        this.Builder = builder;\r\n        this.RequireInSceneDescription = requireInSceneDescription;\r\n    }\r\n\r\n    public setName(name: string): this {\r\n        if (!name) {\r\n            throw new EvalError('Name was undefined');\r\n        }\r\n\r\n        this.Item.setName(name);\r\n        return this;\r\n    }\r\n\r\n    public setDescription(description: string): this {\r\n        if (!description) {\r\n            throw new EvalError('Description was undefined');\r\n        }\r\n\r\n        this.Item.setDescription(description);\r\n        return this;\r\n    }\r\n\r\n    public setMaximumUsages(maxUsages: number): this {\r\n        if (maxUsages === undefined || maxUsages <= 0) {\r\n            throw new EvalError('MaximumUsages Value has to be greater than 0.');\r\n        }\r\n\r\n        if (this.Item.getUsagesLeft() && this.Item.getUsagesLeft() > maxUsages) {\r\n            throw new EvalError('MaximumUsages Value has to be greater or equal to the UsagesLeft Value');\r\n        }\r\n\r\n        this.Item.setMaximumUsages(maxUsages);\r\n        return this;\r\n    }\r\n\r\n    public setUsagesLeft(usagesLeft: number): this {\r\n        if (usagesLeft === undefined || usagesLeft === null || usagesLeft < 0) {\r\n            throw new EvalError('UsagesLeft Value has to be greater than or equal to 0.');\r\n        }\r\n\r\n        if (this.Item.getMaximumUsages() && usagesLeft > this.Item.getMaximumUsages()) {\r\n            throw new EvalError('UsagesLeft Value has to be less or equal to the MaximumUsages Value.');\r\n        }\r\n\r\n        this.Item.setUsagesLeft(usagesLeft);\r\n        return this;\r\n    }\r\n\r\n    public setItemUsedResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemUsedResponse was undefined.');\r\n        }\r\n\r\n        this.Item.setItemUsedResponse(response);\r\n        return this;\r\n    }\r\n\r\n\r\n    public setNoUsagesLeftResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('NoUsagesLeftResponse was undefined.');\r\n        }\r\n\r\n        this.Item.setNoUsagesLeftResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setCanPickUp(value: boolean): this {\r\n        this.Item.setCanPickUp(value);\r\n        return this;\r\n    }\r\n\r\n    public setCannotPickUpResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('CannotPickUpResponse was undefined.');\r\n        }\r\n\r\n        this.Item.setCannotPickUpResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInSceneDescription(descr: string): this {\r\n        if (!descr) {\r\n            throw new EvalError('InSceneDescription was undefined.');\r\n        }\r\n\r\n        this.Item.setInSceneDescription(descr);\r\n        return this;\r\n    }\r\n\r\n    public setCanUseFunction(func: (item: InGameItem, currentScene: Scene, inventory: Inventory) => boolean): this {\r\n        if (!func) {\r\n            throw new EvalError('CanUseFunction was undefined.');\r\n        }\r\n\r\n        this.IsCanUseFunctionReplaced = true;\r\n        this.Item.setCanUseFunction(func);\r\n        return this;\r\n    }\r\n\r\n    public setCannotUseItemResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('CannotUseItemResponse was undefined');\r\n        }\r\n\r\n        this.Item.setCannotUseItemResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public finish(): ReturnBuilderType {\r\n        if (!this.Item.getName()) {\r\n            throw new BuilderError('Item creation could not be finished. Name was not set.');\r\n        }\r\n\r\n        if (!this.Item.getDescription()) {\r\n            throw new BuilderError('Item creation could not be finished. Description was not set.');\r\n        }\r\n\r\n        if (this.Item.getUsagesLeft() > 0 && !this.Item.getItemUsedResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. ItemUsedResponse was not set.');\r\n        }\r\n\r\n        if (!this.Item.getNoUsagesLeftResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. NoUsagesLeftResponse was not set.');\r\n        }\r\n\r\n        if (!this.Item.getCanPickUp() && !this.Item.getCannotPickUpResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. CannotPickUpResponse was not set.');\r\n        }\r\n\r\n        // if this item is added to a scene, instead of the inventory or an action, the InSceneDescription has to be set.\r\n        if (this.RequireInSceneDescription && !this.Item.getInSceneDescription()) {\r\n            throw new BuilderError('Item creation could not be finished. InSceneDescription was not set.');\r\n        }\r\n\r\n        if (this.IsCanUseFunctionReplaced && !this.Item.getCannotUseItemResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. CannotUseItemResponse was not set.');\r\n        }\r\n\r\n        if (this.Item.getMaximumUsages() < 0) {\r\n            this.Item.setMaximumUsages(1);\r\n        }\r\n\r\n        if (this.Item.getUsagesLeft() < 0) {\r\n            this.Item.setUsagesLeft(1);\r\n        }\r\n\r\n        this.Builder.addItemToBuilder(this.Item);\r\n        return this.Builder;\r\n    }\r\n}\r\n","import { GameBuilder } from './game.builder';\r\nimport { Game } from '../models/game.model';\r\nimport { Inventory } from '../models/inventory.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { ItemContainingBuilder } from './interfaces/item-containing.builder';\r\nimport { ItemBuilder } from './item.builder';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\n\r\nexport class InventoryBuilder extends BaseBuilder implements ItemContainingBuilder {\r\n    private GameBuilder: GameBuilder;\r\n    private Game: Game;\r\n    protected Inventory: Inventory;\r\n\r\n    constructor(gameBuilder: GameBuilder, game: Game) {\r\n        super();\r\n        this.GameBuilder = gameBuilder;\r\n        this.Game = game;\r\n        this.Inventory = new Inventory();\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<InventoryBuilder> {\r\n        return new ItemBuilder<InventoryBuilder>(this, item);\r\n    }\r\n\r\n    addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Could not add Item to Inventory. Item was not set.');\r\n        }\r\n        this.Inventory.addItem(item);\r\n        if (item.getID()) {\r\n            this.GameBuilder.IdGeneratorService.addItemId(item);\r\n        }\r\n    }\r\n\r\n\r\n    public finish(): GameBuilder {\r\n        this.Game.setInventory(this.Inventory);\r\n        return this.GameBuilder;\r\n    }\r\n}\r\n","import { InGameItem } from './Item.model';\r\nimport { Action } from './actions/action.model';\r\n\r\n/**\r\n * A Scene is a container of actions and Items.\r\n * The player can only be inside one scene at a time.\r\n */\r\nexport class Scene {\r\n    private ID: number;\r\n    private Name: string;\r\n    private Description: string;\r\n\r\n    private ActionNotRecognizedResponse: string;\r\n    private ItemNotFoundResponse: string;\r\n    private InvalidInputResponse: string;\r\n\r\n    private Items: InGameItem[];\r\n    private Actions: Action[];\r\n\r\n    constructor(id?: number) {\r\n        this.ID = id;\r\n\r\n        this.Items = [];\r\n        this.Actions = [];\r\n    }\r\n\r\n    public setID(id: number): void {\r\n        this.ID = id;\r\n    }\r\n\r\n    public getID(): number {\r\n        return this.ID;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.Name;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n        this.Name = name;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.Description;\r\n    }\r\n\r\n    public setDescription(descr: string): void {\r\n        this.Description = descr;\r\n    }\r\n\r\n    public getActionNotRecognizedResponse(): string {\r\n        return this.ActionNotRecognizedResponse;\r\n    }\r\n\r\n    public setActionNotRecognizedResponse(response: string): void {\r\n        this.ActionNotRecognizedResponse = response;\r\n    }\r\n\r\n    public getItemNotFoundResponse(): string {\r\n        return this.ItemNotFoundResponse;\r\n    }\r\n\r\n    public setItemNotFoundResponse(response: string): void {\r\n        this.ItemNotFoundResponse = response;\r\n    }\r\n\r\n    public getInvalidInputResponse(): string {\r\n        return this.InvalidInputResponse;\r\n    }\r\n\r\n    public setInvalidInputResponse(response: string): void {\r\n        this.InvalidInputResponse = response;\r\n    }\r\n\r\n    public getActions(): Action[] {\r\n        return this.Actions;\r\n    }\r\n\r\n    public getItems(): InGameItem[] {\r\n        return this.Items;\r\n    }\r\n\r\n    public removeItemFromScene(item: InGameItem): void {\r\n        const index = this.Items.indexOf(item);\r\n        if (index > -1) {\r\n            this.Items.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import { Action } from '../../models/actions/action.model';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { BaseBuilder } from '../base.builder';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\nexport class BaseActionBuilder<T extends Action, ReturnBuilderType extends ActionContainingBuilder> extends BaseBuilder {\r\n    protected Action: T;\r\n    protected Builder: ReturnBuilderType;\r\n\r\n    constructor(builder: ReturnBuilderType, action: T) {\r\n        super();\r\n        this.Action = action;\r\n        this.Builder = builder;\r\n    }\r\n\r\n    public setTrigger(trigger: string): this {\r\n        if (!trigger || trigger === '') {\r\n            throw new EvalError('No Trigger found.');\r\n        }\r\n\r\n        this.Action.setTrigger(trigger);\r\n        return this;\r\n    }\r\n\r\n    public setResponse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setEndGameAction(): this {\r\n        this.Action.setIsEndGameAction(true);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n    }\r\n\r\n    public finish(): ReturnBuilderType {\r\n        if (!this.Action.getTrigger()) {\r\n            throw new BuilderError('Action creation could not be finished. Trigger was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponse()) {\r\n            throw new BuilderError('Action creation could not be finished. Response was not set.');\r\n        }\r\n\r\n        this.onFinish();\r\n\r\n        this.Builder.addActionToBuilder(this.Action);\r\n        return this.Builder;\r\n    }\r\n\r\n}\r\n","export enum InteractionType {\r\n    USE,\r\n    LOOK_AT,\r\n    GO_TO,\r\n    PICK_UP,\r\n    DO\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\n\r\n/**\r\n * Abstract Base class for all actions.\r\n */\r\n// Note: Actions don't have IDs, since they are triggered via their InteractionType and their Trigger\r\nexport abstract class Action {\r\n    private Trigger: string;\r\n    private Response: string;\r\n    private InteractionType: InteractionType;\r\n    private IsEndGameAction: boolean;\r\n\r\n    constructor() {\r\n        this.IsEndGameAction = false;\r\n    }\r\n\r\n    public abstract trigger(): string;\r\n\r\n    public abstract reset(): void;\r\n\r\n    public setTrigger(trigger: string): void {\r\n        this.Trigger = trigger;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): void {\r\n        this.InteractionType = type;\r\n    }\r\n\r\n    public setResponse(response: string): void {\r\n        this.Response = response;\r\n    }\r\n\r\n    public setIsEndGameAction(endGameAction: boolean): void {\r\n        this.IsEndGameAction = endGameAction;\r\n    }\r\n\r\n    public getTrigger(): string {\r\n        return this.Trigger;\r\n    }\r\n\r\n    public getIsEndGameAction(): boolean {\r\n        return this.IsEndGameAction;\r\n    }\r\n\r\n    public getInteractionType(): InteractionType {\r\n        return this.InteractionType;\r\n    }\r\n\r\n    public getResponse(): string {\r\n        return this.Response;\r\n    }\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { Action } from './action.model';\r\n\r\n/**\r\n * A OneTimeAction is only triggered once\r\n * Each subsequent trigger returns the same response.\r\n */\r\nexport class OneTimeAction extends Action {\r\n    private WasTriggered: boolean;\r\n    private ResponseAfterUse: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.WasTriggered) {\r\n            return this.ResponseAfterUse;\r\n        }\r\n\r\n        this.WasTriggered = true;\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.WasTriggered = false;\r\n    }\r\n\r\n    public getWasTriggered(): boolean {\r\n        return this.WasTriggered;\r\n    }\r\n\r\n    public setWasTriggered(triggered: boolean): void {\r\n        this.WasTriggered = triggered;\r\n    }\r\n\r\n    public getResponseAfterUse(): string {\r\n        return this.ResponseAfterUse;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): void {\r\n        this.ResponseAfterUse = response;\r\n    }\r\n}\r\n","import { InGameItem } from '../Item.model';\r\nimport { ItemYieldingAction } from '../actions/item-yielding-action.model';\r\n\r\nexport class ItemYieldingActionEvent {\r\n    Item: InGameItem;\r\n    AmountOfItems: number;\r\n    ResetItemUsagesToMaximum: boolean;\r\n    Response: string;\r\n    ResponseAfterUse: string;\r\n    WasTriggered: boolean;\r\n\r\n    constructor(action: ItemYieldingAction){\r\n        this.Item = action.getItem();\r\n        this.Response = action.getResponse();\r\n        this.ResponseAfterUse = action.getResponseAfterUse();\r\n        this.WasTriggered = action.getWasTriggered();\r\n        this.AmountOfItems = action.getAmountOfItems();\r\n        this.ResetItemUsagesToMaximum = action.getResetItemUsagesToMaximum();\r\n    }\r\n}\r\n\r\n\r\nexport interface IItemYieldingEventService {\r\n    yieldItem(event: ItemYieldingActionEvent): void;\r\n}\r\n\r\nexport interface IItemYieldingEventListener {\r\n    OnItemYield(event: ItemYieldingActionEvent): void;\r\n}\r\n","import { OneTimeAction } from './one-time-action.model';\r\nimport { InGameItem } from '../Item.model';\r\nimport { ItemYieldingActionEvent } from '../events/item-yielding-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { ItemEventService } from '../../services/item-event.service';\r\n\r\n/**\r\n * An ItemYieldingAction is only triggered once and adds an Item to the players inventory.\r\n */\r\nexport class ItemYieldingAction extends OneTimeAction {\r\n    private Item: InGameItem;\r\n    private AmountOfItems: number;\r\n    private ResetItemUsagesToMaximum: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.AmountOfItems = 1;\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        // trigger addition of item to inventory\r\n        if (this.getWasTriggered()) {\r\n            return this.getResponseAfterUse();\r\n        }\r\n\r\n        ItemEventService.getInstance().yieldItem(new ItemYieldingActionEvent(this));\r\n\r\n        this.setWasTriggered(true);\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setWasTriggered(false);\r\n    }\r\n\r\n    public getItem(): InGameItem {\r\n        return this.Item;\r\n    }\r\n\r\n    public setItem(item: InGameItem): void {\r\n        this.Item = item;\r\n    }\r\n\r\n    public setAmountOfItems(amount: number): void {\r\n        this.AmountOfItems = amount;\r\n    }\r\n\r\n    public getAmountOfItems(): number {\r\n        return this.AmountOfItems;\r\n    }\r\n\r\n    public getResetItemUsagesToMaximum(): boolean {\r\n        return this.ResetItemUsagesToMaximum;\r\n    }\r\n\r\n    public setResetItemUsagesToMaximum(reset: boolean): void {\r\n        this.ResetItemUsagesToMaximum = reset;\r\n    }\r\n}\r\n","import { GatewayAction } from '../actions/gateway-action.model';\r\n\r\nexport class GatewayActionEvent {\r\n    TargetSceneID: number;\r\n    TargetSceneName: string;\r\n\r\n    constructor(action: GatewayAction){\r\n        this.TargetSceneID = action.getTargetSceneId();\r\n        this.TargetSceneName = action.getTargetSceneName();\r\n    }\r\n}\r\n\r\nexport interface IGatewayActionEventService {\r\n    changeScene(event: GatewayActionEvent): void;\r\n}\r\n\r\nexport interface IGatewayActionEventListener {\r\n    OnSceneChange(event: GatewayActionEvent): void;\r\n}\r\n","import { Action } from './action.model';\r\nimport { GatewayActionEvent } from '../events/gateway-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { SceneEventService } from '../../services/scene-event.service';\r\n\r\n/**\r\n * When a GatewayAction is triggered, the game moves on to another scene.\r\n */\r\nexport class GatewayAction extends Action {\r\n    private TargetSceneId: number;\r\n    private TargetSceneName: string;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.GO_TO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        // trigger event change\r\n        SceneEventService.getInstance().changeScene(new GatewayActionEvent(this));\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n    }\r\n\r\n    public getTargetSceneId(): number {\r\n        return this.TargetSceneId;\r\n    }\r\n\r\n    public setTargetSceneId(id: number): void {\r\n        this.TargetSceneId = id;\r\n    }\r\n\r\n    public getTargetSceneName(): string {\r\n        return this.TargetSceneName;\r\n    }\r\n\r\n    public setTargetSceneName(name: string): void {\r\n        this.TargetSceneName = name;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { GatewayAction } from '../../models/actions/gateway-action.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\nexport class GatewayActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<GatewayAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new GatewayAction());\r\n    }\r\n\r\n    public setTargetSceneId(id?: number): this {\r\n        if (id === undefined || id <= 0) {\r\n            throw new EvalError('TargetSceneId Value has to be greater than 0.');\r\n        }\r\n\r\n        this.Action.setTargetSceneId(id);\r\n        return this;\r\n    }\r\n\r\n    public setTargetSceneName(name: string): this {\r\n        if (!name) {\r\n            throw new EvalError('TargetSceneName Value is invalid.');\r\n        }\r\n\r\n        this.Action.setTargetSceneName(name);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getTargetSceneId() && !this.Action.getTargetSceneName()) {\r\n            throw new BuilderError('Action creation could not be finished. SceneId and/or TargetSceneName were not set.');\r\n        }\r\n    }\r\n}\r\n","import { InGameItem } from '../Item.model';\r\nimport { ItemConsumingAction } from '../actions/item-consuming-action.model';\r\n\r\nexport class ItemConsumingActionEvent {\r\n    Item: InGameItem;\r\n    ItemNotFoundResponse: string;\r\n    Response: string;\r\n    ResponseAfterUse: string;\r\n    WasTriggered: boolean;\r\n\r\n\r\n    constructor(action: ItemConsumingAction){\r\n        this.Item = action.getItem();\r\n        this.Response = action.getResponse();\r\n        this.ResponseAfterUse = action.getResponseAfterUse();\r\n        this.WasTriggered = action.getWasTriggered();\r\n    }\r\n}\r\n\r\n\r\nexport interface IItemConsumingEventService {\r\n    consumeItem(event: ItemConsumingActionEvent): void;\r\n}\r\n\r\n\r\nexport interface IItemConsumingEventListener {\r\n    OnItemConsume(event: ItemConsumingActionEvent): void;\r\n}\r\n","import { OneTimeAction } from './one-time-action.model';\r\nimport { InGameItem } from '../Item.model';\r\nimport { ItemConsumingActionEvent } from '../events/item-consuming-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { ItemEventService } from '../../services/item-event.service';\r\n\r\n/**\r\n * An ItemConsumingAction is only triggered once and uses an Item (once) in the players inventory.\r\n * It can only be triggered, if the user has got the Item in her inventory.\r\n */\r\nexport class ItemConsumingAction extends OneTimeAction {\r\n    private Item: InGameItem;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.USE);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.getWasTriggered()) {\r\n            return this.getResponseAfterUse();\r\n        }\r\n\r\n        ItemEventService.getInstance().consumeItem(new ItemConsumingActionEvent(this));\r\n\r\n        this.setWasTriggered(true);\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setWasTriggered(false);\r\n    }\r\n\r\n    public getItem(): InGameItem {\r\n        return this.Item;\r\n    }\r\n\r\n    public setItem(item: InGameItem): void {\r\n        this.Item = item;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { ItemContainingBuilder } from '../interfaces/item-containing.builder';\r\nimport { ItemBuilder } from '../item.builder';\r\nimport { ItemConsumingAction } from '../../models/actions/item-consuming-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { InGameItem } from '../../models/Item.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\nexport class ItemConsumingActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<ItemConsumingAction, ReturnBuilderType> implements ItemContainingBuilder {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new ItemConsumingAction());\r\n    }\r\n\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Item could not be added to the Action. Item was not set.');\r\n        }\r\n        this.Action.setItem(item);\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<ItemConsumingActionBuilder<ReturnBuilderType>> {\r\n        return new ItemBuilder<ItemConsumingActionBuilder<ReturnBuilderType>>(this, item);\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getItem()) {\r\n            throw new BuilderError('Action creation could not be finished. Item was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n    }\r\n}\r\n","import { InGameItem } from '../Item.model';\r\nimport { ItemRemovingAction } from '../actions/item-removing-action.model';\r\n\r\nexport class ItemRemovingActionEvent {\r\n    Item: InGameItem;\r\n    ItemNotFoundResponse: string;\r\n    Response: string;\r\n    ResponseAfterUse: string;\r\n    WasTriggered: boolean;\r\n\r\n    constructor(action: ItemRemovingAction){\r\n        this.Item = action.getItem();\r\n        this.Response = action.getResponse();\r\n        this.ResponseAfterUse = action.getResponseAfterUse();\r\n        this.WasTriggered = action.getWasTriggered();\r\n    }\r\n}\r\n\r\nexport interface IItemRemovingEventService {\r\n    removeItem(event: ItemRemovingActionEvent): void;\r\n}\r\n\r\nexport interface IItemRemovingEventListener {\r\n    OnItemRemove(event: ItemRemovingActionEvent): void;\r\n}\r\n","import { OneTimeAction } from './one-time-action.model';\r\nimport { InGameItem } from '../Item.model';\r\nimport { ItemRemovingActionEvent } from '../events/item-removing-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { ItemEventService } from '../../services/item-event.service';\r\n\r\n/**\r\n * An ItemRemovingAction is only triggered once and removes an Item out of the players inventory without using it.\r\n * It can only be triggered, if the user has got the Item in her inventory.\r\n */\r\nexport class ItemRemovingAction extends OneTimeAction {\r\n    private Item: InGameItem;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.USE);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.getWasTriggered()) {\r\n            return this.getResponseAfterUse();\r\n        }\r\n\r\n        ItemEventService.getInstance().removeItem(new ItemRemovingActionEvent(this));\r\n\r\n        this.setWasTriggered(true);\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setWasTriggered(false);\r\n    }\r\n\r\n    public getItem(): InGameItem {\r\n        return this.Item;\r\n    }\r\n\r\n    public setItem(item: InGameItem): void {\r\n        this.Item = item;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { ItemContainingBuilder } from '../interfaces/item-containing.builder';\r\nimport { ItemBuilder } from '../item.builder';\r\nimport { ItemRemovingAction } from '../../models/actions/item-removing-action.model';\r\nimport { InGameItem } from '../../models/Item.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\n\r\n\r\nexport class ItemRemovingActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<ItemRemovingAction, ReturnBuilderType> implements ItemContainingBuilder {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new ItemRemovingAction());\r\n    }\r\n\r\n    public addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Item could not be added to the Action. Item was not set.');\r\n        }\r\n        this.Action.setItem(item);\r\n    }\r\n\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<ItemRemovingActionBuilder<ReturnBuilderType>> {\r\n        return new ItemBuilder<ItemRemovingActionBuilder<ReturnBuilderType>>(this, item);\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getItem()) {\r\n            throw new BuilderError('Action creation could not be finished. Item was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { ItemContainingBuilder } from '../interfaces/item-containing.builder';\r\nimport { ItemBuilder } from '../item.builder';\r\nimport { ItemYieldingAction } from '../../models/actions/item-yielding-action.model';\r\nimport { InGameItem } from '../../models/Item.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\n\r\n\r\nexport class ItemYieldingActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<ItemYieldingAction, ReturnBuilderType> implements ItemContainingBuilder {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new ItemYieldingAction());\r\n    }\r\n\r\n    public addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Item could not be added to the Action. Item was not set.');\r\n        }\r\n        this.Action.setItem(item);\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<ItemYieldingActionBuilder<ReturnBuilderType>> {\r\n        return new ItemBuilder<ItemYieldingActionBuilder<ReturnBuilderType>>(this, item);\r\n    }\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n    public setAmountOfItems(amount: number): this {\r\n        if (amount === undefined || amount <= 0) {\r\n            throw new EvalError('AmountOfItems Value has to be greater than 0.');\r\n        }\r\n\r\n        this.Action.setAmountOfItems(amount);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public setResetItemUsagesToMaximum(reset: boolean): this {\r\n        if (reset === undefined || reset === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setResetItemUsagesToMaximum(reset);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getItem()) {\r\n            throw new BuilderError('Action creation could not be finished. Item was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n    }\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { Action } from './action.model';\r\n\r\n/**\r\n * A MultiTimeAction can be activated multiple times.\r\n * The class allows you to pass an array of responses,\r\n * which will be returned one by one until the maximum usage count is reached.\r\n */\r\nexport class MultiTimeAction extends Action {\r\n    private UsagesLeft: number;\r\n    private MaximumUsages: number;\r\n    private Responses: string[];\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.UsagesLeft <= this.MaximumUsages) {\r\n            const responseString =  this.Responses[this.UsagesLeft];\r\n            this.UsagesLeft++;\r\n            return responseString;\r\n        }\r\n\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.UsagesLeft = 0;\r\n    }\r\n\r\n    public getUsagesLeft(): number {\r\n        return this.UsagesLeft;\r\n    }\r\n\r\n    public setUsagesLeft(usages: number): void {\r\n        this.UsagesLeft = usages;\r\n    }\r\n\r\n    public getMaximumUsages(): number {\r\n        return this.MaximumUsages;\r\n    }\r\n\r\n    public setMaximumUsages(usages: number): void {\r\n        this.MaximumUsages = usages;\r\n    }\r\n\r\n    public getResponses(): string[] {\r\n        return this.Responses;\r\n    }\r\n\r\n    public setResponses(responses: string[]): void {\r\n        this.Responses = responses;\r\n    }\r\n\r\n\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { MultiTimeAction } from '../../models/actions/multi-time-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\n\r\nexport class MultiTimeActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<MultiTimeAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new MultiTimeAction());\r\n    }\r\n\r\n    public setUsagesLeft(count: number): this {\r\n        if (count === undefined || count <= 0) {\r\n            throw new EvalError('UsagesLeft Value has to be greater than 0.');\r\n        }\r\n\r\n        if (this.Action.getMaximumUsages() && this.Action.getMaximumUsages() < count) {\r\n            throw new EvalError('UsagesLeft Value has to be less than or equal to MaximumUsages Value.');\r\n        }\r\n\r\n        this.Action.setUsagesLeft(count);\r\n        return this;\r\n    }\r\n\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public setMaximumUsages(count: number): this {\r\n        if (count === undefined || count <= 0) {\r\n            throw new EvalError('MaximumUsages Value has to be greater than 0.');\r\n        }\r\n\r\n        if (this.Action.getUsagesLeft() !== undefined &&\r\n            this.Action.getUsagesLeft() > count) {\r\n            throw new EvalError('MaximumUsages Value has to be greater than or equal to UsagesLeft Value.');\r\n        }\r\n\r\n        if (this.Action.getResponses() &&\r\n            this.Action.getResponses().length !== count) {\r\n            throw new EvalError('MaximumUsages Value has to match the Amount of Responses.');\r\n        }\r\n\r\n        this.Action.setMaximumUsages(count);\r\n        return this;\r\n    }\r\n\r\n    public setResponses(responses: string[]): this {\r\n        if (!responses) {\r\n            throw new EvalError('Invalid Value for Responses. Has to be an Array of Strings.');\r\n        }\r\n\r\n        if (responses.length === 0) {\r\n            throw new EvalError('Responses Array may not be empty.');\r\n        }\r\n\r\n        this.Action.setResponses(responses);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getUsagesLeft()) {\r\n            throw new BuilderError('Action creation could not be finished. UsagesLeft was not set.');\r\n        }\r\n\r\n        if (!this.Action.getMaximumUsages()) {\r\n            throw new BuilderError('Action creation could not be finished. MaximumUsages was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponses()) {\r\n            throw new BuilderError('Action creation could not be finished. Responses Array was not set.');\r\n        }\r\n\r\n        if (!this.Action.getInteractionType()) {\r\n            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');\r\n        }\r\n    }\r\n\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { Action } from './action.model';\r\n\r\n/**\r\n * RandomResponseAction allows the use of multiple Responses.\r\n * Each time this Action is triggered, the response will be selected randomly out of the passed array.\r\n */\r\nexport class RandomResponseAction extends Action {\r\n    private Responses: string[];\r\n\r\n    constructor() {\r\n        super();\r\n        // set normal response to avoid errors during build\r\n        this.setResponse(' ');\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        const rndm = Math.floor(Math.random() * this.Responses.length);\r\n        return this.Responses[rndm];\r\n    }\r\n\r\n    public reset(): void {\r\n    }\r\n\r\n    public getResponses(): string[] {\r\n        return this.Responses;\r\n    }\r\n\r\n    public setResponses(responses: string[]): void {\r\n        this.Responses = responses;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { RandomResponseAction } from '../../models/actions/random-response-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\n\r\n\r\nexport class RandomResponseActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<RandomResponseAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new RandomResponseAction());\r\n    }\r\n\r\n    public setResponses(responses: string[]): this {\r\n        if (!responses) {\r\n            throw new EvalError('Invalid Value for Responses. Has to be an Array of Strings.');\r\n        }\r\n\r\n        if (responses.length === 0) {\r\n            throw new EvalError('Responses Array may not be empty.');\r\n        }\r\n\r\n        this.Action.setResponses(responses);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getResponses()) {\r\n            throw new BuilderError('Action creation could not be finished. Responses Array was not set.');\r\n        }\r\n\r\n        if (!this.Action.getInteractionType()) {\r\n            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');\r\n        }\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { OneTimeAction } from '../../models/actions/one-time-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\n\r\nexport class OneTimeActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<OneTimeAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new OneTimeAction());\r\n    }\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n\r\n        if (!this.Action.getInteractionType()) {\r\n            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');\r\n        }\r\n    }\r\n}\r\n\r\n","import { GameBuilder } from './game.builder';\r\nimport { Game } from '../models/game.model';\r\nimport { Scene } from '../models/scene.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { ItemBuilder } from './item.builder';\r\nimport { ItemContainingBuilder } from './interfaces/item-containing.builder';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { ActionContainingBuilder } from './interfaces/action-containing.builder';\r\nimport { Action } from '../models/actions/action.model';\r\nimport { BaseActionBuilder } from './action-builders/base-action.builder';\r\nimport { ItemYieldingAction } from '../models/actions/item-yielding-action.model';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { GatewayActionBuilder } from './action-builders/gateway-action.builder';\r\nimport { ItemConsumingActionBuilder } from './action-builders/item-consuming-action.builder';\r\nimport { ItemRemovingActionBuilder } from './action-builders/item-removing-action.builder';\r\nimport { ItemYieldingActionBuilder } from './action-builders/item-yielding-action.builder';\r\nimport { MultiTimeActionBuilder } from './action-builders/multi-time-action.builder';\r\nimport { RandomResponseActionBuilder } from './action-builders/random-response-action.builder';\r\nimport { OneTimeActionBuilder } from './action-builders/one-time-action.builder';\r\n\r\nexport class SceneBuilder extends BaseBuilder implements ItemContainingBuilder, ActionContainingBuilder {\r\n    private GameBuilder: GameBuilder;\r\n    private Game: Game;\r\n    protected Scene: Scene;\r\n\r\n    constructor(gameBuilder: GameBuilder, game: Game, sceneId: number = null) {\r\n        super();\r\n        this.GameBuilder = gameBuilder;\r\n        this.Game = game;\r\n        this.Scene = new Scene(sceneId);\r\n    }\r\n\r\n    addActionToBuilder(action: Action): void {\r\n        this.Scene.getActions().push(action);\r\n\r\n        if (action instanceof ItemYieldingAction) {\r\n            this.GameBuilder.IdGeneratorService.addActionItemId(action as ItemYieldingAction);\r\n        }\r\n    }\r\n\r\n    public addAction<T extends Action>(action: T): BaseActionBuilder<T, SceneBuilder> {\r\n        return new BaseActionBuilder<T, SceneBuilder>(this, action);\r\n    }\r\n\r\n    public addGatewayAction(): GatewayActionBuilder<SceneBuilder> {\r\n        return new GatewayActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addItemConsumingAction(): ItemConsumingActionBuilder<SceneBuilder> {\r\n        return new ItemConsumingActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addItemRemovingAction(): ItemRemovingActionBuilder<SceneBuilder> {\r\n        return new ItemRemovingActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addItemYieldingAction(): ItemYieldingActionBuilder<SceneBuilder> {\r\n        return new ItemYieldingActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addMultiTimeAction(id?: number): MultiTimeActionBuilder<SceneBuilder> {\r\n        return new MultiTimeActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addOneTimeAction(): OneTimeActionBuilder<SceneBuilder> {\r\n        return new OneTimeActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addRandomResponseAction(): RandomResponseActionBuilder<SceneBuilder> {\r\n        return new RandomResponseActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    addItemToBuilder(item: InGameItem): void {\r\n        this.Scene.getItems().push(item);\r\n        if (item.getID()) {\r\n            this.GameBuilder.IdGeneratorService.addItemId(item);\r\n        }\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<SceneBuilder> {\r\n        return new ItemBuilder<SceneBuilder>(this, item);\r\n    }\r\n\r\n    public setName(name: string): this {\r\n        if (!name) {\r\n            throw new EvalError('Name was not set.');\r\n        }\r\n\r\n        this.Scene.setName(name);\r\n        return this;\r\n    }\r\n\r\n    public setDescription(description: string): this {\r\n        if (!description) {\r\n            throw new EvalError('Description was not set.');\r\n        }\r\n\r\n        this.Scene.setDescription(description);\r\n        return this;\r\n    }\r\n\r\n    public setActionNotRecognizedResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ActionNotRecognizedResponse was not set.');\r\n        }\r\n\r\n        this.Scene.setActionNotRecognizedResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setItemNotFoundResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemNotFoundResponse was not set.');\r\n        }\r\n\r\n        this.Scene.setItemNotFoundResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInvalidInputResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('InvalidInputResponse was not set.');\r\n        }\r\n\r\n        this.Scene.setInvalidInputResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public finish(): GameBuilder {\r\n\r\n        if (!this.Scene.getName()) {\r\n            throw new BuilderError('Scene creation could not be finished. Name was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getDescription()) {\r\n            throw new BuilderError('Scene creation could not be finished. Description was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getInvalidInputResponse()) {\r\n            throw new BuilderError('Scene creation could not be finished. InvalidInputResponse was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getItemNotFoundResponse()) {\r\n            throw new BuilderError('Scene creation could not be finished. ItemNotFoundResponse was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getActionNotRecognizedResponse()) {\r\n            throw new BuilderError('Scene creation could not be finished. ActionNotRecognizedResponse was not set.');\r\n        }\r\n\r\n        // TODO: each scene has to have a gateway action to another scene or be the last action\r\n\r\n        this.Game.getStage().addScene(this.Scene);\r\n        return this.GameBuilder;\r\n    }\r\n}\r\n","import { Game } from '../models/game.model';\r\nimport { Scene } from '../models/scene.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { Action } from '../models/actions/action.model';\r\nimport { ItemYieldingAction } from '../models/actions/item-yielding-action.model';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Assigns IDs to Objects by counting the amount of distinct types\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IDGeneratorService {\r\n    private typeArray: TypeCountContainer[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public generateIDs(game: Game): void {\r\n        this.processScenes(game.getStage().getScenes());\r\n        this.typeArray = [];\r\n    }\r\n\r\n\r\n    protected processScenes(scenes: Scene[]): void {\r\n        scenes.forEach(element => {\r\n            if (!element.getID()) {\r\n                element.setID(this.getIdFromTypeName(element.constructor.name));\r\n            } else {\r\n                this.setUsedIdForTypeName(element.constructor.name, element.getID());\r\n            }\r\n\r\n            this.processActions(element.getActions());\r\n            this.processItems(element.getItems());\r\n        });\r\n    }\r\n\r\n    protected processActions(actions: Action[]): void {\r\n        actions.forEach(element => {\r\n            if ((element instanceof ItemYieldingAction)\r\n                && !element.getItem().getID()) {\r\n                element.getItem().setID(this.getIdFromTypeName(element.constructor.name));\r\n            }\r\n        });\r\n    }\r\n\r\n    protected processItems(items: InGameItem[]): void {\r\n        items.forEach(element => {\r\n            if (!element.getID()) {\r\n                element.setID(this.getIdFromTypeName(element.constructor.name));\r\n            } else {\r\n                this.setUsedIdForTypeName(element.constructor.name, element.getID());\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getIdFromTypeName(name: string): number {\r\n        const index = this.typeArray.findIndex(element => {\r\n            return element.Name === name;\r\n        });\r\n\r\n        if (index !== -1) {\r\n            return this.typeArray[index].getAndIncrementCount();\r\n        }\r\n\r\n\r\n        return this.createTypeCountContainer(name).getAndIncrementCount();\r\n    }\r\n\r\n    public addItemId(item: InGameItem): void {\r\n        this.setUsedIdForTypeName(item.constructor.name, item.getID());\r\n    }\r\n\r\n    public addSceneId(scene: Scene): void {\r\n        this.setUsedIdForTypeName(scene.constructor.name, scene.getID());\r\n    }\r\n\r\n    public addActionItemId(action: ItemYieldingAction): void {\r\n        this.setUsedIdForTypeName(action.getItem().constructor.name, action.getItem().getID());\r\n    }\r\n\r\n    /**\r\n     * Add the passed id to the corresponding typeNameContainer's usedID Array\r\n     */\r\n    protected setUsedIdForTypeName(name: string, id: number): void {\r\n        const index = this.typeArray.findIndex(element => {\r\n            return element.Name === name;\r\n        });\r\n\r\n        if (index !== -1) {\r\n            this.typeArray[index].addUsedID(id);\r\n            return;\r\n        }\r\n\r\n        this.createTypeCountContainer(name).addUsedID(id);\r\n    }\r\n\r\n    protected createTypeCountContainer(name: string): TypeCountContainer {\r\n        const container = new TypeCountContainer(name);\r\n        this.typeArray.push(container);\r\n        return container;\r\n    }\r\n\r\n    protected getTypeCountContainers(): TypeCountContainer[] {\r\n        return this.typeArray;\r\n    }\r\n\r\n}\r\n\r\nexport class TypeCountContainer {\r\n    public Name: string;\r\n    public Count: number;\r\n    // keep track of the used ids for each type\r\n    public UsedIDs: number[];\r\n\r\n    constructor(name: string) {\r\n        this.Name = name;\r\n        this.Count = 0;\r\n        this.UsedIDs = [];\r\n    }\r\n\r\n    getAndIncrementCount(): number {\r\n        this.Count++;\r\n        while (this.isCurrentCountUsed()) {\r\n            this.Count++;\r\n        }\r\n        this.addUsedID(this.Count);\r\n        return this.Count;\r\n    }\r\n\r\n    addUsedID(usedId: number): void {\r\n        if (this.isIdUsed(usedId)) {\r\n            throw new EvalError('Id is already being used.');\r\n        }\r\n        this.UsedIDs.push(usedId);\r\n    }\r\n\r\n    isCurrentCountUsed(): boolean {\r\n        return this.UsedIDs.filter(element => element === this.Count).length > 0;\r\n    }\r\n\r\n    isIdUsed(id: number): boolean {\r\n        return !(!this.UsedIDs.find(element => element === id));\r\n    }\r\n}\r\n","import { Command } from '../models/command.model';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { CommandContainingBuilder } from './interfaces/command-containing.builder';\r\n\r\nexport class CommandBuilder<ReturnBuilderType extends CommandContainingBuilder> extends BaseBuilder {\r\n    protected Command: Command;\r\n    private Builder: ReturnBuilderType;\r\n\r\n    constructor(builder: ReturnBuilderType, command: Command = new Command()) {\r\n        super();\r\n        this.Command = command;\r\n        this.Builder = builder;\r\n    }\r\n\r\n    public setTrigger(trigger: string): this {\r\n        if (!trigger) {\r\n            throw new EvalError('Trigger was undefined.');\r\n        }\r\n\r\n        this.Command.setTrigger(trigger);\r\n        return this;\r\n    }\r\n\r\n    public setResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('Response was undefined.');\r\n        }\r\n\r\n        this.Command.setResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setResponseFunction(respFunc: () => string): this {\r\n        if (!respFunc) {\r\n            throw new EvalError('ResponseFunction was undefined.');\r\n        }\r\n\r\n        this.Command.setResponseFunction(respFunc);\r\n        return this;\r\n    }\r\n\r\n    public setUseTypeWritingAnimation(use: boolean): this {\r\n        if (use === undefined || use === null) {\r\n            throw new EvalError('UseTypeWritingAnimation was undefined.');\r\n        }\r\n\r\n        this.Command.setUseTypeWritingAnimation(use);\r\n        return this;\r\n    }\r\n\r\n    public setDescription(descr: string): this {\r\n        if (!descr) {\r\n            throw new EvalError('Description was undefined');\r\n        }\r\n\r\n        this.Command.setDescription(descr);\r\n        return this;\r\n    }\r\n\r\n    public finish(): ReturnBuilderType {\r\n        if (!this.Command.getTrigger()) {\r\n            throw new BuilderError('Could not create Command. Trigger was not set.');\r\n        }\r\n\r\n        if (!this.Command.getDescription()) {\r\n            throw new BuilderError('Could not create Command. Description was not set.');\r\n        }\r\n\r\n        if (!this.Command.getResponse() && !this.Command.getResponseFunction()) {\r\n            throw new BuilderError('Could not create Command. Response and ResponseFunction were not set. One of both is required.');\r\n        }\r\n\r\n        if (this.Command.getUseTypeWritingAnimation() === undefined || this.Command.getUseTypeWritingAnimation() === null) {\r\n            this.Command.setUseTypeWritingAnimation(true);\r\n        }\r\n\r\n        this.Builder.addCommandToBuilder(this.Command);\r\n\r\n        return this.Builder;\r\n    }\r\n\r\n}\r\n","import { Game } from '../models/game.model';\r\nimport { InventoryBuilder } from './inventory.builder';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { SceneBuilder } from './scene.builder';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { IDGeneratorService } from '../services/id-generator.service';\r\nimport { Command } from '../models/command.model';\r\nimport { CommandContainingBuilder } from './interfaces/command-containing.builder';\r\nimport { CommandBuilder } from './command.builder';\r\n\r\n/**\r\n * Use this class to chain the game building process.\r\n * Once your Game is build completely, call the 'build' method.\r\n */\r\nexport class GameBuilder extends BaseBuilder implements CommandContainingBuilder {\r\n    protected Game: Game;\r\n    public IdGeneratorService: IDGeneratorService;\r\n\r\n    constructor() {\r\n        super();\r\n        this.Game = new Game();\r\n        this.IdGeneratorService = new IDGeneratorService();\r\n    }\r\n\r\n    public addInventory(): InventoryBuilder {\r\n        return new InventoryBuilder(this, this.Game);\r\n    }\r\n\r\n    public addScene(id?: number): SceneBuilder {\r\n        return new SceneBuilder(this, this.Game, id);\r\n    }\r\n\r\n    public addCommand(): CommandBuilder<GameBuilder> {\r\n        return new CommandBuilder(this);\r\n    }\r\n\r\n    addCommandToBuilder(command: Command): this {\r\n        if (!command) {\r\n            throw new BuilderError('Command was undefined');\r\n        }\r\n\r\n        this.Game.getCommands().push(command);\r\n        return this;\r\n    }\r\n\r\n    public removeExistingCommands(): this {\r\n        this.Game.setCommands([]);\r\n        return this;\r\n    }\r\n\r\n    public setTitle(title: string): this {\r\n        if (!title) {\r\n            throw new EvalError('Title was undefined.');\r\n        }\r\n\r\n        this.Game.setTitle(title);\r\n        return this;\r\n    }\r\n\r\n    public setIntroduction(intro: string): this {\r\n        if (!intro) {\r\n            throw new EvalError('Introduction was undefined.');\r\n        }\r\n\r\n        this.Game.setIntroduction(intro);\r\n        return this;\r\n    }\r\n\r\n    public setItemNotFoundInInventoryResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemNotFoundInInventoryResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setItemNotFoundInInventoryResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setItemAddedToInventoryResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemAddedToInventoryResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setItemAddedToInventoryResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setGatewayTargetNotFoundResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('GatewayTargetNotFoundResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setGatewayTargetNotFoundResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInventoryEmptyResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('InventoryEmptyResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setInventoryEmptyResponse(response);\r\n        return this;\r\n    }\r\n\r\n\r\n    public finish(): Game {\r\n\r\n        if (!this.Game.getTitle()) {\r\n            throw new BuilderError('Game creation could not be finished. Title was not set.');\r\n        }\r\n\r\n        if (!this.Game.getIntroduction()) {\r\n            throw new BuilderError('Game creation could not be finished. Introduction was not set.');\r\n        }\r\n\r\n        if (!this.Game.getItemAddedToInventoryResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. ItemAddedToInventoryResponse was not set.');\r\n        }\r\n\r\n        if (!this.Game.getItemNotFoundInInventoryResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. ItemNotFoundInInventoryResponse was not set.');\r\n        }\r\n\r\n        if (!this.Game.getGatewayTargetNotFoundResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. GatewayTargetNotFoundResponse was not set.');\r\n        }\r\n\r\n        if (!this.Game.getInventoryEmptyResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. InventoryEmptyResponse was not set.');\r\n        }\r\n\r\n        if (this.Game.getScenesCount() <= 0) {\r\n            throw new BuilderError('Game creation could not be finished. No Scenes were found.');\r\n        }\r\n\r\n        this.generateUnassignedIds();\r\n        return this.Game;\r\n    }\r\n\r\n\r\n    protected generateUnassignedIds(): void {\r\n        this.IdGeneratorService.generateIDs(this.Game);\r\n    }\r\n}\r\n","export enum TextInputType {\r\n    UserInput = 'input',\r\n    Output = 'output'\r\n}\r\n","import { TextInputType } from './text-input.enum';\r\n\r\nexport class TextInput {\r\n    Value: string;\r\n    Type: TextInputType;\r\n\r\n    constructor(Value: string, Type: TextInputType) {\r\n        this.Value = Value;\r\n        this.Type = Type;\r\n    }\r\n}\r\n","export class ParseInputResult {\r\n    public Result: string;\r\n    public UseTypewriterAnimation: boolean;\r\n    public IsEndGameResult: boolean;\r\n\r\n    constructor(result: string, typewriteAnimation: boolean = true, isEndGameResult: boolean = false) {\r\n        this.Result = result;\r\n        this.UseTypewriterAnimation = typewriteAnimation;\r\n        this.IsEndGameResult = isEndGameResult;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Action } from '../models/actions/action.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { Game } from '../models/game.model';\r\n\r\nimport * as natural from 'natural';\r\nimport { InteractionType } from '../models/interactions/interaction-type.enum';\r\nimport { IClassificationTrainer } from './classification-trainer.interface';\r\nimport { ParseInputResult } from '../models/other/parse-input-result.model';\r\nconst language = 'EN';\r\n// see Penn Treebank Part-of-Speech Tags for more info on the tags\r\nconst defaultCategory = 'N';\r\nconst defaultCategoryCapitalized = 'NNP';\r\nconst nounCategories = ['N', 'NN', 'NNS', 'NNP', 'NNPS'];\r\nconst verbCategories = ['VB', 'VBD', 'VBG', 'VBN', 'VBO', 'VBZ'];\r\n\r\n/**\r\n * Helps to parse text input and call the corresponding action, returning a response\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class InputParserService {\r\n    private Game: Game;\r\n    private POSTagger: natural.BrillPOSTagger;\r\n    private Tokenizer: natural.WordTokenizer;\r\n    private Classifier: natural.BayesClassifier;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public initialize(trainer: IClassificationTrainer): Promise<boolean> {\r\n        return new Promise<boolean>((resolve) => {\r\n            this.Tokenizer = new natural.WordTokenizer();\r\n            const lexicon = new natural.Lexicon(language, defaultCategory, defaultCategoryCapitalized);\r\n            const ruleSet = new natural.RuleSet('EN');\r\n            this.POSTagger = new natural.BrillPOSTagger(lexicon, ruleSet);\r\n            this.Classifier = new natural.BayesClassifier();\r\n            trainer.trainClassifier(this.Classifier).then(() => resolve(true));\r\n        });\r\n    }\r\n\r\n\r\n    setGame(game: Game): void {\r\n        this.Game = game;\r\n    }\r\n\r\n    public parseInput(input: string): ParseInputResult {\r\n        const commandsResult = this.getCommandsResponse(input);\r\n        if (commandsResult) {\r\n            return commandsResult;\r\n        }\r\n\r\n        // because imperatives are not so common in the brown/penn corpus, we add a 'they ' before\r\n        // the whole sentence, in order to make it a legitimate sentence and identify imperatives as verbs instead of nouns\r\n        input = 'they ' + input;\r\n\r\n        const taggedTokens = this.POSTagger.tag(this.Tokenizer.tokenize(input)).taggedWords;\r\n        // we get verbs and nouns, because in many cases a noun may be mistaken to be a verb and vice versa e.g. (a) stick & (to) stick\r\n        const nounsAndVerbs = this.getNounsAndVerbsFromTokenizedInput(taggedTokens);\r\n\r\n        const interactionType = this.getInteractionType(input);\r\n\r\n        // no interaction type found\r\n        if (interactionType === undefined || interactionType === null) {\r\n            return new ParseInputResult(this.Game.getInvalidInputResponse());\r\n        }\r\n\r\n        switch (interactionType) {\r\n            case InteractionType.GO_TO:\r\n                // scenes/gateway actions\r\n                return this.getGoToResponse(nounsAndVerbs);\r\n            case InteractionType.LOOK_AT:\r\n                // item description\r\n                return this.getLookAtResponse(nounsAndVerbs);\r\n            case InteractionType.PICK_UP:\r\n                // add item to inventory\r\n                return this.getPickUpResponse(nounsAndVerbs);\r\n            case InteractionType.USE:\r\n                // use item in inventory or in scene\r\n                return this.getUseResponse(nounsAndVerbs);\r\n            default:\r\n                // do something\r\n                return this.getDoResponse(nounsAndVerbs);\r\n        }\r\n\r\n    }\r\n\r\n    protected getCommandsResponse(input: string): ParseInputResult {\r\n        const lowerCaseInput = input.toLocaleLowerCase();\r\n\r\n        let commandsResult: ParseInputResult;\r\n        this.Game.getCommands().some(command => {\r\n            if (command.getTrigger().toLocaleLowerCase() === lowerCaseInput) {\r\n                commandsResult = new ParseInputResult(command.activate(), command.getUseTypeWritingAnimation());\r\n                return true;\r\n            }\r\n        });\r\n\r\n        return commandsResult;\r\n    }\r\n\r\n    protected getGoToResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n        // get gateway actions\r\n        const gatewayActions = this.Game.getActionsInScene().filter(val => {\r\n            return val.getInteractionType() === InteractionType.GO_TO;\r\n        });\r\n\r\n        if (!gatewayActions || gatewayActions.length <= 0) {\r\n            result.Result = this.Game.getGatewayTargetNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const actionDistances = this.getActionDistancesFromNouns(relevantWords, gatewayActions);\r\n\r\n        if (!actionDistances || actionDistances.length <= 0) {\r\n            result.Result = this.Game.getGatewayTargetNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const action = actionDistances[0].Action;\r\n\r\n        result.Result = action.trigger();\r\n        result.IsEndGameResult = action.getIsEndGameAction();\r\n        return result;\r\n\r\n    }\r\n\r\n    protected getLookAtResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const itemDistances = this.getItemDistancesFromNouns(relevantWords,\r\n            this.Game.getItemsInScene(),\r\n            this.Game.getItemsInInventory());\r\n\r\n        if (!itemDistances || itemDistances.length <= 0) {\r\n            result.Result = this.Game.getItemNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        result.Result = itemDistances[0].Item.getDescription();\r\n        return result;\r\n    }\r\n\r\n    protected getPickUpResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const itemDistances = this.getItemDistancesFromNouns(relevantWords,\r\n            this.Game.getItemsInScene(),\r\n            undefined);\r\n\r\n        if (!itemDistances || itemDistances.length <= 0) {\r\n            result.Result = this.Game.getItemNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const item = itemDistances[0].Item;\r\n\r\n        if (!item.getCanPickUp()) {\r\n            result.Result = item.getCannotPickUpResponse();\r\n            return result;\r\n        }\r\n\r\n        // one cannot pick up an item, that has no usages left anymore\r\n        if (item.getUsagesLeft() <= 0) {\r\n            result.Result = item.getNoUsagesLeftResponse();\r\n            return result;\r\n        }\r\n\r\n        this.Game.addItemToInventory(item);\r\n\r\n        this.Game.removeItemFromScene(item);\r\n\r\n        result.Result = this.Game.getItemAddedToInventoryResponse();\r\n        return result;\r\n    }\r\n\r\n    protected getUseResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const itemDistances = this.getItemDistancesFromNouns(relevantWords,\r\n            this.Game.getItemsInScene(),\r\n            this.Game.getItemsInInventory());\r\n\r\n        if (!itemDistances || itemDistances.length <= 0) {\r\n            result.Result = this.Game.getItemNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const currentItem = itemDistances[0].Item;\r\n\r\n        if (!currentItem.CanUseFunction(currentItem, this.Game.getStage().getCurrentScene(), this.Game.getInventory())) {\r\n            result.Result = currentItem.getCannotUseItemResponse();\r\n            return result;\r\n        }\r\n\r\n        result.Result = currentItem.use();\r\n\r\n        // if the item was in the inventory and has no usages left anymore -> remove it from inventory\r\n        if (currentItem.WasPickedUp && currentItem.getUsagesLeft() <= 0) {\r\n            result.Result += `\\r\\n${currentItem.getNoUsagesLeftResponse()}`;\r\n            this.Game.removeItemFromInventory(currentItem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected getDoResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const actions = this.Game.getActionsInScene().filter(val => {\r\n            return val.getInteractionType() === InteractionType.DO;\r\n        });\r\n\r\n        if (!actions || actions.length <= 0) {\r\n            result.Result = this.Game.getActionNotRecognizedResponse();\r\n            return result;\r\n        }\r\n\r\n        const actionDistances = this.getActionDistancesFromNouns(relevantWords, actions);\r\n\r\n        if (!actionDistances || actionDistances.length <= 0) {\r\n            result.Result = this.Game.getActionNotRecognizedResponse();\r\n            return result;\r\n        }\r\n\r\n        const action = actionDistances[0].Action;\r\n\r\n        result.Result = action.trigger();\r\n        result.IsEndGameResult = action.getIsEndGameAction();\r\n        return result;\r\n    }\r\n\r\n    protected getNounsAndVerbsFromTokenizedInput(taggedTokens: TaggedToken[]): any {\r\n        return taggedTokens.reduce<string[]>((result, token) => {\r\n            if (nounCategories.includes(token.tag) || verbCategories.includes(token.tag)) {\r\n                result.push(token.token);\r\n            }\r\n\r\n            return result;\r\n        }, []);\r\n    }\r\n\r\n    private getItemDistancesFromNouns(relevantWords: string[], sceneItems: InGameItem[], inventoryItems: InGameItem[]): ItemDistance[] {\r\n        const itemDistances: ItemDistance[] = [];\r\n\r\n        let items = [];\r\n        if (sceneItems) {\r\n            items = items.concat(sceneItems);\r\n        }\r\n\r\n        if (inventoryItems) {\r\n            items = items.concat(inventoryItems);\r\n        }\r\n\r\n        items.map(val => {\r\n            const taggedName = this.POSTagger.tag(this.Tokenizer.tokenize(val.Name)).taggedWords;\r\n            taggedName.map(name => {\r\n                relevantWords.map(input => {\r\n                    const distance = natural.DamerauLevenshteinDistance(input,\r\n                        name.token, { transposition_cost: 0 });\r\n                    if (distance <= 1) {\r\n                        itemDistances.push(new ItemDistance(val, distance));\r\n                    }\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n        return itemDistances.sort(val => val.Distance);\r\n    }\r\n\r\n    private getActionDistancesFromNouns(relevantWords: string[], actions: Action[]): ActionDistance[] {\r\n        const actionDistances: ActionDistance[] = [];\r\n\r\n        actions.map(val => {\r\n            const taggedTrigger = this.POSTagger.tag(this.Tokenizer.tokenize(val.getTrigger())).taggedWords;\r\n\r\n            taggedTrigger.map(trigger => {\r\n                relevantWords.map(input => {\r\n                    const distance = natural.DamerauLevenshteinDistance(input,\r\n                        trigger.token, { transposition_cost: 0 });\r\n                    if (distance <= 1) {\r\n                        actionDistances.push(new ActionDistance(val, distance));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        return actionDistances.sort(val => val.Distance);\r\n    }\r\n\r\n    protected getInteractionType(input: string): InteractionType {\r\n        const result = this.Classifier.classify(input);\r\n        return this.getInteractionTypeFromClassificationResult(result);\r\n    }\r\n\r\n    public getInteractionTypeFromClassificationResult(result: string): InteractionType {\r\n        switch (result) {\r\n            case 'use':\r\n                return InteractionType.USE;\r\n            case 'look_at':\r\n                return InteractionType.LOOK_AT;\r\n            case 'go_to':\r\n                return InteractionType.GO_TO;\r\n            case 'pick_up':\r\n                return InteractionType.PICK_UP;\r\n            case 'do':\r\n                return InteractionType.DO;\r\n            default:\r\n                return InteractionType.DO;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass ActionTag {\r\n    public Action: Action;\r\n    public Tag: string;\r\n\r\n    public constructor(action: Action, tag: string) {\r\n        this.Action = action;\r\n        this.Tag = tag;\r\n    }\r\n}\r\n\r\nclass ActionDistance {\r\n    public Action: Action;\r\n    public Distance: number;\r\n\r\n    public constructor(action: Action, distance: number) {\r\n        this.Action = action;\r\n        this.Distance = distance;\r\n    }\r\n}\r\n\r\nclass ItemDistance {\r\n    public Item: InGameItem;\r\n    public Distance: number;\r\n\r\n    public constructor(item: InGameItem, distance: number) {\r\n        this.Item = item;\r\n        this.Distance = distance;\r\n    }\r\n}\r\n\r\nclass ItemTag {\r\n    public Item: InGameItem;\r\n    public Tag: string;\r\n\r\n    public constructor(item: InGameItem, tag: string) {\r\n        this.Item = item;\r\n        this.Tag = tag;\r\n    }\r\n}\r\n\r\nclass TaggedToken {\r\n    token: string;\r\n    tag: string;\r\n    distance: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IClassificationTrainer } from './classification-trainer.interface';\r\nimport * as natural from 'natural';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ClassificationTrainer implements IClassificationTrainer {\r\n    trainClassifier(classifier: natural.BayesClassifier): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            classifier.addDocument('use keys', 'use');\r\n            classifier.addDocument('use knob', 'use');\r\n            classifier.addDocument('use old pen', 'use');\r\n            classifier.addDocument('use rusty knife', 'use');\r\n            classifier.addDocument('open door', 'use');\r\n            classifier.addDocument('open oven', 'use');\r\n            classifier.addDocument('open window', 'use');\r\n            classifier.addDocument('interact with animal', 'use');\r\n            classifier.addDocument('interact person', 'use');\r\n            classifier.addDocument('close door', 'use');\r\n            classifier.addDocument('close chest', 'use');\r\n            classifier.addDocument('shut window', 'use');\r\n            classifier.addDocument('shut the lid', 'use');\r\n            classifier.addDocument('drink soda', 'use');\r\n            classifier.addDocument('drink water', 'use');\r\n            classifier.addDocument('eat mushrooms', 'use');\r\n            classifier.addDocument('eat food', 'use');\r\n\r\n            classifier.addDocument('look at house', 'look_at');\r\n            classifier.addDocument('look at the chair', 'look_at');\r\n            classifier.addDocument('inspect door', 'look_at');\r\n            classifier.addDocument('inspect knife', 'look_at');\r\n            classifier.addDocument('check window', 'look_at');\r\n            classifier.addDocument('check fireplace', 'look_at');\r\n            classifier.addDocument('analyze notes', 'look_at');\r\n            classifier.addDocument('analyze keys', 'look_at');\r\n            classifier.addDocument('read book', 'look_at');\r\n            classifier.addDocument('read letter', 'look_at');\r\n            classifier.addDocument('observe darkness', 'look_at');\r\n            classifier.addDocument('observe forrest', 'look_at');\r\n\r\n\r\n            classifier.addDocument('go inside', 'go_to');\r\n            classifier.addDocument('go outside', 'go_to');\r\n            classifier.addDocument('enter building', 'go_to');\r\n            classifier.addDocument('enter home', 'go_to');\r\n            classifier.addDocument('leave house', 'go_to');\r\n            classifier.addDocument('leave hut', 'go_to');\r\n            classifier.addDocument('run away', 'go_to');\r\n            classifier.addDocument('run into the darkness', 'go_to');\r\n            classifier.addDocument('walk to place', 'go_to');\r\n            classifier.addDocument('walk to the shed', 'go_to');\r\n            classifier.addDocument('walk into the bar', 'go_to');\r\n            classifier.addDocument('go to Peter', 'go_to');\r\n            classifier.addDocument('go in to the forrest', 'go_to');\r\n            classifier.addDocument('go into the cellar', 'go_to');\r\n\r\n\r\n            classifier.addDocument('take keys', 'pick_up');\r\n            classifier.addDocument('take up book', 'pick_up');\r\n            classifier.addDocument('take notebook', 'pick_up');\r\n            classifier.addDocument('pick up a lighter', 'pick_up');\r\n            classifier.addDocument('pick up leash', 'pick_up');\r\n            classifier.addDocument('put something into bag', 'pick_up');\r\n            classifier.addDocument('put water bottle into inventory', 'pick_up');\r\n            classifier.addDocument('gather mushrooms', 'pick_up');\r\n            classifier.addDocument('collect stones', 'pick_up');\r\n            classifier.addDocument('acquire medal', 'pick_up');\r\n\r\n            classifier.addDocument('dance', 'do');\r\n            classifier.addDocument('sit', 'do');\r\n            classifier.addDocument('stand', 'do');\r\n            classifier.addDocument('sleep', 'do');\r\n            classifier.addDocument('fish', 'do');\r\n            classifier.addDocument('do', 'do');\r\n            classifier.addDocument('write', 'do');\r\n            classifier.addDocument('read', 'do');\r\n            classifier.addDocument('find', 'do');\r\n            classifier.addDocument('work', 'do');\r\n            classifier.addDocument('try', 'do');\r\n            classifier.addDocument('feel', 'do');\r\n            classifier.addDocument('create', 'do');\r\n            classifier.addDocument('speak', 'do');\r\n            classifier.addDocument('talk', 'do');\r\n            classifier.addDocument('offer', 'do');\r\n            classifier.addDocument('buy', 'do');\r\n            classifier.addDocument('kill', 'do');\r\n            classifier.addDocument('beat', 'do');\r\n            classifier.addDocument('harm', 'do');\r\n            classifier.addDocument('jump', 'do');\r\n            classifier.addDocument('sell', 'do');\r\n            classifier.addDocument('pull', 'do');\r\n            classifier.addDocument('push', 'do');\r\n            classifier.addDocument('put', 'do');\r\n\r\n            classifier.events.on('trainedWithDocument', () => resolve());\r\n\r\n            classifier.train();\r\n            resolve();\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","import { Game } from '../game.model';\r\n\r\nexport class GameResetEvent {\r\n\r\n    constructor(game: Game) {\r\n    }\r\n}\r\n","import { Game } from '../game.model';\r\n\r\nexport class GameEndEvent {\r\n\r\n    constructor(game: Game) {\r\n    }\r\n}\r\n","export class GameStartEvent {\r\n\r\n}\r\n","import { Component, OnInit, ElementRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { TextInputType } from '../models/other/text-input.enum';\r\nimport { TextInput } from '../models/other/text-input.model';\r\nimport { Game } from '../models/game.model';\r\nimport { GameBuilder } from '../builder/game.builder';\r\nimport { InputParserService } from '../services/input-parser.service';\r\nimport { ClassificationTrainer } from '../services/classification-trainer.service';\r\nimport { GameResetEvent } from '../models/events/game-reset.event';\r\nimport { GameEndEvent } from '../models/events/game-end.event';\r\nimport { GameStartEvent } from '../models/events/game-start.event';\r\nimport { InteractionType } from '../models/interactions/interaction-type.enum';\r\nimport { IClassificationTrainer } from '../services/classification-trainer.interface';\r\nimport { GameError } from '../models/errors/game.error';\r\n\r\n/**\r\n * Main Component, that contains the input and output of the game.\r\n */\r\n@Component({\r\n  selector: 'tas-text-adventure',\r\n  templateUrl: './text-adventure.component.html',\r\n  styleUrls: ['./text-adventure.component.scss']\r\n})\r\nexport class TextAdventureComponent implements OnInit {\r\n  @ViewChild('input', { static: true }) inputElement: ElementRef;\r\n\r\n  OutputArray: TextInput[] = [];\r\n  IsLoading = false;\r\n  @Input() UseTypewritingAnimation = true;\r\n  @Input() TypewriterSpeed = 40;\r\n\r\n  @Input() Game: Game;\r\n  @Input() ClassificationTrainer: IClassificationTrainer;\r\n\r\n  @Output() OnGameStartEvent: EventEmitter<GameStartEvent> = new EventEmitter<GameStartEvent>();\r\n  @Output() OnGameResetEvent: EventEmitter<GameResetEvent> = new EventEmitter<GameResetEvent>();\r\n  @Output() OnGameEndEvent: EventEmitter<GameEndEvent> = new EventEmitter<GameEndEvent>();\r\n\r\n  GameBuilder: GameBuilder;\r\n\r\n  InputForm: FormGroup = new FormGroup(\r\n    {\r\n      userInput: new FormControl({\r\n        value: '',\r\n        disabled: this.IsLoading\r\n      }, [\r\n        Validators.required\r\n      ])\r\n    }\r\n  );\r\n\r\n  constructor(private inputParserService: InputParserService) {\r\n    if (!this.ClassificationTrainer) {\r\n      inputParserService.initialize(new ClassificationTrainer());\r\n    }\r\n    else {\r\n      inputParserService.initialize(this.ClassificationTrainer);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.startLoading();\r\n    if (!this.Game) {\r\n      throw new GameError('Game not found.');\r\n    }\r\n    this.startGame();\r\n  }\r\n\r\n  OnSubmit(): void {\r\n    this.startLoading();\r\n    const inputString = this.userInput.value;\r\n    if (!inputString) {\r\n      this.stopLoading();\r\n      return;\r\n    }\r\n    this.printInput(inputString);\r\n    this.userInput.setValue('');\r\n\r\n    const parseResult = this.inputParserService.parseInput(inputString);\r\n\r\n    this.printOutput(parseResult.Result, parseResult.UseTypewriterAnimation).then(() => this.stopLoading());\r\n  }\r\n\r\n  OnGameReset(): void {\r\n    this.OnGameResetEvent.emit(new GameResetEvent(this.Game));\r\n  }\r\n\r\n  OnGameEnd(): void {\r\n    this.OnGameEndEvent.emit(new GameEndEvent(this.Game));\r\n  }\r\n\r\n  private get userInput(): FormControl {\r\n    return this.InputForm.get('userInput') as FormControl;\r\n  }\r\n\r\n  private startLoading(): void {\r\n    this.IsLoading = true;\r\n    this.userInput.disable();\r\n  }\r\n\r\n  private stopLoading(): void {\r\n    this.IsLoading = false;\r\n    this.userInput.enable();\r\n    setTimeout(() => {\r\n      this.inputElement.nativeElement.focus();\r\n    });\r\n  }\r\n\r\n  private startGame(): void {\r\n    this.inputParserService.setGame(this.Game);\r\n    this.OnGameStartEvent.emit(new GameStartEvent());\r\n    this.printOutput(this.Game.getTitle()).then(() => this.printOutput(this.Game.getIntroduction())).then(() => this.stopLoading());\r\n  }\r\n\r\n  private printOutput(output: string, useTypewriteAnimationOnOutput: boolean = true): Promise<void> {\r\n    return new Promise<void>((outerResolve) => {\r\n      if (useTypewriteAnimationOnOutput && this.UseTypewritingAnimation) {\r\n        const outputLines = output.split('\\r\\n');\r\n        // we create a promise chain, in order to avoid printing new lines written as '<br>'\r\n        let outputPromise = new Promise((resolve) => resolve());\r\n        for (const singleLine of outputLines) {\r\n          outputPromise = outputPromise.then(() => this.printLineAnimated(singleLine));\r\n        }\r\n        outputPromise = outputPromise.then(outerResolve);\r\n      } else {\r\n        output = output.split('\\r\\n').join('<br>');\r\n        this.OutputArray.push(new TextInput(output, TextInputType.Output));\r\n        outerResolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  private printLineAnimated(line: string): Promise<void> {\r\n    return new Promise<void>((resolve) => {\r\n      this.OutputArray.push(new TextInput('', TextInputType.Output));\r\n      // exit the recursion with the \"resolve\" function of the promise\r\n      this.typewriteOutput(0, line, this.OutputArray, resolve);\r\n    });\r\n  }\r\n\r\n  private typewriteOutput(i: number, output: string, outputArray: TextInput[], resolveFunction): void {\r\n    if (i >= output.length) {\r\n      resolveFunction();\r\n    }\r\n    const char = output.charAt(i);\r\n    outputArray[outputArray.length - 1].Value += char;\r\n    i++;\r\n    setTimeout(() => {\r\n      this.typewriteOutput(i, output, this.OutputArray, resolveFunction);\r\n    }, this.TypewriterSpeed);\r\n  }\r\n\r\n  private printInput(input: string): void {\r\n    this.OutputArray.push(new TextInput(input, TextInputType.UserInput));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { TextAdventureComponent } from './text-adventure.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    TextAdventureComponent\r\n  ],\r\n  exports: [\r\n    TextAdventureComponent\r\n  ],\r\n})\r\nexport class TextAdventureModule { }\r\n","/*\r\n * Public API Surface of text-adventure-sama\r\n */\r\n\r\n /* Builders */\r\nexport * from './lib/builder/game.builder';\r\nexport * from './lib/builder/command.builder';\r\nexport * from './lib/builder/inventory.builder';\r\nexport * from './lib/builder/item.builder';\r\nexport * from './lib/builder/scene.builder';\r\n\r\n/* Models */\r\nexport * from './lib/models/game.model';\r\nexport * from './lib/models/interactions/interaction-type.enum';\r\nexport * from './lib/models/scene.model';\r\nexport * from './lib/models/command.model';\r\nexport * from './lib/models/inventory.model';\r\nexport * from './lib/models/item.model';\r\nexport * from './lib/models/stage.model';\r\n\r\n/* ClassificationTrainerInterface */\r\nexport * from './lib/services/classification-trainer.interface';\r\n\r\n\r\n/* Component & Module */\r\nexport * from './lib/text-adventure/text-adventure.module';\r\nexport * from './lib/text-adventure/text-adventure.component';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BaseBuilder as ɵa} from './lib/builder/base.builder';\nexport {InGameItem as ɵb} from './lib/models/Item.model';\nexport {InputParserService as ɵc} from './lib/services/input-parser.service';"],"names":["_.cloneDeep","InGameItem","natural.WordTokenizer","natural.Lexicon","natural.RuleSet","natural.BrillPOSTagger","natural.BayesClassifier","natural.DamerauLevenshteinDistance"],"mappings":"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"}