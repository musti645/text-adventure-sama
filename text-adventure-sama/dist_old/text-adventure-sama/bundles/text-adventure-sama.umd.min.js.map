{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/text-adventure-sama/src/lib/models/command.model.ts","../../../projects/text-adventure-sama/src/lib/services/item-event.service.ts","../../../projects/text-adventure-sama/src/lib/models/inventory.model.ts","../../../projects/text-adventure-sama/src/lib/models/errors/game.error.ts","../../../projects/text-adventure-sama/src/lib/services/scene-event.service.ts","../../../projects/text-adventure-sama/src/lib/models/interactions/interaction-type.enum.ts","../../../projects/text-adventure-sama/src/lib/models/stage.model.ts","../../../projects/text-adventure-sama/src/lib/models/game.model.ts","../../../projects/text-adventure-sama/src/lib/builder/base.builder.ts","../../../projects/text-adventure-sama/src/lib/models/Item.model.ts","../../../projects/text-adventure-sama/src/lib/models/errors/builder.error.ts","../../../projects/text-adventure-sama/src/lib/builder/item.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/inventory.builder.ts","../../../projects/text-adventure-sama/src/lib/models/scene.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/base-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/actions/action.model.ts","../../../projects/text-adventure-sama/src/lib/models/actions/one-time-action.model.ts","../../../projects/text-adventure-sama/src/lib/models/events/item-yielding-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/item-yielding-action.model.ts","../../../projects/text-adventure-sama/src/lib/models/events/gateway-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/gateway-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/gateway-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/events/item-consuming-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/item-consuming-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/item-consuming-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/events/item-removing-action.event.ts","../../../projects/text-adventure-sama/src/lib/models/actions/item-removing-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/item-removing-action.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/item-yielding-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/actions/multi-time-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/multi-time-action.builder.ts","../../../projects/text-adventure-sama/src/lib/models/actions/random-response-action.model.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/random-response-action.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/action-builders/one-time-action.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/scene.builder.ts","../../../projects/text-adventure-sama/src/lib/services/id-generator.service.ts","../../../projects/text-adventure-sama/src/lib/models/other/text-input.enum.ts","../../../projects/text-adventure-sama/src/lib/builder/command.builder.ts","../../../projects/text-adventure-sama/src/lib/builder/game.builder.ts","../../../projects/text-adventure-sama/src/lib/models/other/text-input.model.ts","../../../projects/text-adventure-sama/src/lib/models/other/parse-input-result.model.ts","../../../projects/text-adventure-sama/src/lib/services/input-parser.service.ts","../../../projects/text-adventure-sama/src/lib/services/classification-trainer.service.ts","../../../projects/text-adventure-sama/src/lib/models/events/game-reset.event.ts","../../../projects/text-adventure-sama/src/lib/models/events/game-end.event.ts","../../../projects/text-adventure-sama/src/lib/models/events/game-start.event.ts","../../../projects/text-adventure-sama/src/lib/text-adventure/text-adventure.component.ts","../../../projects/text-adventure-sama/src/lib/text-adventure/text-adventure.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","Command","activate","Response","ResponseFunction","setTrigger","trigger","Trigger","getTrigger","setResponse","response","getResponse","setResponseFunction","func","getResponseFunction","setUseTypeWritingAnimation","use","UseTypeWritingAnimation","getUseTypeWritingAnimation","getDescription","Description","setDescription","desc","ItemEventService","ItemConsumingActionEventSource","Subject","ItemYieldingActionEventSource","ItemRemovingActionEventSource","ItemConsumingActionEvent$","asObservable","ItemYieldingActionEvent$","ItemRemovingActionEvent$","getInstance","Instance","consumeItem","event","yieldItem","removeItem","undefined","Injectable","args","providedIn","Inventory","_this","Items","subscribe","OnItemYield","OnItemRemove","OnItemConsume","ResetItemUsagesToMaximum","Item","resetUsages","AmountOfItems","addItem","_.cloneDeep","removeItemFromInventory","getID","findItemsById","id","filter","findItemsByName","name","getName","getItemCount","toAdd","WasPickedUp","push","getItems","GameError","_super","Error","SceneEventService","GatewayActionEventSource","GatewayActionEvent$","changeScene","InteractionType","Stage","ScenePath","Scenes","OnSceneChange","goToScene","TargetSceneID","getCurrentScene","CurrentScene","nextScene","find","addScene","getScenesCount","getScenes","Game","Commands","initializeCommands","helpCommand","commandsHelp","forEach","command","inventoryCommand","InventoryEmptyResponse","inventoryContents","item","sceneCommand","description","_b","_c","getInSceneDescription","getStage","getInventory","setInventory","inventory","getTitle","Title","setTitle","title","getIntroduction","Introduction","setIntroduction","intro","getCommands","setCommands","commands","getItemNotFoundResponse","getInvalidInputResponse","getActionNotRecognizedResponse","getSceneDescription","getItemNotFoundInInventoryResponse","ItemNotFoundInInventoryResponse","setItemNotFoundInInventoryResponse","getActionsInScene","getActions","getItemsInScene","getItemsInInventory","removeItemFromScene","addItemToInventory","getItemAddedToInventoryResponse","ItemAddedToInventoryResponse","setItemAddedToInventoryResponse","getGatewayTargetNotFoundResponse","GatewayTargetNotFoundResponse","setGatewayTargetNotFoundResponse","getInventoryEmptyResponse","setInventoryEmptyResponse","InGameItem","ID","CanPickUp","CanUseFunction","currentScene","UsagesLeft","ItemUsedResponse","NoUsagesLeftResponse","MaximumUsages","setID","setName","Name","setMaximumUsages","usages","getMaximumUsages","setUsagesLeft","getUsagesLeft","setItemUsedResponse","getItemUsedResponse","setNoUsagesLeftResponse","getNoUsagesLeftResponse","getCanPickUp","setCanPickUp","setCannotPickUpResponse","CannotPickUpResponse","getCannotPickUpResponse","InSceneDescription","setInSceneDescription","descr","setCanUseFunction","setCannotUseItemResponse","CannotUseItemResponse","getCannotUseItemResponse","getCanUseFunction","BuilderError","ItemBuilder","builder","requireInSceneDescription","Builder","RequireInSceneDescription","EvalError","maxUsages","usagesLeft","IsCanUseFunctionReplaced","finish","addItemToBuilder","BaseBuilder","InventoryBuilder","gameBuilder","game","GameBuilder","IdGeneratorService","addItemId","Scene","Actions","ActionNotRecognizedResponse","setActionNotRecognizedResponse","ItemNotFoundResponse","setItemNotFoundResponse","InvalidInputResponse","setInvalidInputResponse","index","indexOf","splice","BaseActionBuilder","action","Action","setEndGameAction","setIsEndGameAction","onFinish","addActionToBuilder","IsEndGameAction","setInteractionType","type","endGameAction","getIsEndGameAction","getInteractionType","OneTimeAction","DO","WasTriggered","ResponseAfterUse","reset","getWasTriggered","setWasTriggered","triggered","getResponseAfterUse","setResponseAfterUse","ItemYieldingActionEvent","getItem","getAmountOfItems","getResetItemUsagesToMaximum","ItemYieldingAction","setItem","setAmountOfItems","amount","setResetItemUsagesToMaximum","GatewayActionEvent","getTargetSceneId","TargetSceneName","getTargetSceneName","GatewayAction","GO_TO","TargetSceneId","setTargetSceneId","setTargetSceneName","GatewayActionBuilder","ItemConsumingActionEvent","ItemConsumingAction","USE","ItemConsumingActionBuilder","setWasTrigered","wasTriggered","values","includes","ItemRemovingActionEvent","ItemRemovingAction","ItemRemovingActionBuilder","ItemYieldingActionBuilder","MultiTimeAction","responseString","Responses","getResponses","setResponses","responses","MultiTimeActionBuilder","count","RandomResponseAction","rndm","Math","floor","random","RandomResponseActionBuilder","OneTimeActionBuilder","SceneBuilder","sceneId","addActionItemId","addAction","addGatewayAction","addItemConsumingAction","addItemRemovingAction","addItemYieldingAction","addMultiTimeAction","addOneTimeAction","addRandomResponseAction","IDGeneratorService","typeArray","generateIDs","processScenes","scenes","element","setUsedIdForTypeName","getIdFromTypeName","processActions","processItems","actions","items","findIndex","getAndIncrementCount","createTypeCountContainer","addSceneId","scene","addUsedID","container","TypeCountContainer","getTypeCountContainers","TextInputType","Count","UsedIDs","isCurrentCountUsed","usedId","isIdUsed","CommandBuilder","respFunc","addCommandToBuilder","addInventory","addCommand","removeExistingCommands","generateUnassignedIds","TextInput","Value","Type","ParseInputResult","result","typewriteAnimation","isEndGameResult","Result","UseTypewriterAnimation","IsEndGameResult","nounCategories","verbCategories","InputParserService","initialize","trainer","Promise","resolve","Tokenizer","natural.WordTokenizer","lexicon","natural.Lexicon","ruleSet","natural.RuleSet","POSTagger","natural.BrillPOSTagger","Classifier","natural.BayesClassifier","trainClassifier","then","setGame","parseInput","input","commandsResult","getCommandsResponse","taggedTokens","tag","tokenize","taggedWords","nounsAndVerbs","getNounsAndVerbsFromTokenizedInput","interactionType","getGoToResponse","LOOK_AT","getLookAtResponse","PICK_UP","getPickUpResponse","getUseResponse","getDoResponse","lowerCaseInput","toLocaleLowerCase","some","relevantWords","gatewayActions","val","actionDistances","getActionDistancesFromNouns","itemDistances","getItemDistancesFromNouns","currentItem","reduce","token","sceneItems","inventoryItems","concat","map","distance","natural.DamerauLevenshteinDistance","transposition_cost","ItemDistance","sort","Distance","ActionDistance","classify","getInteractionTypeFromClassificationResult","ClassificationTrainer","classifier","addDocument","events","on","train","GameResetEvent","GameEndEvent","GameStartEvent","TextAdventureComponent","inputParserService","OutputArray","IsLoading","UseTypewritingAnimation","TypewriterSpeed","OnGameStartEvent","EventEmitter","OnGameResetEvent","OnGameEndEvent","InputForm","FormGroup","userInput","FormControl","disabled","Validators","required","ngOnInit","startLoading","startGame","OnSubmit","inputString","printInput","setValue","parseResult","printOutput","stopLoading","OnGameReset","emit","OnGameEnd","defineProperty","get","disable","enable","setTimeout","inputElement","nativeElement","focus","output","useTypewriteAnimationOnOutput","outerResolve","outputLines","split","outputPromise","singleLine","printLineAnimated","outputLines_1","outputLines_1_1","join","Output","line","typewriteOutput","outputArray","resolveFunction","char","charAt","UserInput","Component","selector","template","ViewChild","static","Input","NgModule","imports","ReactiveFormsModule","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * Global commands within the game that are evaluated before all of the other elements\r\n */\r\nexport class Command {\r\n    private Trigger: string;\r\n    private Response: string;\r\n    private ResponseFunction: () => string;\r\n    private UseTypeWritingAnimation: boolean;\r\n    private Description: string;\r\n\r\n    public activate(): string {\r\n        if (this.Response) {\r\n            return this.Response;\r\n        } else {\r\n            return this.ResponseFunction();\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public setTrigger(trigger: string): void {\r\n        this.Trigger = trigger;\r\n    }\r\n\r\n    public getTrigger(): string {\r\n        return this.Trigger;\r\n    }\r\n\r\n    public setResponse(response: string): void {\r\n        this.Response = response;\r\n    }\r\n\r\n    public getResponse(): string {\r\n        return this.Response;\r\n    }\r\n\r\n    public setResponseFunction(func: () => string): void {\r\n        this.ResponseFunction = func;\r\n    }\r\n\r\n    public getResponseFunction(): () => string {\r\n        return this.ResponseFunction;\r\n    }\r\n\r\n    public setUseTypeWritingAnimation(use: boolean): void {\r\n        this.UseTypeWritingAnimation = use;\r\n    }\r\n\r\n    public getUseTypeWritingAnimation(): boolean {\r\n        return this.UseTypeWritingAnimation;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.Description;\r\n    }\r\n\r\n    public setDescription(desc: string): void {\r\n        this.Description = desc;\r\n    }\r\n\r\n}\r\n","import { ItemConsumingActionEvent, IItemConsumingEventService } from '../models/events/item-consuming-action.event';\r\nimport { ItemYieldingActionEvent, IItemYieldingEventService } from '../models/events/item-yielding-action.event';\r\nimport { ItemRemovingActionEvent, IItemRemovingEventService } from '../models/events/item-removing-action.event';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Singleton Service handling Item Events\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ItemEventService implements IItemRemovingEventService,\r\n    IItemYieldingEventService,\r\n    IItemConsumingEventService {\r\n\r\n    private constructor() {\r\n\r\n    }\r\n\r\n    private static Instance: ItemEventService = undefined;\r\n\r\n    private ItemConsumingActionEventSource = new Subject<ItemConsumingActionEvent>();\r\n    private ItemYieldingActionEventSource = new Subject<ItemYieldingActionEvent>();\r\n    private ItemRemovingActionEventSource = new Subject<ItemRemovingActionEvent>();\r\n\r\n    public ItemConsumingActionEvent$ = this.ItemConsumingActionEventSource.asObservable();\r\n    public ItemYieldingActionEvent$ = this.ItemYieldingActionEventSource.asObservable();\r\n    public ItemRemovingActionEvent$ = this.ItemRemovingActionEventSource.asObservable();\r\n\r\n    public static getInstance(): ItemEventService {\r\n        if (!ItemEventService.Instance) {\r\n            ItemEventService.Instance = new ItemEventService();\r\n        }\r\n\r\n        return ItemEventService.Instance;\r\n    }\r\n\r\n    public consumeItem(event: ItemConsumingActionEvent): void {\r\n        this.ItemConsumingActionEventSource.next(event);\r\n    }\r\n\r\n    public yieldItem(event: ItemYieldingActionEvent): void {\r\n        this.ItemYieldingActionEventSource.next(event);\r\n    }\r\n\r\n    public removeItem(event: ItemRemovingActionEvent): void {\r\n        this.ItemRemovingActionEventSource.next(event);\r\n    }\r\n\r\n}\r\n","import { InGameItem } from './Item.model';\r\nimport { ItemEventService } from '../services/item-event.service';\r\nimport { IItemConsumingEventListener, ItemConsumingActionEvent } from '../models/events/item-consuming-action.event';\r\nimport { IItemRemovingEventListener, ItemRemovingActionEvent } from '../models/events/item-removing-action.event';\r\nimport { IItemYieldingEventListener, ItemYieldingActionEvent } from '../models/events/item-yielding-action.event';\r\nimport * as _ from 'lodash';\r\n\r\nexport class Inventory implements IItemConsumingEventListener,\r\n    IItemRemovingEventListener,\r\n    IItemYieldingEventListener {\r\n    private Items: InGameItem[];\r\n\r\n    constructor() {\r\n        this.Items = [];\r\n\r\n        ItemEventService.getInstance().ItemYieldingActionEvent$.subscribe((event) => this.OnItemYield(event));\r\n        ItemEventService.getInstance().ItemRemovingActionEvent$.subscribe((event) => this.OnItemRemove(event));\r\n        ItemEventService.getInstance().ItemConsumingActionEvent$.subscribe((event) => this.OnItemConsume(event));\r\n    }\r\n\r\n    OnItemYield(event: ItemYieldingActionEvent): void {\r\n        if (event.ResetItemUsagesToMaximum) {\r\n            event.Item.resetUsages();\r\n        }\r\n\r\n        for (let i = 0; i < event.AmountOfItems; i++) {\r\n            // create a deep copy of the item (we also need the functions to be copied)\r\n            this.addItem(_.cloneDeep(event.Item));\r\n        }\r\n    }\r\n\r\n    OnItemRemove(event: ItemRemovingActionEvent): void {\r\n        this.removeItemFromInventory(event.Item.getID());\r\n    }\r\n\r\n    OnItemConsume(event: ItemConsumingActionEvent): void {\r\n        const items = this.findItemsById(event.Item.getID());\r\n        items[0].use();\r\n    }\r\n\r\n    public findItemsById(id: number): InGameItem[] {\r\n        return this.Items.filter(o => o.getID() === id);\r\n    }\r\n\r\n    public findItemsByName(name: string): InGameItem[] {\r\n        return this.Items.filter(o => o.getName() === name);\r\n    }\r\n\r\n    public removeItemFromInventory(id: number): void {\r\n        this.Items = this.Items.filter(o => o.getID() !== id);\r\n    }\r\n\r\n    public getItemCount(): number {\r\n        return this.Items.length;\r\n    }\r\n\r\n    public addItem(toAdd: InGameItem): void {\r\n        toAdd.WasPickedUp = true;\r\n        this.Items.push(toAdd);\r\n    }\r\n\r\n    public getItems(): InGameItem[] {\r\n        return this.Items;\r\n    }\r\n\r\n}\r\n","export class GameError extends Error {\r\n    constructor(m: string) {\r\n        super(m);\r\n\r\n        Object.setPrototypeOf(this, GameError.prototype);\r\n    }\r\n}\r\n","import { IGatewayActionEventService, GatewayActionEvent } from '../models/events/gateway-action.event';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Singleton Service handling Scene Events\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SceneEventService implements IGatewayActionEventService {\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    private static Instance: SceneEventService = undefined;\r\n\r\n    private GatewayActionEventSource = new Subject<GatewayActionEvent>();\r\n\r\n    public GatewayActionEvent$ = this.GatewayActionEventSource.asObservable();\r\n\r\n    public static getInstance(): SceneEventService {\r\n        if (!SceneEventService.Instance) {\r\n            SceneEventService.Instance = new SceneEventService();\r\n        }\r\n\r\n        return SceneEventService.Instance;\r\n    }\r\n\r\n    public changeScene(event: GatewayActionEvent): void {\r\n        this.GatewayActionEventSource.next(event);\r\n    }\r\n}\r\n","export enum InteractionType {\r\n    USE,\r\n    LOOK_AT,\r\n    GO_TO,\r\n    PICK_UP,\r\n    DO\r\n}\r\n","import { Scene } from './scene.model';\r\nimport { GameError } from '../models/errors/game.error';\r\nimport { SceneEventService } from '../services/scene-event.service';\r\nimport { IGatewayActionEventListener, GatewayActionEvent } from '../models/events/gateway-action.event';\r\n\r\n/**\r\n * The Stage contains all scenes (including a pointer to the current scene).\r\n * It also manages the transition between scenes.\r\n */\r\nexport class Stage implements IGatewayActionEventListener {\r\n    private Scenes: Scene[];\r\n    private CurrentScene: Scene;\r\n    // path the user took through the scenes\r\n    private ScenePath: number[];\r\n\r\n    constructor() {\r\n        this.ScenePath = [];\r\n        this.Scenes = [];\r\n\r\n        SceneEventService.getInstance().GatewayActionEvent$.subscribe((event) => this.OnSceneChange(event));\r\n    }\r\n\r\n    OnSceneChange(event: GatewayActionEvent): void {\r\n        this.goToScene(event.TargetSceneID);\r\n    }\r\n\r\n    public getCurrentScene(): Scene {\r\n        if (!this.CurrentScene) {\r\n            this.CurrentScene = this.Scenes[0];\r\n        }\r\n        return this.CurrentScene;\r\n    }\r\n\r\n    public goToScene(id: number): Scene {\r\n        const nextScene = this.Scenes.find(s => s.getID() === id);\r\n        if (!nextScene) {\r\n            throw new GameError('Scene could not be found.');\r\n        }\r\n\r\n        this.ScenePath.push(id);\r\n\r\n        this.CurrentScene = nextScene;\r\n        return this.CurrentScene;\r\n    }\r\n\r\n    public addScene(toAdd: Scene): void {\r\n        this.Scenes.push(toAdd);\r\n    }\r\n\r\n    public getScenesCount(): number {\r\n        return this.Scenes.length;\r\n    }\r\n\r\n    public getScenes(): Scene[] {\r\n        return this.Scenes;\r\n    }\r\n}\r\n","import { Action } from './actions/action.model';\r\nimport { Command } from './command.model';\r\nimport { Inventory } from './inventory.model';\r\nimport { InGameItem } from './Item.model';\r\nimport { Stage } from './stage.model';\r\n\r\n/**\r\n * Represents the Game.\r\n */\r\nexport class Game {\r\n    private Title: string;\r\n    private Introduction: string;\r\n    private ItemNotFoundInInventoryResponse: string;\r\n    private ItemAddedToInventoryResponse: string;\r\n    private GatewayTargetNotFoundResponse: string;\r\n    private InventoryEmptyResponse: string;\r\n    private Stage: Stage;\r\n    private Inventory: Inventory;\r\n    private Commands: Command[];\r\n\r\n    constructor() {\r\n        this.Stage = new Stage();\r\n        this.Inventory = new Inventory();\r\n        this.Commands = [];\r\n        this.initializeCommands();\r\n    }\r\n\r\n    private initializeCommands(): void {\r\n        const helpCommand = new Command();\r\n        helpCommand.setTrigger('help');\r\n        helpCommand.setDescription('A list of all global commands');\r\n        helpCommand.setUseTypeWritingAnimation(false);\r\n        helpCommand.setResponseFunction(() => {\r\n            let commandsHelp = '';\r\n            this.Commands.forEach(command => {\r\n                commandsHelp += `${command.getTrigger()} - ${command.getDescription()} \\r\\n `;\r\n            });\r\n            return commandsHelp;\r\n        });\r\n        this.Commands.push(helpCommand);\r\n\r\n\r\n        const inventoryCommand = new Command();\r\n        inventoryCommand.setTrigger('inventory');\r\n        inventoryCommand.setDescription('List all items in your inventory.');\r\n        inventoryCommand.setUseTypeWritingAnimation(false);\r\n        inventoryCommand.setResponseFunction(() => {\r\n            if (this.Inventory.getItemCount() <= 0) {\r\n                return this.InventoryEmptyResponse;\r\n            }\r\n            let inventoryContents = 'Items in Inventory: \\r\\n ';\r\n            this.Inventory.getItems().forEach(item => {\r\n                inventoryContents += `${item.getName()} \\r\\n `;\r\n            });\r\n            return inventoryContents;\r\n        });\r\n        this.Commands.push(inventoryCommand);\r\n\r\n\r\n        const sceneCommand = new Command();\r\n        sceneCommand.setTrigger('look around');\r\n        sceneCommand.setDescription('Get a description of the scene you\\'re in');\r\n        sceneCommand.setUseTypeWritingAnimation(true);\r\n        sceneCommand.setResponseFunction(() => {\r\n            let description = this.Stage.getCurrentScene().getDescription();\r\n            for (const item of this.Stage.getCurrentScene().getItems()) {\r\n                description += ` ${item.getInSceneDescription()}`;\r\n            }\r\n            return description;\r\n        });\r\n\r\n        this.Commands.push(sceneCommand);\r\n    }\r\n\r\n    public getStage(): Stage {\r\n        return this.Stage;\r\n    }\r\n\r\n    public getInventory(): Inventory {\r\n        return this.Inventory;\r\n    }\r\n\r\n    public setInventory(inventory: Inventory): void {\r\n        this.Inventory = inventory;\r\n    }\r\n\r\n    public getScenesCount(): number {\r\n        return this.Stage.getScenesCount();\r\n    }\r\n\r\n    public getTitle(): string {\r\n        return this.Title;\r\n    }\r\n\r\n    public setTitle(title: string): void {\r\n        this.Title = title;\r\n    }\r\n\r\n    public getIntroduction(): string {\r\n        return this.Introduction;\r\n    }\r\n\r\n    public setIntroduction(intro: string): void {\r\n        this.Introduction = intro;\r\n    }\r\n\r\n    public getCommands(): Command[] {\r\n        return this.Commands;\r\n    }\r\n\r\n    public setCommands(commands: Command[]): void {\r\n        this.Commands = commands;\r\n    }\r\n\r\n    public getItemNotFoundResponse(): string {\r\n        return this.Stage.getCurrentScene().getItemNotFoundResponse();\r\n    }\r\n\r\n    public getInvalidInputResponse(): string {\r\n        return this.Stage.getCurrentScene().getInvalidInputResponse();\r\n    }\r\n\r\n    public getActionNotRecognizedResponse(): string {\r\n        return this.Stage.getCurrentScene().getActionNotRecognizedResponse();\r\n    }\r\n\r\n    public getSceneDescription(): string {\r\n        return this.Stage.getCurrentScene().getDescription();\r\n    }\r\n\r\n    public getItemNotFoundInInventoryResponse(): string {\r\n        return this.ItemNotFoundInInventoryResponse;\r\n    }\r\n\r\n    public setItemNotFoundInInventoryResponse(response: string): void {\r\n        this.ItemNotFoundInInventoryResponse = response;\r\n    }\r\n\r\n    public getActionsInScene(): Action[] {\r\n        return this.Stage.getCurrentScene().getActions();\r\n    }\r\n\r\n    public getItemsInScene(): InGameItem[] {\r\n        return this.Stage.getCurrentScene().getItems();\r\n    }\r\n\r\n    public getItemsInInventory(): InGameItem[] {\r\n        return this.Inventory.getItems();\r\n    }\r\n\r\n    public removeItemFromScene(item: InGameItem): void {\r\n        this.Stage.getCurrentScene().removeItemFromScene(item);\r\n    }\r\n\r\n    public addItemToInventory(item: InGameItem): void {\r\n        this.Inventory.addItem(item);\r\n    }\r\n\r\n    public removeItemFromInventory(item: InGameItem): void {\r\n        this.Inventory.removeItemFromInventory(item.getID());\r\n    }\r\n\r\n    public getItemAddedToInventoryResponse(): string {\r\n        return this.ItemAddedToInventoryResponse;\r\n    }\r\n\r\n    public setItemAddedToInventoryResponse(response: string): void {\r\n        this.ItemAddedToInventoryResponse = response;\r\n    }\r\n\r\n    public getGatewayTargetNotFoundResponse(): string {\r\n        return this.GatewayTargetNotFoundResponse;\r\n    }\r\n\r\n    public setGatewayTargetNotFoundResponse(response: string): void {\r\n        this.GatewayTargetNotFoundResponse = response;\r\n    }\r\n\r\n    public getInventoryEmptyResponse(): string {\r\n        return this.InventoryEmptyResponse;\r\n    }\r\n\r\n    public setInventoryEmptyResponse(response: string): void {\r\n        this.InventoryEmptyResponse = response;\r\n    }\r\n}\r\n","export abstract class BaseBuilder {\r\n    /**\r\n     * Finishes the Building Process of this Builder\r\n     */\r\n    public abstract finish(): any;\r\n}\r\n","import { Inventory } from './inventory.model';\r\nimport { Scene } from './scene.model';\r\n\r\n/**\r\n * This class represents an Item in the game.\r\n */\r\nexport class InGameItem {\r\n    private ID: number;\r\n    private Name: string;\r\n    private Description: string;\r\n    private MaximumUsages: number;\r\n\r\n    private UsagesLeft: number;\r\n\r\n    private ItemUsedResponse: string;\r\n    private NoUsagesLeftResponse: string;\r\n\r\n    private CanPickUp: boolean;\r\n    private CannotPickUpResponse: string;\r\n    public WasPickedUp: boolean;\r\n\r\n    private InSceneDescription: string;\r\n\r\n    private CannotUseItemResponse: string;\r\n    public CanUseFunction(item: this, currentScene: Scene, inventory: Inventory): boolean {\r\n        return true;\r\n    }\r\n\r\n\r\n    constructor(id?: number) {\r\n        this.ID = id;\r\n        this.CanPickUp = true;\r\n    }\r\n\r\n    public use(): string {\r\n        if (this.UsagesLeft >= 1) {\r\n            this.UsagesLeft--;\r\n            return this.ItemUsedResponse;\r\n        }\r\n        return this.NoUsagesLeftResponse;\r\n    }\r\n\r\n\r\n    public resetUsages(): void {\r\n        this.UsagesLeft = this.MaximumUsages;\r\n    }\r\n\r\n    public setID(id: number): void {\r\n        this.ID = id;\r\n    }\r\n\r\n    public getID(): number {\r\n        return this.ID;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n        this.Name = name;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.Name;\r\n    }\r\n\r\n    public setDescription(desc: string): void {\r\n        this.Description = desc;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.Description;\r\n    }\r\n\r\n    public setMaximumUsages(usages: number): void {\r\n        this.MaximumUsages = usages;\r\n    }\r\n\r\n    public getMaximumUsages(): number {\r\n        return this.MaximumUsages;\r\n    }\r\n\r\n    public setUsagesLeft(usages: number): void {\r\n        this.UsagesLeft = usages;\r\n    }\r\n\r\n    public getUsagesLeft(): number {\r\n        return this.UsagesLeft;\r\n    }\r\n\r\n    public setItemUsedResponse(response: string): void {\r\n        this.ItemUsedResponse = response;\r\n    }\r\n\r\n    public getItemUsedResponse(): string {\r\n        return this.ItemUsedResponse;\r\n    }\r\n\r\n    public setNoUsagesLeftResponse(response: string): void {\r\n        this.NoUsagesLeftResponse = response;\r\n    }\r\n\r\n    public getNoUsagesLeftResponse(): string {\r\n        return this.NoUsagesLeftResponse;\r\n    }\r\n\r\n    public getCanPickUp(): boolean {\r\n        return this.CanPickUp;\r\n    }\r\n\r\n    public setCanPickUp(value: boolean): void {\r\n        this.CanPickUp = value;\r\n    }\r\n\r\n    public setCannotPickUpResponse(response: string): void {\r\n        this.CannotPickUpResponse = response;\r\n    }\r\n\r\n    public getCannotPickUpResponse(): string {\r\n        return this.CannotPickUpResponse;\r\n    }\r\n\r\n    public getInSceneDescription(): string {\r\n        return this.InSceneDescription;\r\n    }\r\n\r\n    public setInSceneDescription(descr: string): void {\r\n        this.InSceneDescription = descr;\r\n    }\r\n\r\n    public setCanUseFunction(func: (item: this, currentScene: Scene, inventory: Inventory) => boolean): void {\r\n        this.CanUseFunction = func;\r\n    }\r\n\r\n    public setCannotUseItemResponse(response: string): void {\r\n        this.CannotUseItemResponse = response;\r\n    }\r\n\r\n    public getCannotUseItemResponse(): string {\r\n        return this.CannotUseItemResponse;\r\n    }\r\n\r\n    public getCanUseFunction(): (item: this, currentScene: Scene, inventory: Inventory) => boolean {\r\n        return this.CanUseFunction;\r\n    }\r\n\r\n}\r\n","export class BuilderError extends Error {\r\n    constructor(m: string) {\r\n        super(m);\r\n\r\n        Object.setPrototypeOf(this, BuilderError.prototype);\r\n    }\r\n}\r\n","import { InGameItem } from '../models/Item.model';\r\nimport { ItemContainingBuilder } from './interfaces/item-containing.builder';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { Scene } from '../models/scene.model';\r\nimport { Inventory } from '../models/inventory.model';\r\n\r\nexport class ItemBuilder<ReturnBuilderType extends ItemContainingBuilder> extends BaseBuilder {\r\n    protected Item: InGameItem;\r\n    private Builder: ReturnBuilderType;\r\n    private RequireInSceneDescription: boolean;\r\n    private IsCanUseFunctionReplaced: boolean;\r\n\r\n    constructor(builder: ReturnBuilderType, item: InGameItem = new InGameItem(), requireInSceneDescription: boolean = false) {\r\n        super();\r\n        this.Item = item;\r\n        this.Builder = builder;\r\n        this.RequireInSceneDescription = requireInSceneDescription;\r\n    }\r\n\r\n    public setName(name: string): this {\r\n        if (!name) {\r\n            throw new EvalError('Name was undefined');\r\n        }\r\n\r\n        this.Item.setName(name);\r\n        return this;\r\n    }\r\n\r\n    public setDescription(description: string): this {\r\n        if (!description) {\r\n            throw new EvalError('Description was undefined');\r\n        }\r\n\r\n        this.Item.setDescription(description);\r\n        return this;\r\n    }\r\n\r\n    public setMaximumUsages(maxUsages: number): this {\r\n        if (maxUsages === undefined || maxUsages <= 0) {\r\n            throw new EvalError('MaximumUsages Value has to be greater than 0.');\r\n        }\r\n\r\n        if (this.Item.getUsagesLeft() && this.Item.getUsagesLeft() > maxUsages) {\r\n            throw new EvalError('MaximumUsages Value has to be greater or equal to the UsagesLeft Value');\r\n        }\r\n\r\n        this.Item.setMaximumUsages(maxUsages);\r\n        return this;\r\n    }\r\n\r\n    public setUsagesLeft(usagesLeft: number): this {\r\n        if (usagesLeft === undefined || usagesLeft === null || usagesLeft < 0) {\r\n            throw new EvalError('UsagesLeft Value has to be greater than or equal to 0.');\r\n        }\r\n\r\n        if (this.Item.getMaximumUsages() && usagesLeft > this.Item.getMaximumUsages()) {\r\n            throw new EvalError('UsagesLeft Value has to be less or equal to the MaximumUsages Value.');\r\n        }\r\n\r\n        this.Item.setUsagesLeft(usagesLeft);\r\n        return this;\r\n    }\r\n\r\n    public setItemUsedResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemUsedResponse was undefined.');\r\n        }\r\n\r\n        this.Item.setItemUsedResponse(response);\r\n        return this;\r\n    }\r\n\r\n\r\n    public setNoUsagesLeftResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('NoUsagesLeftResponse was undefined.');\r\n        }\r\n\r\n        this.Item.setNoUsagesLeftResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setCanPickUp(value: boolean): this {\r\n        this.Item.setCanPickUp(value);\r\n        return this;\r\n    }\r\n\r\n    public setCannotPickUpResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('CannotPickUpResponse was undefined.');\r\n        }\r\n\r\n        this.Item.setCannotPickUpResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInSceneDescription(descr: string): this {\r\n        if (!descr) {\r\n            throw new EvalError('InSceneDescription was undefined.');\r\n        }\r\n\r\n        this.Item.setInSceneDescription(descr);\r\n        return this;\r\n    }\r\n\r\n    public setCanUseFunction(func: (item: InGameItem, currentScene: Scene, inventory: Inventory) => boolean): this {\r\n        if (!func) {\r\n            throw new EvalError('CanUseFunction was undefined.');\r\n        }\r\n\r\n        this.IsCanUseFunctionReplaced = true;\r\n        this.Item.setCanUseFunction(func);\r\n        return this;\r\n    }\r\n\r\n    public setCannotUseItemResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('CannotUseItemResponse was undefined');\r\n        }\r\n\r\n        this.Item.setCannotUseItemResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public finish(): ReturnBuilderType {\r\n        if (!this.Item.getName()) {\r\n            throw new BuilderError('Item creation could not be finished. Name was not set.');\r\n        }\r\n\r\n        if (!this.Item.getDescription()) {\r\n            throw new BuilderError('Item creation could not be finished. Description was not set.');\r\n        }\r\n\r\n        if (this.Item.getUsagesLeft() > 0 && !this.Item.getItemUsedResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. ItemUsedResponse was not set.');\r\n        }\r\n\r\n        if (!this.Item.getNoUsagesLeftResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. NoUsagesLeftResponse was not set.');\r\n        }\r\n\r\n        if (!this.Item.getCanPickUp() && !this.Item.getCannotPickUpResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. CannotPickUpResponse was not set.');\r\n        }\r\n\r\n        // if this item is added to a scene, instead of the inventory or an action, the InSceneDescription has to be set.\r\n        if (this.RequireInSceneDescription && !this.Item.getInSceneDescription()) {\r\n            throw new BuilderError('Item creation could not be finished. InSceneDescription was not set.');\r\n        }\r\n\r\n        if (this.IsCanUseFunctionReplaced && !this.Item.getCannotUseItemResponse()) {\r\n            throw new BuilderError('Item creation could not be finished. CannotUseItemResponse was not set.');\r\n        }\r\n\r\n        if (this.Item.getMaximumUsages() < 0) {\r\n            this.Item.setMaximumUsages(1);\r\n        }\r\n\r\n        if (this.Item.getUsagesLeft() < 0) {\r\n            this.Item.setUsagesLeft(1);\r\n        }\r\n\r\n        this.Builder.addItemToBuilder(this.Item);\r\n        return this.Builder;\r\n    }\r\n}\r\n","import { GameBuilder } from './game.builder';\r\nimport { Game } from '../models/game.model';\r\nimport { Inventory } from '../models/inventory.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { ItemContainingBuilder } from './interfaces/item-containing.builder';\r\nimport { ItemBuilder } from './item.builder';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\n\r\nexport class InventoryBuilder extends BaseBuilder implements ItemContainingBuilder {\r\n    private GameBuilder: GameBuilder;\r\n    private Game: Game;\r\n    protected Inventory: Inventory;\r\n\r\n    constructor(gameBuilder: GameBuilder, game: Game) {\r\n        super();\r\n        this.GameBuilder = gameBuilder;\r\n        this.Game = game;\r\n        this.Inventory = new Inventory();\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<InventoryBuilder> {\r\n        return new ItemBuilder<InventoryBuilder>(this, item);\r\n    }\r\n\r\n    addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Could not add Item to Inventory. Item was not set.');\r\n        }\r\n        this.Inventory.addItem(item);\r\n        if (item.getID()) {\r\n            this.GameBuilder.IdGeneratorService.addItemId(item);\r\n        }\r\n    }\r\n\r\n\r\n    public finish(): GameBuilder {\r\n        this.Game.setInventory(this.Inventory);\r\n        return this.GameBuilder;\r\n    }\r\n}\r\n","import { InGameItem } from './Item.model';\r\nimport { Action } from './actions/action.model';\r\n\r\n/**\r\n * A Scene is a container of actions and Items.\r\n * The player can only be inside one scene at a time.\r\n */\r\nexport class Scene {\r\n    private ID: number;\r\n    private Name: string;\r\n    private Description: string;\r\n\r\n    private ActionNotRecognizedResponse: string;\r\n    private ItemNotFoundResponse: string;\r\n    private InvalidInputResponse: string;\r\n\r\n    private Items: InGameItem[];\r\n    private Actions: Action[];\r\n\r\n    constructor(id?: number) {\r\n        this.ID = id;\r\n\r\n        this.Items = [];\r\n        this.Actions = [];\r\n    }\r\n\r\n    public setID(id: number): void {\r\n        this.ID = id;\r\n    }\r\n\r\n    public getID(): number {\r\n        return this.ID;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.Name;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n        this.Name = name;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.Description;\r\n    }\r\n\r\n    public setDescription(descr: string): void {\r\n        this.Description = descr;\r\n    }\r\n\r\n    public getActionNotRecognizedResponse(): string {\r\n        return this.ActionNotRecognizedResponse;\r\n    }\r\n\r\n    public setActionNotRecognizedResponse(response: string): void {\r\n        this.ActionNotRecognizedResponse = response;\r\n    }\r\n\r\n    public getItemNotFoundResponse(): string {\r\n        return this.ItemNotFoundResponse;\r\n    }\r\n\r\n    public setItemNotFoundResponse(response: string): void {\r\n        this.ItemNotFoundResponse = response;\r\n    }\r\n\r\n    public getInvalidInputResponse(): string {\r\n        return this.InvalidInputResponse;\r\n    }\r\n\r\n    public setInvalidInputResponse(response: string): void {\r\n        this.InvalidInputResponse = response;\r\n    }\r\n\r\n    public getActions(): Action[] {\r\n        return this.Actions;\r\n    }\r\n\r\n    public getItems(): InGameItem[] {\r\n        return this.Items;\r\n    }\r\n\r\n    public removeItemFromScene(item: InGameItem): void {\r\n        const index = this.Items.indexOf(item);\r\n        if (index > -1) {\r\n            this.Items.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import { Action } from '../../models/actions/action.model';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { BaseBuilder } from '../base.builder';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\nexport class BaseActionBuilder<T extends Action, ReturnBuilderType extends ActionContainingBuilder> extends BaseBuilder {\r\n    protected Action: T;\r\n    protected Builder: ReturnBuilderType;\r\n\r\n    constructor(builder: ReturnBuilderType, action: T) {\r\n        super();\r\n        this.Action = action;\r\n        this.Builder = builder;\r\n    }\r\n\r\n    public setTrigger(trigger: string): this {\r\n        if (!trigger || trigger === '') {\r\n            throw new EvalError('No Trigger found.');\r\n        }\r\n\r\n        this.Action.setTrigger(trigger);\r\n        return this;\r\n    }\r\n\r\n    public setResponse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setEndGameAction(): this {\r\n        this.Action.setIsEndGameAction(true);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n    }\r\n\r\n    public finish(): ReturnBuilderType {\r\n        if (!this.Action.getTrigger()) {\r\n            throw new BuilderError('Action creation could not be finished. Trigger was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponse()) {\r\n            throw new BuilderError('Action creation could not be finished. Response was not set.');\r\n        }\r\n\r\n        this.onFinish();\r\n\r\n        this.Builder.addActionToBuilder(this.Action);\r\n        return this.Builder;\r\n    }\r\n\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\n\r\n/**\r\n * Abstract Base class for all actions.\r\n */\r\n// Note: Actions don't have IDs, since they are triggered via their InteractionType and their Trigger\r\nexport abstract class Action {\r\n    private Trigger: string;\r\n    private Response: string;\r\n    private InteractionType: InteractionType;\r\n    private IsEndGameAction: boolean;\r\n\r\n    constructor() {\r\n        this.IsEndGameAction = false;\r\n    }\r\n\r\n    public abstract trigger(): string;\r\n\r\n    public abstract reset(): void;\r\n\r\n    public setTrigger(trigger: string): void {\r\n        this.Trigger = trigger;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): void {\r\n        this.InteractionType = type;\r\n    }\r\n\r\n    public setResponse(response: string): void {\r\n        this.Response = response;\r\n    }\r\n\r\n    public setIsEndGameAction(endGameAction: boolean): void {\r\n        this.IsEndGameAction = endGameAction;\r\n    }\r\n\r\n    public getTrigger(): string {\r\n        return this.Trigger;\r\n    }\r\n\r\n    public getIsEndGameAction(): boolean {\r\n        return this.IsEndGameAction;\r\n    }\r\n\r\n    public getInteractionType(): InteractionType {\r\n        return this.InteractionType;\r\n    }\r\n\r\n    public getResponse(): string {\r\n        return this.Response;\r\n    }\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { Action } from './action.model';\r\n\r\n/**\r\n * A OneTimeAction is only triggered once\r\n * Each subsequent trigger returns the same response.\r\n */\r\nexport class OneTimeAction extends Action {\r\n    private WasTriggered: boolean;\r\n    private ResponseAfterUse: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.WasTriggered) {\r\n            return this.ResponseAfterUse;\r\n        }\r\n\r\n        this.WasTriggered = true;\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.WasTriggered = false;\r\n    }\r\n\r\n    public getWasTriggered(): boolean {\r\n        return this.WasTriggered;\r\n    }\r\n\r\n    public setWasTriggered(triggered: boolean): void {\r\n        this.WasTriggered = triggered;\r\n    }\r\n\r\n    public getResponseAfterUse(): string {\r\n        return this.ResponseAfterUse;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): void {\r\n        this.ResponseAfterUse = response;\r\n    }\r\n}\r\n","import { InGameItem } from '../Item.model';\r\nimport { ItemYieldingAction } from '../actions/item-yielding-action.model';\r\n\r\nexport class ItemYieldingActionEvent {\r\n    Item: InGameItem;\r\n    AmountOfItems: number;\r\n    ResetItemUsagesToMaximum: boolean;\r\n    Response: string;\r\n    ResponseAfterUse: string;\r\n    WasTriggered: boolean;\r\n\r\n    constructor(action: ItemYieldingAction){\r\n        this.Item = action.getItem();\r\n        this.Response = action.getResponse();\r\n        this.ResponseAfterUse = action.getResponseAfterUse();\r\n        this.WasTriggered = action.getWasTriggered();\r\n        this.AmountOfItems = action.getAmountOfItems();\r\n        this.ResetItemUsagesToMaximum = action.getResetItemUsagesToMaximum();\r\n    }\r\n}\r\n\r\n\r\nexport interface IItemYieldingEventService {\r\n    yieldItem(event: ItemYieldingActionEvent): void;\r\n}\r\n\r\nexport interface IItemYieldingEventListener {\r\n    OnItemYield(event: ItemYieldingActionEvent): void;\r\n}\r\n","import { OneTimeAction } from './one-time-action.model';\r\nimport { InGameItem } from '../Item.model';\r\nimport { ItemYieldingActionEvent } from '../events/item-yielding-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { ItemEventService } from '../../services/item-event.service';\r\n\r\n/**\r\n * An ItemYieldingAction is only triggered once and adds an Item to the players inventory.\r\n */\r\nexport class ItemYieldingAction extends OneTimeAction {\r\n    private Item: InGameItem;\r\n    private AmountOfItems: number;\r\n    private ResetItemUsagesToMaximum: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.AmountOfItems = 1;\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        // trigger addition of item to inventory\r\n        if (this.getWasTriggered()) {\r\n            return this.getResponseAfterUse();\r\n        }\r\n\r\n        ItemEventService.getInstance().yieldItem(new ItemYieldingActionEvent(this));\r\n\r\n        this.setWasTriggered(true);\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setWasTriggered(false);\r\n    }\r\n\r\n    public getItem(): InGameItem {\r\n        return this.Item;\r\n    }\r\n\r\n    public setItem(item: InGameItem): void {\r\n        this.Item = item;\r\n    }\r\n\r\n    public setAmountOfItems(amount: number): void {\r\n        this.AmountOfItems = amount;\r\n    }\r\n\r\n    public getAmountOfItems(): number {\r\n        return this.AmountOfItems;\r\n    }\r\n\r\n    public getResetItemUsagesToMaximum(): boolean {\r\n        return this.ResetItemUsagesToMaximum;\r\n    }\r\n\r\n    public setResetItemUsagesToMaximum(reset: boolean): void {\r\n        this.ResetItemUsagesToMaximum = reset;\r\n    }\r\n}\r\n","import { GatewayAction } from '../actions/gateway-action.model';\r\n\r\nexport class GatewayActionEvent {\r\n    TargetSceneID: number;\r\n    TargetSceneName: string;\r\n\r\n    constructor(action: GatewayAction){\r\n        this.TargetSceneID = action.getTargetSceneId();\r\n        this.TargetSceneName = action.getTargetSceneName();\r\n    }\r\n}\r\n\r\nexport interface IGatewayActionEventService {\r\n    changeScene(event: GatewayActionEvent): void;\r\n}\r\n\r\nexport interface IGatewayActionEventListener {\r\n    OnSceneChange(event: GatewayActionEvent): void;\r\n}\r\n","import { Action } from './action.model';\r\nimport { GatewayActionEvent } from '../events/gateway-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { SceneEventService } from '../../services/scene-event.service';\r\n\r\n/**\r\n * When a GatewayAction is triggered, the game moves on to another scene.\r\n */\r\nexport class GatewayAction extends Action {\r\n    private TargetSceneId: number;\r\n    private TargetSceneName: string;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.GO_TO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        // trigger event change\r\n        SceneEventService.getInstance().changeScene(new GatewayActionEvent(this));\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n    }\r\n\r\n    public getTargetSceneId(): number {\r\n        return this.TargetSceneId;\r\n    }\r\n\r\n    public setTargetSceneId(id: number): void {\r\n        this.TargetSceneId = id;\r\n    }\r\n\r\n    public getTargetSceneName(): string {\r\n        return this.TargetSceneName;\r\n    }\r\n\r\n    public setTargetSceneName(name: string): void {\r\n        this.TargetSceneName = name;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { GatewayAction } from '../../models/actions/gateway-action.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\nexport class GatewayActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<GatewayAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new GatewayAction());\r\n    }\r\n\r\n    public setTargetSceneId(id?: number): this {\r\n        if (id === undefined || id <= 0) {\r\n            throw new EvalError('TargetSceneId Value has to be greater than 0.');\r\n        }\r\n\r\n        this.Action.setTargetSceneId(id);\r\n        return this;\r\n    }\r\n\r\n    public setTargetSceneName(name: string): this {\r\n        if (!name) {\r\n            throw new EvalError('TargetSceneName Value is invalid.');\r\n        }\r\n\r\n        this.Action.setTargetSceneName(name);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getTargetSceneId() && !this.Action.getTargetSceneName()) {\r\n            throw new BuilderError('Action creation could not be finished. SceneId and/or TargetSceneName were not set.');\r\n        }\r\n    }\r\n}\r\n","import { InGameItem } from '../Item.model';\r\nimport { ItemConsumingAction } from '../actions/item-consuming-action.model';\r\n\r\nexport class ItemConsumingActionEvent {\r\n    Item: InGameItem;\r\n    ItemNotFoundResponse: string;\r\n    Response: string;\r\n    ResponseAfterUse: string;\r\n    WasTriggered: boolean;\r\n\r\n\r\n    constructor(action: ItemConsumingAction){\r\n        this.Item = action.getItem();\r\n        this.Response = action.getResponse();\r\n        this.ResponseAfterUse = action.getResponseAfterUse();\r\n        this.WasTriggered = action.getWasTriggered();\r\n    }\r\n}\r\n\r\n\r\nexport interface IItemConsumingEventService {\r\n    consumeItem(event: ItemConsumingActionEvent): void;\r\n}\r\n\r\n\r\nexport interface IItemConsumingEventListener {\r\n    OnItemConsume(event: ItemConsumingActionEvent): void;\r\n}\r\n","import { OneTimeAction } from './one-time-action.model';\r\nimport { InGameItem } from '../Item.model';\r\nimport { ItemConsumingActionEvent } from '../events/item-consuming-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { ItemEventService } from '../../services/item-event.service';\r\n\r\n/**\r\n * An ItemConsumingAction is only triggered once and uses an Item (once) in the players inventory.\r\n * It can only be triggered, if the user has got the Item in her inventory.\r\n */\r\nexport class ItemConsumingAction extends OneTimeAction {\r\n    private Item: InGameItem;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.USE);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.getWasTriggered()) {\r\n            return this.getResponseAfterUse();\r\n        }\r\n\r\n        ItemEventService.getInstance().consumeItem(new ItemConsumingActionEvent(this));\r\n\r\n        this.setWasTriggered(true);\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setWasTriggered(false);\r\n    }\r\n\r\n    public getItem(): InGameItem {\r\n        return this.Item;\r\n    }\r\n\r\n    public setItem(item: InGameItem): void {\r\n        this.Item = item;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { ItemContainingBuilder } from '../interfaces/item-containing.builder';\r\nimport { ItemBuilder } from '../item.builder';\r\nimport { ItemConsumingAction } from '../../models/actions/item-consuming-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { InGameItem } from '../../models/Item.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\nexport class ItemConsumingActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<ItemConsumingAction, ReturnBuilderType> implements ItemContainingBuilder {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new ItemConsumingAction());\r\n    }\r\n\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Item could not be added to the Action. Item was not set.');\r\n        }\r\n        this.Action.setItem(item);\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<ItemConsumingActionBuilder<ReturnBuilderType>> {\r\n        return new ItemBuilder<ItemConsumingActionBuilder<ReturnBuilderType>>(this, item);\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getItem()) {\r\n            throw new BuilderError('Action creation could not be finished. Item was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n    }\r\n}\r\n","import { InGameItem } from '../Item.model';\r\nimport { ItemRemovingAction } from '../actions/item-removing-action.model';\r\n\r\nexport class ItemRemovingActionEvent {\r\n    Item: InGameItem;\r\n    ItemNotFoundResponse: string;\r\n    Response: string;\r\n    ResponseAfterUse: string;\r\n    WasTriggered: boolean;\r\n\r\n    constructor(action: ItemRemovingAction){\r\n        this.Item = action.getItem();\r\n        this.Response = action.getResponse();\r\n        this.ResponseAfterUse = action.getResponseAfterUse();\r\n        this.WasTriggered = action.getWasTriggered();\r\n    }\r\n}\r\n\r\nexport interface IItemRemovingEventService {\r\n    removeItem(event: ItemRemovingActionEvent): void;\r\n}\r\n\r\nexport interface IItemRemovingEventListener {\r\n    OnItemRemove(event: ItemRemovingActionEvent): void;\r\n}\r\n","import { OneTimeAction } from './one-time-action.model';\r\nimport { InGameItem } from '../Item.model';\r\nimport { ItemRemovingActionEvent } from '../events/item-removing-action.event';\r\nimport { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { ItemEventService } from '../../services/item-event.service';\r\n\r\n/**\r\n * An ItemRemovingAction is only triggered once and removes an Item out of the players inventory without using it.\r\n * It can only be triggered, if the user has got the Item in her inventory.\r\n */\r\nexport class ItemRemovingAction extends OneTimeAction {\r\n    private Item: InGameItem;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.USE);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.getWasTriggered()) {\r\n            return this.getResponseAfterUse();\r\n        }\r\n\r\n        ItemEventService.getInstance().removeItem(new ItemRemovingActionEvent(this));\r\n\r\n        this.setWasTriggered(true);\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setWasTriggered(false);\r\n    }\r\n\r\n    public getItem(): InGameItem {\r\n        return this.Item;\r\n    }\r\n\r\n    public setItem(item: InGameItem): void {\r\n        this.Item = item;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { ItemContainingBuilder } from '../interfaces/item-containing.builder';\r\nimport { ItemBuilder } from '../item.builder';\r\nimport { ItemRemovingAction } from '../../models/actions/item-removing-action.model';\r\nimport { InGameItem } from '../../models/Item.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\n\r\n\r\nexport class ItemRemovingActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<ItemRemovingAction, ReturnBuilderType> implements ItemContainingBuilder {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new ItemRemovingAction());\r\n    }\r\n\r\n    public addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Item could not be added to the Action. Item was not set.');\r\n        }\r\n        this.Action.setItem(item);\r\n    }\r\n\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<ItemRemovingActionBuilder<ReturnBuilderType>> {\r\n        return new ItemBuilder<ItemRemovingActionBuilder<ReturnBuilderType>>(this, item);\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getItem()) {\r\n            throw new BuilderError('Action creation could not be finished. Item was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { ItemContainingBuilder } from '../interfaces/item-containing.builder';\r\nimport { ItemBuilder } from '../item.builder';\r\nimport { ItemYieldingAction } from '../../models/actions/item-yielding-action.model';\r\nimport { InGameItem } from '../../models/Item.model';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\n\r\n\r\nexport class ItemYieldingActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<ItemYieldingAction, ReturnBuilderType> implements ItemContainingBuilder {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new ItemYieldingAction());\r\n    }\r\n\r\n    public addItemToBuilder(item: InGameItem): void {\r\n        if (!item) {\r\n            throw new BuilderError('Item could not be added to the Action. Item was not set.');\r\n        }\r\n        this.Action.setItem(item);\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<ItemYieldingActionBuilder<ReturnBuilderType>> {\r\n        return new ItemBuilder<ItemYieldingActionBuilder<ReturnBuilderType>>(this, item);\r\n    }\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n    public setAmountOfItems(amount: number): this {\r\n        if (amount === undefined || amount <= 0) {\r\n            throw new EvalError('AmountOfItems Value has to be greater than 0.');\r\n        }\r\n\r\n        this.Action.setAmountOfItems(amount);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public setResetItemUsagesToMaximum(reset: boolean): this {\r\n        if (reset === undefined || reset === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setResetItemUsagesToMaximum(reset);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getItem()) {\r\n            throw new BuilderError('Action creation could not be finished. Item was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n    }\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { Action } from './action.model';\r\n\r\n/**\r\n * A MultiTimeAction can be activated multiple times.\r\n * The class allows you to pass an array of responses,\r\n * which will be returned one by one until the maximum usage count is reached.\r\n */\r\nexport class MultiTimeAction extends Action {\r\n    private UsagesLeft: number;\r\n    private MaximumUsages: number;\r\n    private Responses: string[];\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        if (this.UsagesLeft <= this.MaximumUsages) {\r\n            const responseString =  this.Responses[this.UsagesLeft];\r\n            this.UsagesLeft++;\r\n            return responseString;\r\n        }\r\n\r\n        return this.getResponse();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.UsagesLeft = 0;\r\n    }\r\n\r\n    public getUsagesLeft(): number {\r\n        return this.UsagesLeft;\r\n    }\r\n\r\n    public setUsagesLeft(usages: number): void {\r\n        this.UsagesLeft = usages;\r\n    }\r\n\r\n    public getMaximumUsages(): number {\r\n        return this.MaximumUsages;\r\n    }\r\n\r\n    public setMaximumUsages(usages: number): void {\r\n        this.MaximumUsages = usages;\r\n    }\r\n\r\n    public getResponses(): string[] {\r\n        return this.Responses;\r\n    }\r\n\r\n    public setResponses(responses: string[]): void {\r\n        this.Responses = responses;\r\n    }\r\n\r\n\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { MultiTimeAction } from '../../models/actions/multi-time-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\n\r\nexport class MultiTimeActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<MultiTimeAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new MultiTimeAction());\r\n    }\r\n\r\n    public setUsagesLeft(count: number): this {\r\n        if (count === undefined || count <= 0) {\r\n            throw new EvalError('UsagesLeft Value has to be greater than 0.');\r\n        }\r\n\r\n        if (this.Action.getMaximumUsages() && this.Action.getMaximumUsages() < count) {\r\n            throw new EvalError('UsagesLeft Value has to be less than or equal to MaximumUsages Value.');\r\n        }\r\n\r\n        this.Action.setUsagesLeft(count);\r\n        return this;\r\n    }\r\n\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public setMaximumUsages(count: number): this {\r\n        if (count === undefined || count <= 0) {\r\n            throw new EvalError('MaximumUsages Value has to be greater than 0.');\r\n        }\r\n\r\n        if (this.Action.getUsagesLeft() !== undefined &&\r\n            this.Action.getUsagesLeft() > count) {\r\n            throw new EvalError('MaximumUsages Value has to be greater than or equal to UsagesLeft Value.');\r\n        }\r\n\r\n        if (this.Action.getResponses() &&\r\n            this.Action.getResponses().length !== count) {\r\n            throw new EvalError('MaximumUsages Value has to match the Amount of Responses.');\r\n        }\r\n\r\n        this.Action.setMaximumUsages(count);\r\n        return this;\r\n    }\r\n\r\n    public setResponses(responses: string[]): this {\r\n        if (!responses) {\r\n            throw new EvalError('Invalid Value for Responses. Has to be an Array of Strings.');\r\n        }\r\n\r\n        if (responses.length === 0) {\r\n            throw new EvalError('Responses Array may not be empty.');\r\n        }\r\n\r\n        this.Action.setResponses(responses);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getUsagesLeft()) {\r\n            throw new BuilderError('Action creation could not be finished. UsagesLeft was not set.');\r\n        }\r\n\r\n        if (!this.Action.getMaximumUsages()) {\r\n            throw new BuilderError('Action creation could not be finished. MaximumUsages was not set.');\r\n        }\r\n\r\n        if (!this.Action.getResponses()) {\r\n            throw new BuilderError('Action creation could not be finished. Responses Array was not set.');\r\n        }\r\n\r\n        if (!this.Action.getInteractionType()) {\r\n            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');\r\n        }\r\n    }\r\n\r\n}\r\n","import { InteractionType } from '../interactions/interaction-type.enum';\r\nimport { Action } from './action.model';\r\n\r\n/**\r\n * RandomResponseAction allows the use of multiple Responses.\r\n * Each time this Action is triggered, the response will be selected randomly out of the passed array.\r\n */\r\nexport class RandomResponseAction extends Action {\r\n    private Responses: string[];\r\n\r\n    constructor() {\r\n        super();\r\n        // set normal response to avoid errors during build\r\n        this.setResponse(' ');\r\n        this.setInteractionType(InteractionType.DO);\r\n    }\r\n\r\n    public trigger(): string {\r\n        const rndm = Math.floor(Math.random() * this.Responses.length);\r\n        return this.Responses[rndm];\r\n    }\r\n\r\n    public reset(): void {\r\n    }\r\n\r\n    public getResponses(): string[] {\r\n        return this.Responses;\r\n    }\r\n\r\n    public setResponses(responses: string[]): void {\r\n        this.Responses = responses;\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { RandomResponseAction } from '../../models/actions/random-response-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\n\r\n\r\nexport class RandomResponseActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<RandomResponseAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new RandomResponseAction());\r\n    }\r\n\r\n    public setResponses(responses: string[]): this {\r\n        if (!responses) {\r\n            throw new EvalError('Invalid Value for Responses. Has to be an Array of Strings.');\r\n        }\r\n\r\n        if (responses.length === 0) {\r\n            throw new EvalError('Responses Array may not be empty.');\r\n        }\r\n\r\n        this.Action.setResponses(responses);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getResponses()) {\r\n            throw new BuilderError('Action creation could not be finished. Responses Array was not set.');\r\n        }\r\n\r\n        if (!this.Action.getInteractionType()) {\r\n            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');\r\n        }\r\n    }\r\n}\r\n","import { BaseActionBuilder } from './base-action.builder';\r\nimport { ActionContainingBuilder } from '../interfaces/action-containing.builder';\r\nimport { OneTimeAction } from '../../models/actions/one-time-action.model';\r\nimport { InteractionType } from '../../models/interactions/interaction-type.enum';\r\nimport { BuilderError } from '../../models/errors/builder.error';\r\n\r\n\r\nexport class OneTimeActionBuilder<ReturnBuilderType extends ActionContainingBuilder>\r\n    extends BaseActionBuilder<OneTimeAction, ReturnBuilderType> {\r\n\r\n    constructor(builder: ReturnBuilderType) {\r\n        super(builder, new OneTimeAction());\r\n    }\r\n\r\n    public setWasTrigered(wasTriggered: boolean): this {\r\n        if (wasTriggered === undefined || wasTriggered === null) {\r\n            throw new EvalError('WasTriggered was not set.');\r\n        }\r\n        this.Action.setWasTriggered(wasTriggered);\r\n        return this;\r\n    }\r\n\r\n    public setResponseAfterUse(response: string): this {\r\n        if (!response || response === '') {\r\n            throw new EvalError('No Response found.');\r\n        }\r\n\r\n        this.Action.setResponseAfterUse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInteractionType(type: InteractionType): this {\r\n        if (!type || !Object.values(InteractionType).includes(type)) {\r\n            throw new EvalError('InteractionType not set.');\r\n        }\r\n\r\n        this.Action.setInteractionType(type);\r\n        return this;\r\n    }\r\n\r\n    public onFinish(): void {\r\n        if (!this.Action.getResponseAfterUse()) {\r\n            throw new BuilderError('Action creation could not be finished. ResponseAfterUse was not set.');\r\n        }\r\n\r\n        if (!this.Action.getInteractionType()) {\r\n            throw new BuilderError('Action creation could not be finished. InteractionType was not set.');\r\n        }\r\n    }\r\n}\r\n\r\n","import { GameBuilder } from './game.builder';\r\nimport { Game } from '../models/game.model';\r\nimport { Scene } from '../models/scene.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { ItemBuilder } from './item.builder';\r\nimport { ItemContainingBuilder } from './interfaces/item-containing.builder';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { ActionContainingBuilder } from './interfaces/action-containing.builder';\r\nimport { Action } from '../models/actions/action.model';\r\nimport { BaseActionBuilder } from './action-builders/base-action.builder';\r\nimport { ItemYieldingAction } from '../models/actions/item-yielding-action.model';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { GatewayActionBuilder } from './action-builders/gateway-action.builder';\r\nimport { ItemConsumingActionBuilder } from './action-builders/item-consuming-action.builder';\r\nimport { ItemRemovingActionBuilder } from './action-builders/item-removing-action.builder';\r\nimport { ItemYieldingActionBuilder } from './action-builders/item-yielding-action.builder';\r\nimport { MultiTimeActionBuilder } from './action-builders/multi-time-action.builder';\r\nimport { RandomResponseActionBuilder } from './action-builders/random-response-action.builder';\r\nimport { OneTimeActionBuilder } from './action-builders/one-time-action.builder';\r\n\r\nexport class SceneBuilder extends BaseBuilder implements ItemContainingBuilder, ActionContainingBuilder {\r\n    private GameBuilder: GameBuilder;\r\n    private Game: Game;\r\n    protected Scene: Scene;\r\n\r\n    constructor(gameBuilder: GameBuilder, game: Game, sceneId: number = null) {\r\n        super();\r\n        this.GameBuilder = gameBuilder;\r\n        this.Game = game;\r\n        this.Scene = new Scene(sceneId);\r\n    }\r\n\r\n    addActionToBuilder(action: Action): void {\r\n        this.Scene.getActions().push(action);\r\n\r\n        if (action instanceof ItemYieldingAction) {\r\n            this.GameBuilder.IdGeneratorService.addActionItemId(action as ItemYieldingAction);\r\n        }\r\n    }\r\n\r\n    public addAction<T extends Action>(action: T): BaseActionBuilder<T, SceneBuilder> {\r\n        return new BaseActionBuilder<T, SceneBuilder>(this, action);\r\n    }\r\n\r\n    public addGatewayAction(): GatewayActionBuilder<SceneBuilder> {\r\n        return new GatewayActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addItemConsumingAction(): ItemConsumingActionBuilder<SceneBuilder> {\r\n        return new ItemConsumingActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addItemRemovingAction(): ItemRemovingActionBuilder<SceneBuilder> {\r\n        return new ItemRemovingActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addItemYieldingAction(): ItemYieldingActionBuilder<SceneBuilder> {\r\n        return new ItemYieldingActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addMultiTimeAction(id?: number): MultiTimeActionBuilder<SceneBuilder> {\r\n        return new MultiTimeActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addOneTimeAction(): OneTimeActionBuilder<SceneBuilder> {\r\n        return new OneTimeActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    public addRandomResponseAction(): RandomResponseActionBuilder<SceneBuilder> {\r\n        return new RandomResponseActionBuilder<SceneBuilder>(this);\r\n    }\r\n\r\n    addItemToBuilder(item: InGameItem): void {\r\n        this.Scene.getItems().push(item);\r\n        if (item.getID()) {\r\n            this.GameBuilder.IdGeneratorService.addItemId(item);\r\n        }\r\n    }\r\n\r\n    public addItem(item?: InGameItem): ItemBuilder<SceneBuilder> {\r\n        return new ItemBuilder<SceneBuilder>(this, item);\r\n    }\r\n\r\n    public setName(name: string): this {\r\n        if (!name) {\r\n            throw new EvalError('Name was not set.');\r\n        }\r\n\r\n        this.Scene.setName(name);\r\n        return this;\r\n    }\r\n\r\n    public setDescription(description: string): this {\r\n        if (!description) {\r\n            throw new EvalError('Description was not set.');\r\n        }\r\n\r\n        this.Scene.setDescription(description);\r\n        return this;\r\n    }\r\n\r\n    public setActionNotRecognizedResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ActionNotRecognizedResponse was not set.');\r\n        }\r\n\r\n        this.Scene.setActionNotRecognizedResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setItemNotFoundResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemNotFoundResponse was not set.');\r\n        }\r\n\r\n        this.Scene.setItemNotFoundResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInvalidInputResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('InvalidInputResponse was not set.');\r\n        }\r\n\r\n        this.Scene.setInvalidInputResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public finish(): GameBuilder {\r\n\r\n        if (!this.Scene.getName()) {\r\n            throw new BuilderError('Scene creation could not be finished. Name was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getDescription()) {\r\n            throw new BuilderError('Scene creation could not be finished. Description was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getInvalidInputResponse()) {\r\n            throw new BuilderError('Scene creation could not be finished. InvalidInputResponse was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getItemNotFoundResponse()) {\r\n            throw new BuilderError('Scene creation could not be finished. ItemNotFoundResponse was not set.');\r\n        }\r\n\r\n        if (!this.Scene.getActionNotRecognizedResponse()) {\r\n            throw new BuilderError('Scene creation could not be finished. ActionNotRecognizedResponse was not set.');\r\n        }\r\n\r\n        // TODO: each scene has to have a gateway action to another scene or be the last action\r\n\r\n        this.Game.getStage().addScene(this.Scene);\r\n        return this.GameBuilder;\r\n    }\r\n}\r\n","import { Game } from '../models/game.model';\r\nimport { Scene } from '../models/scene.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { Action } from '../models/actions/action.model';\r\nimport { ItemYieldingAction } from '../models/actions/item-yielding-action.model';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Assigns IDs to Objects by counting the amount of distinct types\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IDGeneratorService {\r\n    private typeArray: TypeCountContainer[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public generateIDs(game: Game): void {\r\n        this.processScenes(game.getStage().getScenes());\r\n        this.typeArray = [];\r\n    }\r\n\r\n\r\n    protected processScenes(scenes: Scene[]): void {\r\n        scenes.forEach(element => {\r\n            if (!element.getID()) {\r\n                element.setID(this.getIdFromTypeName(element.constructor.name));\r\n            } else {\r\n                this.setUsedIdForTypeName(element.constructor.name, element.getID());\r\n            }\r\n\r\n            this.processActions(element.getActions());\r\n            this.processItems(element.getItems());\r\n        });\r\n    }\r\n\r\n    protected processActions(actions: Action[]): void {\r\n        actions.forEach(element => {\r\n            if ((element instanceof ItemYieldingAction)\r\n                && !element.getItem().getID()) {\r\n                element.getItem().setID(this.getIdFromTypeName(element.constructor.name));\r\n            }\r\n        });\r\n    }\r\n\r\n    protected processItems(items: InGameItem[]): void {\r\n        items.forEach(element => {\r\n            if (!element.getID()) {\r\n                element.setID(this.getIdFromTypeName(element.constructor.name));\r\n            } else {\r\n                this.setUsedIdForTypeName(element.constructor.name, element.getID());\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getIdFromTypeName(name: string): number {\r\n        const index = this.typeArray.findIndex(element => {\r\n            return element.Name === name;\r\n        });\r\n\r\n        if (index !== -1) {\r\n            return this.typeArray[index].getAndIncrementCount();\r\n        }\r\n\r\n\r\n        return this.createTypeCountContainer(name).getAndIncrementCount();\r\n    }\r\n\r\n    public addItemId(item: InGameItem): void {\r\n        this.setUsedIdForTypeName(item.constructor.name, item.getID());\r\n    }\r\n\r\n    public addSceneId(scene: Scene): void {\r\n        this.setUsedIdForTypeName(scene.constructor.name, scene.getID());\r\n    }\r\n\r\n    public addActionItemId(action: ItemYieldingAction): void {\r\n        this.setUsedIdForTypeName(action.getItem().constructor.name, action.getItem().getID());\r\n    }\r\n\r\n    /**\r\n     * Add the passed id to the corresponding typeNameContainer's usedID Array\r\n     */\r\n    protected setUsedIdForTypeName(name: string, id: number): void {\r\n        const index = this.typeArray.findIndex(element => {\r\n            return element.Name === name;\r\n        });\r\n\r\n        if (index !== -1) {\r\n            this.typeArray[index].addUsedID(id);\r\n            return;\r\n        }\r\n\r\n        this.createTypeCountContainer(name).addUsedID(id);\r\n    }\r\n\r\n    protected createTypeCountContainer(name: string): TypeCountContainer {\r\n        const container = new TypeCountContainer(name);\r\n        this.typeArray.push(container);\r\n        return container;\r\n    }\r\n\r\n    protected getTypeCountContainers(): TypeCountContainer[] {\r\n        return this.typeArray;\r\n    }\r\n\r\n}\r\n\r\nexport class TypeCountContainer {\r\n    public Name: string;\r\n    public Count: number;\r\n    // keep track of the used ids for each type\r\n    public UsedIDs: number[];\r\n\r\n    constructor(name: string) {\r\n        this.Name = name;\r\n        this.Count = 0;\r\n        this.UsedIDs = [];\r\n    }\r\n\r\n    getAndIncrementCount(): number {\r\n        this.Count++;\r\n        while (this.isCurrentCountUsed()) {\r\n            this.Count++;\r\n        }\r\n        this.addUsedID(this.Count);\r\n        return this.Count;\r\n    }\r\n\r\n    addUsedID(usedId: number): void {\r\n        if (this.isIdUsed(usedId)) {\r\n            throw new EvalError('Id is already being used.');\r\n        }\r\n        this.UsedIDs.push(usedId);\r\n    }\r\n\r\n    isCurrentCountUsed(): boolean {\r\n        return this.UsedIDs.filter(element => element === this.Count).length > 0;\r\n    }\r\n\r\n    isIdUsed(id: number): boolean {\r\n        return !(!this.UsedIDs.find(element => element === id));\r\n    }\r\n}\r\n","export enum TextInputType {\r\n    UserInput = 'input',\r\n    Output = 'output'\r\n}\r\n","import { Command } from '../models/command.model';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { CommandContainingBuilder } from './interfaces/command-containing.builder';\r\n\r\nexport class CommandBuilder<ReturnBuilderType extends CommandContainingBuilder> extends BaseBuilder {\r\n    protected Command: Command;\r\n    private Builder: ReturnBuilderType;\r\n\r\n    constructor(builder: ReturnBuilderType, command: Command = new Command()) {\r\n        super();\r\n        this.Command = command;\r\n        this.Builder = builder;\r\n    }\r\n\r\n    public setTrigger(trigger: string): this {\r\n        if (!trigger) {\r\n            throw new EvalError('Trigger was undefined.');\r\n        }\r\n\r\n        this.Command.setTrigger(trigger);\r\n        return this;\r\n    }\r\n\r\n    public setResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('Response was undefined.');\r\n        }\r\n\r\n        this.Command.setResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setResponseFunction(respFunc: () => string): this {\r\n        if (!respFunc) {\r\n            throw new EvalError('ResponseFunction was undefined.');\r\n        }\r\n\r\n        this.Command.setResponseFunction(respFunc);\r\n        return this;\r\n    }\r\n\r\n    public setUseTypeWritingAnimation(use: boolean): this {\r\n        if (use === undefined || use === null) {\r\n            throw new EvalError('UseTypeWritingAnimation was undefined.');\r\n        }\r\n\r\n        this.Command.setUseTypeWritingAnimation(use);\r\n        return this;\r\n    }\r\n\r\n    public setDescription(descr: string): this {\r\n        if (!descr) {\r\n            throw new EvalError('Description was undefined');\r\n        }\r\n\r\n        this.Command.setDescription(descr);\r\n        return this;\r\n    }\r\n\r\n    public finish(): ReturnBuilderType {\r\n        if (!this.Command.getTrigger()) {\r\n            throw new BuilderError('Could not create Command. Trigger was not set.');\r\n        }\r\n\r\n        if (!this.Command.getDescription()) {\r\n            throw new BuilderError('Could not create Command. Description was not set.');\r\n        }\r\n\r\n        if (!this.Command.getResponse() && !this.Command.getResponseFunction()) {\r\n            throw new BuilderError('Could not create Command. Response and ResponseFunction were not set. One of both is required.');\r\n        }\r\n\r\n        if (this.Command.getUseTypeWritingAnimation() === undefined || this.Command.getUseTypeWritingAnimation() === null) {\r\n            this.Command.setUseTypeWritingAnimation(true);\r\n        }\r\n\r\n        this.Builder.addCommandToBuilder(this.Command);\r\n\r\n        return this.Builder;\r\n    }\r\n\r\n}\r\n","import { Game } from '../models/game.model';\r\nimport { InventoryBuilder } from './inventory.builder';\r\nimport { BuilderError } from '../models/errors/builder.error';\r\nimport { SceneBuilder } from './scene.builder';\r\nimport { BaseBuilder } from './base.builder';\r\nimport { IDGeneratorService } from '../services/id-generator.service';\r\nimport { Command } from '../models/command.model';\r\nimport { CommandContainingBuilder } from './interfaces/command-containing.builder';\r\nimport { CommandBuilder } from './command.builder';\r\n\r\n/**\r\n * Use this class to chain the game building process.\r\n * Once your Game is build completely, call the 'build' method.\r\n */\r\nexport class GameBuilder extends BaseBuilder implements CommandContainingBuilder {\r\n    protected Game: Game;\r\n    public IdGeneratorService: IDGeneratorService;\r\n\r\n    constructor() {\r\n        super();\r\n        this.Game = new Game();\r\n        this.IdGeneratorService = new IDGeneratorService();\r\n    }\r\n\r\n    public addInventory(): InventoryBuilder {\r\n        return new InventoryBuilder(this, this.Game);\r\n    }\r\n\r\n    public addScene(id?: number): SceneBuilder {\r\n        return new SceneBuilder(this, this.Game, id);\r\n    }\r\n\r\n    public addCommand(): CommandBuilder<GameBuilder> {\r\n        return new CommandBuilder(this);\r\n    }\r\n\r\n    addCommandToBuilder(command: Command): this {\r\n        if (!command) {\r\n            throw new BuilderError('Command was undefined');\r\n        }\r\n\r\n        this.Game.getCommands().push(command);\r\n        return this;\r\n    }\r\n\r\n    public removeExistingCommands(): this {\r\n        this.Game.setCommands([]);\r\n        return this;\r\n    }\r\n\r\n    public setTitle(title: string): this {\r\n        if (!title) {\r\n            throw new EvalError('Title was undefined.');\r\n        }\r\n\r\n        this.Game.setTitle(title);\r\n        return this;\r\n    }\r\n\r\n    public setIntroduction(intro: string): this {\r\n        if (!intro) {\r\n            throw new EvalError('Introduction was undefined.');\r\n        }\r\n\r\n        this.Game.setIntroduction(intro);\r\n        return this;\r\n    }\r\n\r\n    public setItemNotFoundInInventoryResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemNotFoundInInventoryResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setItemNotFoundInInventoryResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setItemAddedToInventoryResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('ItemAddedToInventoryResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setItemAddedToInventoryResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setGatewayTargetNotFoundResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('GatewayTargetNotFoundResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setGatewayTargetNotFoundResponse(response);\r\n        return this;\r\n    }\r\n\r\n    public setInventoryEmptyResponse(response: string): this {\r\n        if (!response) {\r\n            throw new EvalError('InventoryEmptyResponse was undefined.');\r\n        }\r\n\r\n        this.Game.setInventoryEmptyResponse(response);\r\n        return this;\r\n    }\r\n\r\n\r\n    public finish(): Game {\r\n\r\n        if (!this.Game.getTitle()) {\r\n            throw new BuilderError('Game creation could not be finished. Title was not set.');\r\n        }\r\n\r\n        if (!this.Game.getIntroduction()) {\r\n            throw new BuilderError('Game creation could not be finished. Introduction was not set.');\r\n        }\r\n\r\n        if (!this.Game.getItemAddedToInventoryResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. ItemAddedToInventoryResponse was not set.');\r\n        }\r\n\r\n        if (!this.Game.getItemNotFoundInInventoryResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. ItemNotFoundInInventoryResponse was not set.');\r\n        }\r\n\r\n        if (!this.Game.getGatewayTargetNotFoundResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. GatewayTargetNotFoundResponse was not set.');\r\n        }\r\n\r\n        if (!this.Game.getInventoryEmptyResponse()) {\r\n            throw new BuilderError('Game creation could not be finished. InventoryEmptyResponse was not set.');\r\n        }\r\n\r\n        if (this.Game.getScenesCount() <= 0) {\r\n            throw new BuilderError('Game creation could not be finished. No Scenes were found.');\r\n        }\r\n\r\n        this.generateUnassignedIds();\r\n        return this.Game;\r\n    }\r\n\r\n\r\n    protected generateUnassignedIds(): void {\r\n        this.IdGeneratorService.generateIDs(this.Game);\r\n    }\r\n}\r\n","import { TextInputType } from './text-input.enum';\r\n\r\nexport class TextInput {\r\n    Value: string;\r\n    Type: TextInputType;\r\n\r\n    constructor(Value: string, Type: TextInputType) {\r\n        this.Value = Value;\r\n        this.Type = Type;\r\n    }\r\n}\r\n","export class ParseInputResult {\r\n    public Result: string;\r\n    public UseTypewriterAnimation: boolean;\r\n    public IsEndGameResult: boolean;\r\n\r\n    constructor(result: string, typewriteAnimation: boolean = true, isEndGameResult: boolean = false) {\r\n        this.Result = result;\r\n        this.UseTypewriterAnimation = typewriteAnimation;\r\n        this.IsEndGameResult = isEndGameResult;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Action } from '../models/actions/action.model';\r\nimport { InGameItem } from '../models/Item.model';\r\nimport { Game } from '../models/game.model';\r\n\r\nimport * as natural from 'natural';\r\nimport { InteractionType } from '../models/interactions/interaction-type.enum';\r\nimport { IClassificationTrainer } from './classification-trainer.interface';\r\nimport { ParseInputResult } from '../models/other/parse-input-result.model';\r\nconst language = 'EN';\r\n// see Penn Treebank Part-of-Speech Tags for more info on the tags\r\nconst defaultCategory = 'N';\r\nconst defaultCategoryCapitalized = 'NNP';\r\nconst nounCategories = ['N', 'NN', 'NNS', 'NNP', 'NNPS'];\r\nconst verbCategories = ['VB', 'VBD', 'VBG', 'VBN', 'VBO', 'VBZ'];\r\n\r\n/**\r\n * Helps to parse text input and call the corresponding action, returning a response\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class InputParserService {\r\n    private Game: Game;\r\n    private POSTagger: natural.BrillPOSTagger;\r\n    private Tokenizer: natural.WordTokenizer;\r\n    private Classifier: natural.BayesClassifier;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public initialize(trainer: IClassificationTrainer): Promise<boolean> {\r\n        return new Promise<boolean>((resolve) => {\r\n            this.Tokenizer = new natural.WordTokenizer();\r\n            const lexicon = new natural.Lexicon(language, defaultCategory, defaultCategoryCapitalized);\r\n            const ruleSet = new natural.RuleSet('EN');\r\n            this.POSTagger = new natural.BrillPOSTagger(lexicon, ruleSet);\r\n            this.Classifier = new natural.BayesClassifier();\r\n            trainer.trainClassifier(this.Classifier).then(() => resolve(true));\r\n        });\r\n    }\r\n\r\n\r\n    setGame(game: Game): void {\r\n        this.Game = game;\r\n    }\r\n\r\n    public parseInput(input: string): ParseInputResult {\r\n        const commandsResult = this.getCommandsResponse(input);\r\n        if (commandsResult) {\r\n            return commandsResult;\r\n        }\r\n\r\n        // because imperatives are not so common in the brown/penn corpus, we add a 'they ' before\r\n        // the whole sentence, in order to make it a legitimate sentence and identify imperatives as verbs instead of nouns\r\n        input = 'they ' + input;\r\n\r\n        const taggedTokens = this.POSTagger.tag(this.Tokenizer.tokenize(input)).taggedWords;\r\n        // we get verbs and nouns, because in many cases a noun may be mistaken to be a verb and vice versa e.g. (a) stick & (to) stick\r\n        const nounsAndVerbs = this.getNounsAndVerbsFromTokenizedInput(taggedTokens);\r\n\r\n        const interactionType = this.getInteractionType(input);\r\n\r\n        // no interaction type found\r\n        if (interactionType === undefined || interactionType === null) {\r\n            return new ParseInputResult(this.Game.getInvalidInputResponse());\r\n        }\r\n\r\n        switch (interactionType) {\r\n            case InteractionType.GO_TO:\r\n                // scenes/gateway actions\r\n                return this.getGoToResponse(nounsAndVerbs);\r\n            case InteractionType.LOOK_AT:\r\n                // item description\r\n                return this.getLookAtResponse(nounsAndVerbs);\r\n            case InteractionType.PICK_UP:\r\n                // add item to inventory\r\n                return this.getPickUpResponse(nounsAndVerbs);\r\n            case InteractionType.USE:\r\n                // use item in inventory or in scene\r\n                return this.getUseResponse(nounsAndVerbs);\r\n            default:\r\n                // do something\r\n                return this.getDoResponse(nounsAndVerbs);\r\n        }\r\n\r\n    }\r\n\r\n    protected getCommandsResponse(input: string): ParseInputResult {\r\n        const lowerCaseInput = input.toLocaleLowerCase();\r\n\r\n        let commandsResult: ParseInputResult;\r\n        this.Game.getCommands().some(command => {\r\n            if (command.getTrigger().toLocaleLowerCase() === lowerCaseInput) {\r\n                commandsResult = new ParseInputResult(command.activate(), command.getUseTypeWritingAnimation());\r\n                return true;\r\n            }\r\n        });\r\n\r\n        return commandsResult;\r\n    }\r\n\r\n    protected getGoToResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n        // get gateway actions\r\n        const gatewayActions = this.Game.getActionsInScene().filter(val => {\r\n            return val.getInteractionType() === InteractionType.GO_TO;\r\n        });\r\n\r\n        if (!gatewayActions || gatewayActions.length <= 0) {\r\n            result.Result = this.Game.getGatewayTargetNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const actionDistances = this.getActionDistancesFromNouns(relevantWords, gatewayActions);\r\n\r\n        if (!actionDistances || actionDistances.length <= 0) {\r\n            result.Result = this.Game.getGatewayTargetNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const action = actionDistances[0].Action;\r\n\r\n        result.Result = action.trigger();\r\n        result.IsEndGameResult = action.getIsEndGameAction();\r\n        return result;\r\n\r\n    }\r\n\r\n    protected getLookAtResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const itemDistances = this.getItemDistancesFromNouns(relevantWords,\r\n            this.Game.getItemsInScene(),\r\n            this.Game.getItemsInInventory());\r\n\r\n        if (!itemDistances || itemDistances.length <= 0) {\r\n            result.Result = this.Game.getItemNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        result.Result = itemDistances[0].Item.getDescription();\r\n        return result;\r\n    }\r\n\r\n    protected getPickUpResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const itemDistances = this.getItemDistancesFromNouns(relevantWords,\r\n            this.Game.getItemsInScene(),\r\n            undefined);\r\n\r\n        if (!itemDistances || itemDistances.length <= 0) {\r\n            result.Result = this.Game.getItemNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const item = itemDistances[0].Item;\r\n\r\n        if (!item.getCanPickUp()) {\r\n            result.Result = item.getCannotPickUpResponse();\r\n            return result;\r\n        }\r\n\r\n        // one cannot pick up an item, that has no usages left anymore\r\n        if (item.getUsagesLeft() <= 0) {\r\n            result.Result = item.getNoUsagesLeftResponse();\r\n            return result;\r\n        }\r\n\r\n        this.Game.addItemToInventory(item);\r\n\r\n        this.Game.removeItemFromScene(item);\r\n\r\n        result.Result = this.Game.getItemAddedToInventoryResponse();\r\n        return result;\r\n    }\r\n\r\n    protected getUseResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const itemDistances = this.getItemDistancesFromNouns(relevantWords,\r\n            this.Game.getItemsInScene(),\r\n            this.Game.getItemsInInventory());\r\n\r\n        if (!itemDistances || itemDistances.length <= 0) {\r\n            result.Result = this.Game.getItemNotFoundResponse();\r\n            return result;\r\n        }\r\n\r\n        const currentItem = itemDistances[0].Item;\r\n\r\n        if (!currentItem.CanUseFunction(currentItem, this.Game.getStage().getCurrentScene(), this.Game.getInventory())) {\r\n            result.Result = currentItem.getCannotUseItemResponse();\r\n            return result;\r\n        }\r\n\r\n        result.Result = currentItem.use();\r\n\r\n        // if the item was in the inventory and has no usages left anymore -> remove it from inventory\r\n        if (currentItem.WasPickedUp && currentItem.getUsagesLeft() <= 0) {\r\n            result.Result += `\\r\\n${currentItem.getNoUsagesLeftResponse()}`;\r\n            this.Game.removeItemFromInventory(currentItem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected getDoResponse(relevantWords: string[]): ParseInputResult {\r\n        const result = new ParseInputResult('');\r\n\r\n        const actions = this.Game.getActionsInScene().filter(val => {\r\n            return val.getInteractionType() === InteractionType.DO;\r\n        });\r\n\r\n        if (!actions || actions.length <= 0) {\r\n            result.Result = this.Game.getActionNotRecognizedResponse();\r\n            return result;\r\n        }\r\n\r\n        const actionDistances = this.getActionDistancesFromNouns(relevantWords, actions);\r\n\r\n        if (!actionDistances || actionDistances.length <= 0) {\r\n            result.Result = this.Game.getActionNotRecognizedResponse();\r\n            return result;\r\n        }\r\n\r\n        const action = actionDistances[0].Action;\r\n\r\n        result.Result = action.trigger();\r\n        result.IsEndGameResult = action.getIsEndGameAction();\r\n        return result;\r\n    }\r\n\r\n    protected getNounsAndVerbsFromTokenizedInput(taggedTokens: TaggedToken[]): any {\r\n        return taggedTokens.reduce<string[]>((result, token) => {\r\n            if (nounCategories.includes(token.tag) || verbCategories.includes(token.tag)) {\r\n                result.push(token.token);\r\n            }\r\n\r\n            return result;\r\n        }, []);\r\n    }\r\n\r\n    private getItemDistancesFromNouns(relevantWords: string[], sceneItems: InGameItem[], inventoryItems: InGameItem[]): ItemDistance[] {\r\n        const itemDistances: ItemDistance[] = [];\r\n\r\n        let items = [];\r\n        if (sceneItems) {\r\n            items = items.concat(sceneItems);\r\n        }\r\n\r\n        if (inventoryItems) {\r\n            items = items.concat(inventoryItems);\r\n        }\r\n\r\n        items.map(val => {\r\n            const taggedName = this.POSTagger.tag(this.Tokenizer.tokenize(val.Name)).taggedWords;\r\n            taggedName.map(name => {\r\n                relevantWords.map(input => {\r\n                    const distance = natural.DamerauLevenshteinDistance(input,\r\n                        name.token, { transposition_cost: 0 });\r\n                    if (distance <= 1) {\r\n                        itemDistances.push(new ItemDistance(val, distance));\r\n                    }\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n        return itemDistances.sort(val => val.Distance);\r\n    }\r\n\r\n    private getActionDistancesFromNouns(relevantWords: string[], actions: Action[]): ActionDistance[] {\r\n        const actionDistances: ActionDistance[] = [];\r\n\r\n        actions.map(val => {\r\n            const taggedTrigger = this.POSTagger.tag(this.Tokenizer.tokenize(val.getTrigger())).taggedWords;\r\n\r\n            taggedTrigger.map(trigger => {\r\n                relevantWords.map(input => {\r\n                    const distance = natural.DamerauLevenshteinDistance(input,\r\n                        trigger.token, { transposition_cost: 0 });\r\n                    if (distance <= 1) {\r\n                        actionDistances.push(new ActionDistance(val, distance));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        return actionDistances.sort(val => val.Distance);\r\n    }\r\n\r\n    protected getInteractionType(input: string): InteractionType {\r\n        const result = this.Classifier.classify(input);\r\n        return this.getInteractionTypeFromClassificationResult(result);\r\n    }\r\n\r\n    public getInteractionTypeFromClassificationResult(result: string): InteractionType {\r\n        switch (result) {\r\n            case 'use':\r\n                return InteractionType.USE;\r\n            case 'look_at':\r\n                return InteractionType.LOOK_AT;\r\n            case 'go_to':\r\n                return InteractionType.GO_TO;\r\n            case 'pick_up':\r\n                return InteractionType.PICK_UP;\r\n            case 'do':\r\n                return InteractionType.DO;\r\n            default:\r\n                return InteractionType.DO;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass ActionTag {\r\n    public Action: Action;\r\n    public Tag: string;\r\n\r\n    public constructor(action: Action, tag: string) {\r\n        this.Action = action;\r\n        this.Tag = tag;\r\n    }\r\n}\r\n\r\nclass ActionDistance {\r\n    public Action: Action;\r\n    public Distance: number;\r\n\r\n    public constructor(action: Action, distance: number) {\r\n        this.Action = action;\r\n        this.Distance = distance;\r\n    }\r\n}\r\n\r\nclass ItemDistance {\r\n    public Item: InGameItem;\r\n    public Distance: number;\r\n\r\n    public constructor(item: InGameItem, distance: number) {\r\n        this.Item = item;\r\n        this.Distance = distance;\r\n    }\r\n}\r\n\r\nclass ItemTag {\r\n    public Item: InGameItem;\r\n    public Tag: string;\r\n\r\n    public constructor(item: InGameItem, tag: string) {\r\n        this.Item = item;\r\n        this.Tag = tag;\r\n    }\r\n}\r\n\r\nclass TaggedToken {\r\n    token: string;\r\n    tag: string;\r\n    distance: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IClassificationTrainer } from './classification-trainer.interface';\r\nimport * as natural from 'natural';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ClassificationTrainer implements IClassificationTrainer {\r\n    trainClassifier(classifier: natural.BayesClassifier): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            classifier.addDocument('use keys', 'use');\r\n            classifier.addDocument('use knob', 'use');\r\n            classifier.addDocument('use old pen', 'use');\r\n            classifier.addDocument('use rusty knife', 'use');\r\n            classifier.addDocument('open door', 'use');\r\n            classifier.addDocument('open oven', 'use');\r\n            classifier.addDocument('open window', 'use');\r\n            classifier.addDocument('interact with animal', 'use');\r\n            classifier.addDocument('interact person', 'use');\r\n            classifier.addDocument('close door', 'use');\r\n            classifier.addDocument('close chest', 'use');\r\n            classifier.addDocument('shut window', 'use');\r\n            classifier.addDocument('shut the lid', 'use');\r\n            classifier.addDocument('drink soda', 'use');\r\n            classifier.addDocument('drink water', 'use');\r\n            classifier.addDocument('eat mushrooms', 'use');\r\n            classifier.addDocument('eat food', 'use');\r\n\r\n            classifier.addDocument('look at house', 'look_at');\r\n            classifier.addDocument('look at the chair', 'look_at');\r\n            classifier.addDocument('inspect door', 'look_at');\r\n            classifier.addDocument('inspect knife', 'look_at');\r\n            classifier.addDocument('check window', 'look_at');\r\n            classifier.addDocument('check fireplace', 'look_at');\r\n            classifier.addDocument('analyze notes', 'look_at');\r\n            classifier.addDocument('analyze keys', 'look_at');\r\n            classifier.addDocument('read book', 'look_at');\r\n            classifier.addDocument('read letter', 'look_at');\r\n            classifier.addDocument('observe darkness', 'look_at');\r\n            classifier.addDocument('observe forrest', 'look_at');\r\n\r\n\r\n            classifier.addDocument('go inside', 'go_to');\r\n            classifier.addDocument('go outside', 'go_to');\r\n            classifier.addDocument('enter building', 'go_to');\r\n            classifier.addDocument('enter home', 'go_to');\r\n            classifier.addDocument('leave house', 'go_to');\r\n            classifier.addDocument('leave hut', 'go_to');\r\n            classifier.addDocument('run away', 'go_to');\r\n            classifier.addDocument('run into the darkness', 'go_to');\r\n            classifier.addDocument('walk to place', 'go_to');\r\n            classifier.addDocument('walk to the shed', 'go_to');\r\n            classifier.addDocument('walk into the bar', 'go_to');\r\n            classifier.addDocument('go to Peter', 'go_to');\r\n            classifier.addDocument('go in to the forrest', 'go_to');\r\n            classifier.addDocument('go into the cellar', 'go_to');\r\n\r\n\r\n            classifier.addDocument('take keys', 'pick_up');\r\n            classifier.addDocument('take up book', 'pick_up');\r\n            classifier.addDocument('take notebook', 'pick_up');\r\n            classifier.addDocument('pick up a lighter', 'pick_up');\r\n            classifier.addDocument('pick up leash', 'pick_up');\r\n            classifier.addDocument('put something into bag', 'pick_up');\r\n            classifier.addDocument('put water bottle into inventory', 'pick_up');\r\n            classifier.addDocument('gather mushrooms', 'pick_up');\r\n            classifier.addDocument('collect stones', 'pick_up');\r\n            classifier.addDocument('acquire medal', 'pick_up');\r\n\r\n            classifier.addDocument('dance', 'do');\r\n            classifier.addDocument('sit', 'do');\r\n            classifier.addDocument('stand', 'do');\r\n            classifier.addDocument('sleep', 'do');\r\n            classifier.addDocument('fish', 'do');\r\n            classifier.addDocument('do', 'do');\r\n            classifier.addDocument('write', 'do');\r\n            classifier.addDocument('read', 'do');\r\n            classifier.addDocument('find', 'do');\r\n            classifier.addDocument('work', 'do');\r\n            classifier.addDocument('try', 'do');\r\n            classifier.addDocument('feel', 'do');\r\n            classifier.addDocument('create', 'do');\r\n            classifier.addDocument('speak', 'do');\r\n            classifier.addDocument('talk', 'do');\r\n            classifier.addDocument('offer', 'do');\r\n            classifier.addDocument('buy', 'do');\r\n            classifier.addDocument('kill', 'do');\r\n            classifier.addDocument('beat', 'do');\r\n            classifier.addDocument('harm', 'do');\r\n            classifier.addDocument('jump', 'do');\r\n            classifier.addDocument('sell', 'do');\r\n            classifier.addDocument('pull', 'do');\r\n            classifier.addDocument('push', 'do');\r\n            classifier.addDocument('put', 'do');\r\n\r\n            classifier.events.on('trainedWithDocument', () => resolve());\r\n\r\n            classifier.train();\r\n            resolve();\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","import { Game } from '../game.model';\r\n\r\nexport class GameResetEvent {\r\n\r\n    constructor(game: Game) {\r\n    }\r\n}\r\n","import { Game } from '../game.model';\r\n\r\nexport class GameEndEvent {\r\n\r\n    constructor(game: Game) {\r\n    }\r\n}\r\n","export class GameStartEvent {\r\n\r\n}\r\n","import { Component, OnInit, ElementRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { TextInputType } from '../models/other/text-input.enum';\r\nimport { TextInput } from '../models/other/text-input.model';\r\nimport { Game } from '../models/game.model';\r\nimport { GameBuilder } from '../builder/game.builder';\r\nimport { InputParserService } from '../services/input-parser.service';\r\nimport { ClassificationTrainer } from '../services/classification-trainer.service';\r\nimport { GameResetEvent } from '../models/events/game-reset.event';\r\nimport { GameEndEvent } from '../models/events/game-end.event';\r\nimport { GameStartEvent } from '../models/events/game-start.event';\r\nimport { InteractionType } from '../models/interactions/interaction-type.enum';\r\nimport { IClassificationTrainer } from '../services/classification-trainer.interface';\r\nimport { GameError } from '../models/errors/game.error';\r\n\r\n/**\r\n * Main Component, that contains the input and output of the game.\r\n */\r\n@Component({\r\n  selector: 'tas-text-adventure',\r\n  templateUrl: './text-adventure.component.html',\r\n  styleUrls: ['./text-adventure.component.scss']\r\n})\r\nexport class TextAdventureComponent implements OnInit {\r\n  @ViewChild('input', { static: true }) inputElement: ElementRef;\r\n\r\n  OutputArray: TextInput[] = [];\r\n  IsLoading = false;\r\n  @Input() UseTypewritingAnimation = true;\r\n  @Input() TypewriterSpeed = 40;\r\n\r\n  @Input() Game: Game;\r\n  @Input() ClassificationTrainer: IClassificationTrainer;\r\n\r\n  @Output() OnGameStartEvent: EventEmitter<GameStartEvent> = new EventEmitter<GameStartEvent>();\r\n  @Output() OnGameResetEvent: EventEmitter<GameResetEvent> = new EventEmitter<GameResetEvent>();\r\n  @Output() OnGameEndEvent: EventEmitter<GameEndEvent> = new EventEmitter<GameEndEvent>();\r\n\r\n  GameBuilder: GameBuilder;\r\n\r\n  InputForm: FormGroup = new FormGroup(\r\n    {\r\n      userInput: new FormControl({\r\n        value: '',\r\n        disabled: this.IsLoading\r\n      }, [\r\n        Validators.required\r\n      ])\r\n    }\r\n  );\r\n\r\n  constructor(private inputParserService: InputParserService) {\r\n    if (!this.ClassificationTrainer) {\r\n      inputParserService.initialize(new ClassificationTrainer());\r\n    }\r\n    else {\r\n      inputParserService.initialize(this.ClassificationTrainer);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.startLoading();\r\n    if (!this.Game) {\r\n      throw new GameError('Game not found.');\r\n    }\r\n    this.startGame();\r\n  }\r\n\r\n  OnSubmit(): void {\r\n    this.startLoading();\r\n    const inputString = this.userInput.value;\r\n    if (!inputString) {\r\n      this.stopLoading();\r\n      return;\r\n    }\r\n    this.printInput(inputString);\r\n    this.userInput.setValue('');\r\n\r\n    const parseResult = this.inputParserService.parseInput(inputString);\r\n\r\n    this.printOutput(parseResult.Result, parseResult.UseTypewriterAnimation).then(() => this.stopLoading());\r\n  }\r\n\r\n  OnGameReset(): void {\r\n    this.OnGameResetEvent.emit(new GameResetEvent(this.Game));\r\n  }\r\n\r\n  OnGameEnd(): void {\r\n    this.OnGameEndEvent.emit(new GameEndEvent(this.Game));\r\n  }\r\n\r\n  private get userInput(): FormControl {\r\n    return this.InputForm.get('userInput') as FormControl;\r\n  }\r\n\r\n  private startLoading(): void {\r\n    this.IsLoading = true;\r\n    this.userInput.disable();\r\n  }\r\n\r\n  private stopLoading(): void {\r\n    this.IsLoading = false;\r\n    this.userInput.enable();\r\n    setTimeout(() => {\r\n      this.inputElement.nativeElement.focus();\r\n    });\r\n  }\r\n\r\n  private startGame(): void {\r\n    this.inputParserService.setGame(this.Game);\r\n    this.OnGameStartEvent.emit(new GameStartEvent());\r\n    this.printOutput(this.Game.getTitle()).then(() => this.printOutput(this.Game.getIntroduction())).then(() => this.stopLoading());\r\n  }\r\n\r\n  private printOutput(output: string, useTypewriteAnimationOnOutput: boolean = true): Promise<void> {\r\n    return new Promise<void>((outerResolve) => {\r\n      if (useTypewriteAnimationOnOutput && this.UseTypewritingAnimation) {\r\n        const outputLines = output.split('\\r\\n');\r\n        // we create a promise chain, in order to avoid printing new lines written as '<br>'\r\n        let outputPromise = new Promise((resolve) => resolve());\r\n        for (const singleLine of outputLines) {\r\n          outputPromise = outputPromise.then(() => this.printLineAnimated(singleLine));\r\n        }\r\n        outputPromise = outputPromise.then(outerResolve);\r\n      } else {\r\n        output = output.split('\\r\\n').join('<br>');\r\n        this.OutputArray.push(new TextInput(output, TextInputType.Output));\r\n        outerResolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  private printLineAnimated(line: string): Promise<void> {\r\n    return new Promise<void>((resolve) => {\r\n      this.OutputArray.push(new TextInput('', TextInputType.Output));\r\n      // exit the recursion with the \"resolve\" function of the promise\r\n      this.typewriteOutput(0, line, this.OutputArray, resolve);\r\n    });\r\n  }\r\n\r\n  private typewriteOutput(i: number, output: string, outputArray: TextInput[], resolveFunction): void {\r\n    if (i >= output.length) {\r\n      resolveFunction();\r\n    }\r\n    const char = output.charAt(i);\r\n    outputArray[outputArray.length - 1].Value += char;\r\n    i++;\r\n    setTimeout(() => {\r\n      this.typewriteOutput(i, output, this.OutputArray, resolveFunction);\r\n    }, this.TypewriterSpeed);\r\n  }\r\n\r\n  private printInput(input: string): void {\r\n    this.OutputArray.push(new TextInput(input, TextInputType.UserInput));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { TextAdventureComponent } from './text-adventure.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    TextAdventureComponent\r\n  ],\r\n  exports: [\r\n    TextAdventureComponent\r\n  ],\r\n})\r\nexport class TextAdventureModule { }\r\n"]}